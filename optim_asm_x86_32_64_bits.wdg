#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : optim_asm_x86_32_64_bits
 major_version : 25
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1e52a1de0497a7de
 internal_properties : BQAAAAUAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes : []
  procedures :
   -
     name : pGetprocAddition256p256_256c_ASM
     procedure_id : 2184986744160036830
     type_code : 15
     code : |1+
      Procédure pGetprocAddition256p256_256c_ASM() : entier système
      
      // code ASM 32 bits
      sCodeASMx8632_Addition256_x86 est chaîne = [
      	// proto add256( INTOU int256 *A, int256 *B)  OUT BOOL retenue
      	// prologue
      	Push edx
      	Push ecx
      	
      	// récup adresses
      	mov edx,[ESP+12] // P1 = A dans EBX
      	mov ecx,[ESP+16] // P2 = B dans ECX
      	
      	//  bit 0 a 31
      	mov eax,[ecx]
      	Add [edx],eax ; // A += B
      	// bits 32 a 63
      	mov eax,[ecx+4]
      	adc [edx+4],eax ; // A += B + retenue
      	// bits 64 a 95
      	mov eax,[ecx+8]
      	adc [edx+8],eax ; // A += B + retenue	
      	// bits 96 a 127
      	mov eax,[ecx+12]
      	adc [edx+12],eax ; // A += B + retenue	
      	
      	// bits 128 a 159
      	mov eax,[ecx+16]
      	adc [edx+16],eax ; // A += B + retenue
      	mov eax,[ecx+20]
      	adc [edx+20],eax ; // A += B + retenue
      	mov eax,[ecx+24]
      	adc [edx+24],eax ; // A += B + retenue	
      	mov eax,[ecx+28]
      	adc [edx+28],eax ; // A += B + retenue	
      	
      	
      	// valeur de retrou = retenue
      	mov eax,0
      	adc eax,0
      	
      	// epilogue
      	Pop ecx
      	Pop edx
      	ret 8	// 2 paramètres de 4 octets
      ]
      // Code ASM  64 bits
      sCodeASMx8632_Addition256_x64 est chaîne = [
      	// proto add256( INTOU int256 *A, int256 *B)  OUT BOOL retenue
      	//	; P1 : rcx
      	//	; P2 : rdx
      	
      	//  bit 0 a 63
      	mov rax,[rdx]
      	Add  [rcx],rax ; // A += B
      	// bits 64 a 127
      	mov rax,[rdx+8]
      	adc [rcx+8],rax ; // A += B + retenue	
      	// bits 128 a 195
      	mov rax,[rdx+16]
      	adc [rcx+16],rax ; // A += B + retenue	
      	// bits 196 a 255
      	mov rax,[rdx+24]
      	adc [rcx+24],rax ; // A += B + retenue	
      	
      	// valeur de retour = retenue
      	mov rax,0 // et pas xor rax,rax car raz C 
      	adc rax,0
      	ret
      ]
      // compile le code ASM 64 ou 32
      procAddition_ASM est une  entier système 
      si EnMode64bits() ALORS
      	procAddition_ASM = compileAsmX86_API( sCodeASMx8632_Addition256_x64 )
      sinon
      	procAddition_ASM = compileAsmX86_API( sCodeASMx8632_Addition256_x86 )
      fin
      dbgAssertion( procAddition_ASM<>0, ErreurInfo())
      dbgAssertion( PAS ErreurDétectée, ErreurInfo())
      renvoyer procAddition_ASM
      
     type : 458752
   -
     name : pGetprocMult128x128_256_ASM
     procedure_id : 2184986744160102366
     type_code : 15
     code : |1+
      PROCÉDURE pGetprocMult128x128_256_ASM() : entier système
      
      // version 32 bits
      sCodeASMx8632_Mult128x128_256_x86 est chaîne = [
      	; Proto C :
      	;  void multiply128x128_256(int128 *À, int128 *b, int256 *c);
      	; calcule C = À * B
      	; AVEC 
      	;	   edi = *À
      	;	   ESI = *B
      	;	   ECX = *C (dest)
      	;
      	; À en big endian :
      	; 0				+4			+8			 +12
      	; poids faible						 poids fort
      	
      	; prolohue
      	Push    ebp
      	mov     ebp, ESP   
      	Push	ebx
      	Push 	edx
      	Push    ecx
      	Push 	edi
      	Push 	esi
      	
      	; recu param
      	mov edi,[ebp +8]
      	mov esi,[ebp+12]
      	mov ecx,[ebp+16]
      	
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; A0 * B0
      	mov eax,[edi+0]
      	mov ebx,[esi+0]
      	mul ebx		; (edx,eax) = eax * ebx
      	mov [ecx+ 0],eax
      	mov [ecx+ 4],edx
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A1 * B0
      	mov eax,[edi+4]
      	mov ebx,[esi+0]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 4],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 8],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 12],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A2 * B0
      	mov eax,[edi+8]
      	mov ebx,[esi+0]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+  8],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 12],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 16],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A3 * B0
      	mov eax,[edi+12]
      	mov ebx,[esi+0]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 12],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 16],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 20],eax ; +0+c
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; B1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; A0 * B1
      	mov eax,[edi+0]
      	mov ebx,[esi+4]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 4],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 8],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 12],eax ; +0+c
      	adc [ecx+ 16],eax ; +0+c
      	adc [ecx+ 20],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A1 * B1
      	mov eax,[edi+4]
      	mov ebx,[esi+4]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 8],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 12],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 16],eax ; +0+c
      	adc [ecx+ 20],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A2 * B1
      	mov eax,[edi+8]
      	mov ebx,[esi+4]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 12],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 16],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 20],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A3 * B1
      	mov eax,[edi+12]
      	mov ebx,[esi+4]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 16],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 20],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 24],eax ; +0+c
      	
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; B2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; A0 * B2
      	mov eax,[edi+0]
      	mov ebx,[esi+8]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 8],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 12],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 16],eax ; +0+c
      	adc [ecx+ 20],eax ; +0+c
      	adc [ecx+ 24],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A1 * B2
      	mov eax,[edi+4]
      	mov ebx,[esi+8]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 12],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 16],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 20],eax ; +0+c
      	adc [ecx+ 24],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A2 * B2
      	mov eax,[edi+8]
      	mov ebx,[esi+8]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 16],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 20],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 24],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A3 * B2
      	mov eax,[edi+12]
      	mov ebx,[esi+8]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 20],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 24],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 28],eax ; +0+c
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; B3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; A0 * B3
      	mov eax,[edi+0]
      	mov ebx,[esi+12]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 12],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 16],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 20],eax ; +0+c
      	adc [ecx+ 24],eax ; +0+c
      	adc [ecx+ 28],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A1 * B3
      	mov eax,[edi+4]
      	mov ebx,[esi+12]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 16],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 20],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 24],eax ; +0+c
      	adc [ecx+ 28],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A2 * B3
      	mov eax,[edi+8]
      	mov ebx,[esi+12]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 20],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 24],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 28],eax ; +0+c
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A3 * B3
      	mov eax,[edi+12]
      	mov ebx,[esi+12]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 24],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 28],edx
      	
      	
      	; epilogue
      	Pop esi
      	Pop edi
      	Pop ecx
      	Pop edx	
      	Pop	ebx
      	Pop	ebp
      	ret 12;  4 paramètres DWORD sur la pile
      ]
      // version 64 bits
      sCodeASMx8632_Mult128x128_256_x64 est chaîne = [
      	// proto  multiply128x128_256(int128 *À, int128 *b, int256 *c);
      	//	; P1 = A : rcx
      	//	; P2 = B : rdx
      	//	; P3 = C : r8
      	// C = A * B = A0*B0 + B1*B0 + A1*B0 + A1*B1
      	
      	
      	// proloque
      	Push rbx
      	Push rdx
      	Push r9
      	mov r9,rdx; // B dans R0, car rdx est utilisé comme résultat de poids fort par mul
      	
      	//A0*B0
      	mov rax,[rcx]  // A0
      	mov rbx,[r9]   // B0
      	mul rbx		   // (rdx,rax) = rax * rbx
      	mov [r8]   ,rax
      	mov [r8+8] ,rdx
      	
      	//+A0*B1
      	mov rax,[rcx]   // A0
      	mov rbx,[r9+8]  // B1
      	mul rbx		   // (rdx,rax) = rax * rbx
      	Add [r8+8]  ,rax
      	adc [r8+16] ,rdx
      	mov rax,0
      	adc [r8+24] ,rax // +C
      	
      	//+A1*B0
      	mov rax,[rcx+8] // A1
      	mov rbx,[r9]    // B0
      	mul rbx		   // (rdx,rax) = rax * rbx
      	Add [r8+8]  ,rax
      	adc [r8+16] ,rdx
      	mov rax,0
      	adc [r8+24] ,rax // +C	
      	
      	//+A1*B1
      	mov rax,[rcx+8] // A1
      	mov rbx,[r9+8]  // B1
      	mul rbx		   // (rdx,rax) = rax * rbx
      	Add [r8+16] ,rax
      	adc [r8+24] ,rdx
      	
      	// epilogue et retour
      	Pop r9
      	Pop rdx
      	Pop rbx
      	ret
      ]
      
      
      procMult128x128_256_ASM est une  entier système
      SI EnMode64bits() ALORS
      	procMult128x128_256_ASM = compileAsmX86_API( sCodeASMx8632_Mult128x128_256_x64 )
      sinon
      	procMult128x128_256_ASM = compileAsmX86_API( sCodeASMx8632_Mult128x128_256_x86 )
      fin
      dbgAssertion( procMult128x128_256_ASM<>0, ErreurInfo())
      dbgAssertion( PAS ErreurDétectée, ErreurInfo())
      renvoyer  procMult128x128_256_ASM
     type : 458752
   -
     name : pGetprocMult64x64_128_ASM
     procedure_id : 2184986744160167902
     type_code : 15
     code : |1-
      PROCÉDURE pGetprocMult64x64_128_ASM() : entier système
      
      // version 32 bits
      sCodeASMx8632_Mult64x64_128_x86 est chaîne = [
      	; Proto C :
      	;  void multiply128x128_256(int64 *À, int64 *B, int128 *C);
      	; calcule C = À * B
      	; AVEC 
      	;	   edi = *À
      	;	   ESI = *B
      	;	   ECX = *C (dest)
      	;
      	; À en big endian :
      	; 0				+4			+8			 +12
      	; poids faible						 poids fort
      	
      	; prolohue
      	Push    ebp
      	mov     ebp, ESP   
      	Push	ebx
      	Push 	edx
      	Push    ecx
      	Push 	edi
      	Push 	esi
      	
      	; recu param
      	mov edi,[ebp +8]
      	mov esi,[ebp+12]
      	mov ecx,[ebp+16]
      	
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; A0 * B0
      	mov eax,[edi+0]
      	mov ebx,[esi+0]
      	mul ebx		; (edx,eax) = eax * ebx
      	mov [ecx+ 0],eax
      	mov [ecx+ 4],edx
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A1 * B0
      	mov eax,[edi+4]
      	mov ebx,[esi+0]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 4],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 8],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 12],eax ; +0+c
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; B1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; A0 * B1
      	mov eax,[edi+0]
      	mov ebx,[esi+4]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 4],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 8],edx
      	mov eax,0      ; eax = 0
      	adc [ecx+ 12],eax ; +0+c
      	
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      	;; + A1 * B1
      	mov eax,[edi+4]
      	mov ebx,[esi+4]
      	mul ebx		; (edx,eax) = eax * ebx
      	Add [ecx+ 8],eax  ; addition au resultat AVEC propagation de la retenue
      	adc [ecx+ 12],edx
      	
      	; epilogue
      	Pop esi
      	Pop edi
      	Pop ecx
      	Pop edx	
      	Pop	ebx
      	Pop	ebp
      	ret 12
      ]
      // Version 64 bits
      sCodeASMx8632_Mult64x64_128_x64 est chaîne = [
      	// proto  multiply128x128_256(int64 *À, int64 *B, OUT int128 *C);
      	//	; P1 = A : rcx
      	//	; P2 = B : rdx
      	//	; P3 = C : r8
      	// C = A * B 
      	
      	// proloque
      	Push rbx
      	Push rdx
      	
      	//A0*B0
      	mov rax,[rcx]  // A0
      	mov rbx,[rdx]   // B0
      	mul rbx		   // (rdx,rax) = rax * rbx
      	mov [r8]   ,rax
      	mov [r8+8] ,rdx
      	
      	// epilogue et retour
      	Pop rdx
      	Pop rbx
      	ret
      ]
      
      procMult64x64_128_ASM est une entier système
      SI EnMode64bits() ALORS
      	procMult64x64_128_ASM = compileAsmX86_API( sCodeASMx8632_Mult64x64_128_x64 )
      sinon
      	procMult64x64_128_ASM = compileAsmX86_API( sCodeASMx8632_Mult64x64_128_x86 )
      fin
      dbgAssertion( PAS ErreurDétectée, ErreurInfo())
      dbgAssertion(procMult64x64_128_ASM<>0, ErreurInfo())
      
      renvoyer procMult64x64_128_ASM
     type : 458752
   -
     name : pGetprocSoustraction256p256_256_ASM
     procedure_id : 2184986744160233438
     type_code : 15
     code : |1+
      Procédure pGetprocSoustraction256p256_256_ASM() :  entier système
      
      sCodeASMx8632_Soustraction256_x86 est chaîne = [
      	// proto add256( IN int256 *A, INOUT int256 *B) <§cs:2§>
      	// prologue<§cs:2§>
      	Push edx<§cs:2§>
      	Push ecx<§cs:2§>
      	<§cs:2§>
      stopME:	<§cs:2§>
      	;;jmp stopME<§cs:2§>
      	<§cs:2§>
      	// récup adresses<§cs:2§>
      	mov edx,[ESP+12] // P1 = A dans EBX<§cs:2§>
      	mov ecx,[ESP+16] // P2 = B dans ECX<§cs:2§>
      	<§cs:2§>
      	// complement a 1 de [P2], ie -P2<§cs:2§>
      	xor [ecx],   0xFFFFFFFF<§cs:2§>
      	xor [ecx+4], 0xFFFFFFFF<§cs:2§>
      	xor [ecx+8], 0xFFFFFFFF<§cs:2§>
      	xor [ecx+12],0xFFFFFFFF<§cs:2§>
      	xor [ecx+16],0xFFFFFFFF<§cs:2§>
      	xor [ecx+20],0xFFFFFFFF<§cs:2§>
      	xor [ecx+24],0xFFFFFFFF<§cs:2§>
      	xor [ecx+28],0xFFFFFFFF<§cs:2§>
      	mov eax,1<§cs:2§>
      	add [ecx],eax<§cs:2§>
      	mov eax,0<§cs:2§>
      	adc [ecx+4],eax<§cs:2§>
      	adc [ecx+8],eax<§cs:2§>
      	adc [ecx+12],eax<§cs:2§>
      	adc [ecx+16],eax<§cs:2§>
      	adc [ecx+20],eax<§cs:2§>
      	adc [ecx+24],eax<§cs:2§>
      	adc [ecx+28],eax<§cs:2§>
      			<§cs:2§>
      	//  bit 0 a 31<§cs:2§>
      	mov eax,[edx]<§cs:2§>
      	Add [ecx],eax ; // A += B<§cs:2§>
      	// bits 32 a 63<§cs:2§>
      	mov eax,[edx+4]<§cs:2§>
      	adc [ecx+4],eax ; // A += B + retenue<§cs:2§>
      	// bits 64 a 95<§cs:2§>
      	mov eax,[edx+8]<§cs:2§>
      	adc [ecx+8],eax ; // A += B + retenue	<§cs:2§>
      	// bits 96 a 127<§cs:2§>
      	mov eax,[edx+12]<§cs:2§>
      	adc [ecx+12],eax ; // A += B + retenue	<§cs:2§>
      	<§cs:2§>
      	// bits 128 a 159<§cs:2§>
      	mov eax,[edx+16]<§cs:2§>
      	Adc [ecx+16],eax ; // A += B + retenue<§cs:2§>
      	// etc ....<§cs:2§>
      	mov eax,[edx+20]<§cs:2§>
      	adc [ecx+20],eax ; // A += B + retenue<§cs:2§>
      	mov eax,[edx+24]<§cs:2§>
      	adc [ecx+24],eax ; // A += B + retenue	<§cs:2§>
      	mov eax,[edx+28]<§cs:2§>
      	adc [ecx+28],eax ; // A += B + retenue	<§cs:2§>
      		<§cs:2§>
      	// epilogue<§cs:2§>
      	Pop ecx<§cs:2§>
      	Pop edx<§cs:2§>
      	ret 8	// 2 paramètres de 4 octets<§cs:2§>
      ]
      // code ASM 64 bits
      sCodeASMx8632_Soustraction256_x64 est chaîne = [
      	// proto sub256( IN int256 *A,INOUT  int256 *B)  <§cs:2§>
      	//	; P1 : circ<§cs:2§>
      	//	; P2 : rdx<§cs:2§>
      	<§cs:2§>
      	// complement a 1 de [P2], ie -P2<§cs:2§>
      	mov rax,-1<§cs:2§>
      	xor qword ptr [rdx],    rax<§cs:2§>
      	xor qword ptr [rdx+8],  rax<§cs:2§>
      	xor qword ptr [rdx+16], rax<§cs:2§>
      	xor qword ptr [rdx+24], rax<§cs:2§>
      	mov rax,1<§cs:2§>
      	Add [rdx],rax<§cs:2§>
      	mov rax,0<§cs:2§>
      	adc [rdx+8],rax<§cs:2§>
      	adc [rdx+16],rax<§cs:2§>
      	adc [rdx+24],rax<§cs:2§>
      	<§cs:2§>
      	// B +=A :<§cs:2§>
      	<§cs:2§>
      	//  bit 0 a 63<§cs:2§>
      	mov rax,[rcx]<§cs:2§>
      	Add  [rdx],rax ; // A += B<§cs:2§>
      	// bits 64 a 127<§cs:2§>
      	mov rax,[rcx+8]<§cs:2§>
      	adc [rdx+8],rax ; // A += B + retenue	<§cs:2§>
      	// bits 128 a 195<§cs:2§>
      	mov rax,[rcx+16]<§cs:2§>
      	adc [rdx+16],rax ; // A += B + retenue	<§cs:2§>
      	// bits 196 a 255<§cs:2§>
      	mov rax,[rcx+24]<§cs:2§>
      	adc [rdx+24],rax ; // A += B + retenue	<§cs:2§>
      	<§cs:2§>
      	ret<§cs:2§>
      ]
      
      //procAddition_ASM est une Procédure
      pAddrCode_ASM  est entier système
      SI EnMode64bits() ALORS
      	//procAddition_ASM = compileAsmX86( sCodeASMx8632_Soustraction256_x64)
      	pAddrCode_ASM    =  compileAsmX86_API( sCodeASMx8632_Soustraction256_x64 )
      sinon
      	//procAddition_ASM = compileAsmX86( sCodeASMx8632_Soustraction256_x86 )
      	pAddrCode_ASM    =  compileAsmX86_API( sCodeASMx8632_Soustraction256_x64 )
      fin
      dbgAssertion( PAS ErreurDétectée, ErreurInfo())
      renvoyer pAddrCode_ASM
      
     type : 458752
   -
     name : pGetprocMult256x32_256_ASM
     internal_properties : BQAAAAUAAACBd60Z/QmUSGSHs+5nMSAotrmVY9R0fjfG1ua2PNMeCyii/qMOOqq+yDmkFVlBi6oK6hv6/jpxbsNGeaSiOjqx4h8q+3QXQ7UhJL2eE5LLTCHy3ad81WYZoRIYIGKzwz4K9Xn5X35OXQ20DwoA5Oe2kYP8l3Th2t26EwcZJc2d9AAeC7uZGnuCKpuqQE4qMRgUC1JvIbeRLPL/fsoQsw==
     procedure_id : 2184986744160298974
     type_code : 15
     code : |1+
      
      PROCÉDURE pGetprocMult256x32_256_ASM() : entier système
      
      sCodeASMx8632_Mult256x32_256 est chaîne = [
      	; Proto C :<§cs:2§>
      	;  void multiply256x32_256(int256 *À, int32 *B, OUT int256 *C);<§cs:2§>
      	; calcule C = À * B<§cs:2§>
      	; AVEC <§cs:2§>
      	;	   edi = *À<§cs:2§>
      	;	   ESI = *B<§cs:2§>
      	;	   ECX = *C (dest)<§cs:2§>
      	;<§cs:2§>
      	; À en big endian :<§cs:2§>
      	; 0				+4			+8			 +12<§cs:2§>
      	; poids faible						 poids fort<§cs:2§>
      	<§cs:2§>
      	; prolohue<§cs:2§>
      	Push    ebp<§cs:2§>
      	mov     ebp, ESP   <§cs:2§>
      	Push	ebx<§cs:2§>
      	Push 	edx<§cs:2§>
      	Push    ecx<§cs:2§>
      	Push 	edi<§cs:2§>
      	Push 	esi<§cs:2§>
      	<§cs:2§>
      	; recu param<§cs:2§>
      	mov edi,[ebp +8]<§cs:2§>
      	mov esi,[ebp+12]<§cs:2§>
      	mov ecx,[ebp+16]<§cs:2§>
      	// B<§cs:2§>
      	mov ebx,[esi+0]<§cs:2§>
      	<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A0 * B0<§cs:2§>
      	mov eax,[edi+0]<§cs:2§>
      //	mov ebx,[esi+0]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	mov [ecx+ 0],eax<§cs:2§>
      	mov [ecx+ 4],edx<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A1 * B0<§cs:2§>
      	mov eax,[edi+4]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 4],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	adc [ecx+ 8],edx<§cs:2§>
      	mov eax,0      ; eax = 0<§cs:2§>
      	adc [ecx+ 12],eax ; //+0+c<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A2 * B<§cs:2§>
      	mov eax,[edi+8]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 8],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	adc [ecx+ 12],edx<§cs:2§>
      	mov eax,0      ; eax = 0<§cs:2§>
      	adc [ecx+ 16],eax ; //+0+c<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A3 * B<§cs:2§>
      	mov eax,[edi+12]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 12],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	adc [ecx+ 16],edx<§cs:2§>
      	mov eax,0      ; eax = 0<§cs:2§>
      	adc [ecx+ 20],eax ; //+0+c<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A4 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A4 * B<§cs:2§>
      	mov eax,[edi+16]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 16],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	adc [ecx+ 20],edx<§cs:2§>
      	mov eax,0      ; eax = 0<§cs:2§>
      	adc [ecx+ 24],eax ; //+0+c<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A5 * B<§cs:2§>
      	mov eax,[edi+20]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 20],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	adc [ecx+ 24],edx<§cs:2§>
      	mov eax,0      ; eax = 0<§cs:2§>
      	adc [ecx+ 28],eax ; //+0+c	<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A6 * B<§cs:2§>
      	mov eax,[edi+24]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 24],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	adc [ecx+ 28],edx<§cs:2§>
      	mov eax,0      ; eax = 0<§cs:2§>
      	//adc [ecx+ 32],eax ; //+0+c	=> débordement<§cs:2§>
      	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; A7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;<§cs:2§>
      	;; A7 * B<§cs:2§>
      	mov eax,[edi+28]<§cs:2§>
      	mul ebx		; (edx,eax) = eax * ebx<§cs:2§>
      	Add [ecx+ 28],eax  // addition au resultat AVEC propagation de la retenue<§cs:2§>
      	; retenue avec carry<§cs:2§>
      	adc edx, 0 <§cs:2§>
      	mov eax, edx<§cs:2§>
      <§cs:2§>
      	; epilogue<§cs:2§>
      	Pop esi<§cs:2§>
      	Pop edi<§cs:2§>
      	Pop ecx<§cs:2§>
      	Pop edx	<§cs:2§>
      	Pop	ebx<§cs:2§>
      	Pop	ebp<§cs:2§>
      	ret 12<§cs:2§>
      ]
      // Version 64 bits
      // version 64 bits
      sCodeASMx8632_Mult256x32_256_x64 est chaîne = [
      	// proto  multiply256x32_256(int256 *À, int32 *B, OUT int256 *C);<§cs:2§>
      	//	; P1 = A : rcx<§cs:2§>
      	//	; P2 = B : rdx<§cs:2§>
      	//	; P3 = C : r8<§cs:2§>
      	// C = A * B = A0*B + A1*B + A2*B + A3*B<§cs:2§>
      	<§cs:2§>
      	// proloque<§cs:2§>
      	Push rbx<§cs:2§>
      	Push rdx<§cs:2§>
      	Push r9<§cs:2§>
      	mov r9,rdx; // B dans R0, car rdx est utilisé comme résultat de poids fort par mul<§cs:2§>
      	<§cs:2§>
      	//A0*B0<§cs:2§>
      	mov rax,[rcx]  // A0<§cs:2§>
      	mov rbx,[r9]   // B0<§cs:2§>
      	mul rbx		   // (rdx,rax) = rax * rbx<§cs:2§>
      	mov [r8]   ,rax<§cs:2§>
      	mov [r8+8] ,rdx<§cs:2§>
      	//+A1*B0<§cs:2§>
      	mov rax,[rcx+8]   // A0<§cs:2§>
      	mul rbx		   // (rdx,rax) = rax * rbx<§cs:2§>
      	Add [r8+8]  ,rax<§cs:2§>
      	adc [r8+16] ,rdx<§cs:2§>
      	mov rax,0<§cs:2§>
      	adc [r8+24] ,rax // +C<§cs:2§>
      	//+A2*B0<§cs:2§>
      	mov rax,[rcx+16]   // A0<§cs:2§>
      	mul rbx		   // (rdx,rax) = rax * rbx<§cs:2§>
      	Add [r8+16] ,rax<§cs:2§>
      	adc [r8+24] ,rdx<§cs:2§>
      	mov rax,0<§cs:2§>
      	adc [r8+32] ,rax // +C<§cs:2§>
      	//+A3*B0<§cs:2§>
      	mov rax,[rcx+24]   // A0<§cs:2§>
      	mul rbx		   // (rdx,rax) = rax * rbx<§cs:2§>
      	Add [r8+24] ,rax<§cs:2§>
      	//NB : retenue dans RAX = valeur de retour<§cs:2§>
      	adc rdx,0<§cs:2§>
      	mov rax,rdx<§cs:2§>
      	<§cs:2§>
      	// epilogue et retour<§cs:2§>
      	Pop r9<§cs:2§>
      	Pop rdx<§cs:2§>
      	Pop rbx<§cs:2§>
      	ret<§cs:2§>
      ]
      
      
      procMult64x64_128_ASM est une entier système
      SI EnMode64bits() ALORS
      	procMult64x64_128_ASM = compileAsmX86_API( sCodeASMx8632_Mult256x32_256_x64)
      sinon
      	procMult64x64_128_ASM = compileAsmX86_API( sCodeASMx8632_Mult256x32_256 )
      fin
      dbgAssertion( PAS ErreurDétectée, ErreurInfo())
      dbgAssertion( procMult64x64_128_ASM<>0, ErreurInfo())
      renvoyer procMult64x64_128_ASM
      
     type : 458752
   -
     name : pCompileAsm
     procedure_id : 2184986744160364510
     type_code : 15
     code : |1+
      // compile un fichier assembleur qui contient la procédure <sNomProcAsm>
      // il doit se trouver dans <autres> sous le nom "x86_<sNomProcAsm>.asm" et ""x64_<sNomProcAsm>.asm" "
      procédure pCompileAsm(  snomProcPointDEntrée est chaine,  nomSymbole chaine = "", valSymbole entiers système=0  ) : entier système
      
      // chargement sur source dans la WDL :
      sCodeASM est chaine
      SI EnMode64bits() ALORS
      // 64 bits
      	sNomFichierSourceSourceAsm_64bits est chaine =  "x64_"+ snomProcPointDEntrée + ".asm"
      	sCodeASM = fChargeRessourceTexte(sNomFichierSourceSourceAsm_64bits) 
      SINON
      // 32 bits
      	sNomFichierSourceSourceAsm_32bits est chaine = "x86_"+ snomProcPointDEntrée + ".asm"
      	sCodeASM = fChargeRessourceTexte(sNomFichierSourceSourceAsm_32bits) 
      	// en 32 bits il faut rajouter un "_" devant sinon pb de link
      	si snomProcPointDEntrée<>"" alors
      		snomProcPointDEntrée = "_" + snomProcPointDEntrée
      	fin
      //	si nomSymbole<>"" ALORS
      //		nomSymbole = "_" + nomSymbole
      //	FIN
      FIN
      dbgAssertion(sCodeASM<>"",erreurInfo())
      // gestion des symboles externes
      tabSymboleExterne est un tableau associatif d'entiers système
      si nomSymbole<>"" ALORS
      	tabSymboleExterne[nomSymbole] = valSymbole
      FIN
      
      // compilation en ASM
      sErreur est chaine
      procédureAsm est un entier système 
      (procédureAsm, sErreur ) =  compileAsmX86_API_AvecSymboles( sCodeASM, snomProcPointDEntrée, tabSymboleExterne ) 
      dbgAssertion( procédureAsm<>0, sErreur )
      RENVOYER procédureAsm 
     type : 458752
   -
     name : pGetprocDivisePar2_256
     procedure_id : 2184986744160430046
     type_code : 15
     code : |1+
      Procédure pGetprocDivisePar2_256() : entier système 
      
      sCodeASMx8632_DivPar2_256 est chaîne = [
      	// proto div2_256( INTOU int256 *A) <§cs:2§>
      	// prologue<§cs:2§>
      	Push edi<§cs:2§>
      	<§cs:2§>
      	// récup adresse A<§cs:2§>
      	mov edi,[ESP+8]<§cs:2§>
      	<§cs:2§>
      	// mets CF a 0<§cs:2§>
      	clc;  cf = 0<§cs:2§>
      	xor eax,eax<§cs:2§>
      	<§cs:2§>
      	// rotation de 1 bit a droite sur 33 bits avec CF<§cs:2§>
      	// devrait etre rcr	DWORD PTRE [edi+0],1 ; mais pas supporté par l'assembleur<§cs:2§>
      	mov  eax,[edi+28]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+28],eax<§cs:2§>
      	<§cs:2§>
      	mov  eax,[edi+24]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+24],eax<§cs:2§>
      	<§cs:2§>
      	mov  eax,[edi+20]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+20],eax<§cs:2§>
      <§cs:2§>
      	mov  eax,[edi+16]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+16],eax	<§cs:2§>
      <§cs:2§>
      	mov  eax,[edi+12]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+12],eax	<§cs:2§>
      <§cs:2§>
      	mov  eax,[edi+8]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+8],eax	<§cs:2§>
      <§cs:2§>
      	mov  eax,[edi+4]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi+4],eax	<§cs:2§>
      <§cs:2§>
      	mov  eax,[edi]<§cs:2§>
      	rcr	 eax,1<§cs:2§>
      	mov  [edi],eax		<§cs:2§>
      	<§cs:2§>
      	// epilogue<§cs:2§>
      	Pop edi<§cs:2§>
      	ret 4	// 1 paramètres de 4 octets<§cs:2§>
      ]
      // coda ASM 64 bits
      sCodeASMx8632_DivPar2_256_x64 est chaîne = [
      // proto div2_256( INTOUT int256 *A) <§cs:2§>
      //	; P1 : rcx<§cs:2§>
      <§cs:2§>
      // mets CF a 0<§cs:2§>
      clc;  cf = 0<§cs:2§>
      xor rax,rax<§cs:2§>
      <§cs:2§>
      // rotation de 1 bit a droite sur 33 bits avec CF<§cs:2§>
      rcr	qword ptr [rcx+24],1 <§cs:2§>
      rcr	qword ptr [rcx+16],1 <§cs:2§>
      rcr	qword ptr [rcx+8],1 <§cs:2§>
      rcr	qword ptr [rcx],1 <§cs:2§>
      // retour	<§cs:2§>
      ret<§cs:2§>
      ]
      
      
      
      procDiv2_ASM est une entier système 
      SI EnMode64bits() ALORS
      	procDiv2_ASM = compileAsmX86_API( sCodeASMx8632_DivPar2_256_x64 )
      sinon
      	procDiv2_ASM = compileAsmX86_API( sCodeASMx8632_DivPar2_256 )
      fin
      dbgAssertion( PAS ErreurDétectée, ErreurInfo())
      renvoyer procDiv2_ASM
     type : 458752
   -
     name : _NOIMPL_
     procedure_id : 2184986744160561118
     type_code : 15
     code : |1+
      PROCEDURE _NOIMPL_()
      
      STOP
      FinProgramme("Non implémenté")
      
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : ProcéduresGlobales1
resources :
 string_res :
  identifier : 0x1b9cad9e05a3a79c
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
