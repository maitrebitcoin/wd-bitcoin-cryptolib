#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : ECDSA_BTC
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1b79807b019b420d
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BQAAAAUAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1-
      // gestion des point d'entrée pour la cryptographie ECDSA pour Bitcoin
      
      privé
      	
      ECDSA_BTC est une Classe
      	courbeBtc    est CourbeElliptique_secp256k1 // pour opérations sur les points de la courbe a la norme secp256k1
      	corpsECC     est CorpsModulaire dynamique   // pointeur sur le corps utilisé par <courbeBtc> pour les points
      	corpsOrdre   est CorpsModulaire dynamique   // pointeur sur le corps utilisé pour l'ordre de la courbe ( pour signer/vérifier la signature )
      FIN
      
      // erreur possiblement levées par VérifieSignature()
      constant sERR_CLEPUB_INVALIDE    = "La clé publique est invalide : "
      constant sERR_SIGNATURE_INVALIDE = "La signature est invalide : "
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1979754777002394125
     type_code : 27
     code : |1+
      PROCEDURE Constructeur()
      
      // Init hasard (1s), fait dans un thread pour optim : ne pas attendre 1s dans les appel ultérieurs (signature)
      	Procédure interne _Init_Hasard()
      		HasardCryptoBuffer(1)
      	fin
      	ThreadExécute(DonneGuid(),threadNormal,_Init_Hasard)
      
      corpsECC <-  courbeBtc.corps
      //corpsOrdre = allouer un CorpsModulaire( courbeBtc.Ordre.VersChaineHexa() )
      corpsOrdre <-  courbeBtc.corpsOrdre
     type : 589824
   -
     name : Destructeur
     procedure_id : 1979754777002459661
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
     type : 655360
   -
     name : CréePaireCléPrivéePublique
     procedure_id : 2182283788099713812
     type_code : 12
     code : |1-
      // renvoie une paire : ( clé privée, clée publique )
      procédure CréePaireCléPrivéePublique() : ( Entier256, Point256 )
      
      // génère une clé privée au hasard. 
      cléPrivée est Entier256
      cléPrivée.affecteAvecBuffer( HasardCryptoBuffer(32) )
      // calcule la clé publique associée
      cléPublique est Point256
      cléPublique = courbeBtc.MultiplicationScalairePointGenérateur_PrecalInv( cléPrivée )
      
      renvoyer (cléPrivée, cléPublique)
     type : 458752
   -
     name : DériveCléPubliqueDepuisCléPrivée
     procedure_id : 1980737504169448104
     type_code : 12
     code : |1+
      // renvoie la clé publique associée a une clé privée
      // => la clé publique est la somme K fois du point générateur de la courbe
      procédure DériveCléPubliqueDepuisCléPrivée( cléPrivée Entier256  ) : Point256
      
      // rebond version optimisée de la courbe elliptique
      renvoyer courbeBtc.MultiplicationScalairePointGenérateur_PrecalInv( cléPrivée )
      
     type : 458752
   -
     name : SigneBuffer
     procedure_id : 2182288980717890457
     type_code : 12
     code : |1+
      // signe le buffer <chaineASigner> avec la a clé privée <CléPrivée>
      procédure SigneBuffer( chaineASigner buffer, cléPrivée Entier256 ) : SignatureEcdsa
      
      // conversion de <chaineASigner> en entier256 par hash
      NombreASigner est Entier256 
      NombreASigner.affecteAvecBuffer( HashChaîne(HA_HMAC_SHA_256_DOUBLE, chaineASigner) )
      // rebond version entier
      renvoyer SigneNombre( NombreASigner, cléPrivée )
      
     type : 458752
   -
     name : vérifieSignatureBuffer
     procedure_id : 2182292661504933915
     type_code : 12
     code : |1+
      // vérifie la signature 
      // renvoie ( singarture OK, Message si erreur )
      procédure vérifieSignatureBuffer( chaineSignée est buffer , CléPublique Point256, signature SignatureEcdsa  ) : (booléen, chaine )
      
      // conversion de <chaineASigner> en entier256 par hash
      NombreSigné est Entier256 
      NombreSigné.affecteAvecBuffer( HashChaîne(HA_HMAC_SHA_256_DOUBLE, chaineSignée) )
      // rebond version entier
      RENVOYER vérifieSignatureNombre( NombreSigné, CléPublique, signature  )
      
     type : 458752
   -
     name : SigneNombre
     procedure_id : 1979755240859036207
     type_code : 12
     code : |1+
      // signe <NombreASigner> avec la clé privée <CléPrivée>
      procédure SigneNombre(  NombreASigner Entier256, cléPrivée Entier256 ) : signatureEcdsa
      
      recalculer:
      // il faut tirer un nombre K au hasard
      K est Entier256
      K.affecteAvecBuffer(  HasardCryptoBuffer(32)  )
      
      // calcul du point P = K * G
      P est Point256 = courbeBtc.MultiplicationScalairePointGenérateur( K )
      //P est Point256 = courbeBtc.MultiplicationScalairePointGenérateur( K )
      // tant que le résultat est 0, on recommence
      SI P.x.estEgalAZero()
      	GOTO recalculer
      FIN
      // Astuce pour que l'encodage de la paire R,S soit de taille fixe :
      // R doit être compris entre 0x01 et 0x7F.
      tantque (P.X.val3 < 0x0100000000000000) _OU_ (P.x.val3 & 0x8000000000000000 <> 0)
      	//K++
      	K = additionAvecUn(K)
      	// P = P + point générateur
      	P = courbeBtc.pointPlusPoint(P, courbeBtc.pointGen )
      FIN
      
      
      ///1er nombre renvoyé
      signature est SignatureEcdsa
      signature.R = P.x //.VersEntier256( corpsECC )
      // 2eme nombre
      inverseDeK est Entier256 =corpsOrdre.inverseModulo( K ) // nombre L tel que L*K = 1 (mod N)
      // y=K^-1(  H(m) + sx )
      signature.S =  corpsOrdre.multiplicationModulo( inverseDeK, ...
      	  			corpsOrdre.additionModulo(NombreASigner, ...
      	   				corpsOrdre.multiplicationModulo( CléPrivée , P.x ) )) 
      
      si signature.S.estEgalAZero() ALORS
      	goto recalculer
      FIN
      // BIP 62 / BIP 66 : on ne renvoie pas de valeur "négatives" pour S, ie on renvoie la plus petite entre S et -S
      //=> if (sig[4] & 0x80) return false;
      si signature.S.val3 & 0x8000000000000000 ALORS
      	signature.S = corpsOrdre.négationModulo(signature.S)
      FIN
      dbgAssertion(signature.S.val3 & 0x8000000000000000 = 0)
      // Astuce pour que l'encodage de la paire R,S soit de taille fixe :
      // R doit être compris entre 0x01 et 0x7F.
      si (signature.S.val3 < 0x0100000000000000) ALORS
      	// on ré-essaie avec un autre nombre
      	GOTO recalculer
      FIN
      
      renvoyer signature
     type : 458752
   -
     name : vérifieSignatureNombre
     procedure_id : 1979779374274356610
     type_code : 12
     code : |1+
      // vérifie que <signature> est bien la signature de <Nombre> avec une clé correspondant a <CléPublique>
      procédure vérifieSignatureNombre( NombreSigné Entier256, CléPublique point256, signature SignatureEcdsa ) : (booléen, chaine)
      
      // vérification des pré-requis sur la clé publique
      si CléPublique.estZéro() ALORS
      	renvoyer (faux, sERR_CLEPUB_INVALIDE + "La clé est nulle (pb d’initialisation ?).")
      FIN
      si pas courbeBtc.pointEstSurLaCourbe(CléPublique) ALORS
      	renvoyer (faux, sERR_CLEPUB_INVALIDE + "La clé n'est pas sur la courbe elliptique.")
      FIN
      // vérification des pré-requis sur la la signature
      // x et y de la signature doivent être dans [1,n-1]
      si signature.R.estEgalAZero() ALORS
      	renvoyer (faux, sERR_SIGNATURE_INVALIDE + "R = 0")
      FIN
      SI signature.S.estEgalAZero() ALORS
      	RENVOYER (Faux, sERR_SIGNATURE_INVALIDE + "S = 0")
      FIN
      SI signature.R.estSupérieurOuEgalA( corpsOrdre.P ) ALORS
      	RENVOYER (Faux, sERR_SIGNATURE_INVALIDE + "R trop grand" )
      FIN
      SI signature.S.estSupérieurOuEgalA( corpsOrdre.P ) ALORS
      	RENVOYER (Faux, sERR_SIGNATURE_INVALIDE + "S trop grand" )
      FIN
      
      // calcul de Y^-1 : inversion modulaire
      inverseDeS est Entier256  = corpsOrdre.inverseModulo( signature.S )
      // calcul du point : c1*G + c2*Q
      // OPTIM: en coordonnées de Jacobi, évite toute division modulaire (opération lente)
      Coef1     est Entier256   = corpsOrdre.multiplicationModulo(NombreSigné, inverseDeS)
      Coef2     est Entier256   = corpsOrdre.multiplicationModulo(signature.R, inverseDeS)
      P1_Jacobi est Point256_3D = courbeBtc.MultiplicationScalairePointGenérateurJacobi(               Coef1 ) 
      P2_Jacobi est Point256_3D = courbeBtc.multiplicationScalairePoint_OptimiseJacobi(   CléPublique, Coef2 ) 
      // P = P1 + P2
      P_Jacobi est Point256_3D 
      P_Jacobi = courbeBtc.pointPlusPoint_Jacobi( P1_Jacobi ,  P2_Jacobi)
      //OPTIM : on doit vérifier  P.x          = signature.R
      //        soit				PJ.X/PK.Z^2 =  signature.R
      //        équivalent a      PJ.X		=  signature.R * PJ.Z^2
      SRfoisPJZCarre est Entier256 = courbeBtc.corps.multiplicationModulo( signature.R, courbeBtc.corps.carréModulo(P_Jacobi.Z) ) 
      // signature OK ssi X == S.R
      si PAS P_Jacobi.X.estEgalA( SRfoisPJZCarre ) alors
      	// signature invalide 
      	renvoyer (faux,  sERR_SIGNATURE_INVALIDE + "Elle ne correspond a la paire messsage/clé publique." )
      fin
      
      // signature valide 						
      RENVOYER (Vrai, "")
     type : 458752
   -
     name : xVersCléPublique
     procedure_id : 2173352751482628164
     type_code : 12
     code : |1+
      // calculé un clé complète a partir de juste la coordonée X
      procédure xVersCléPublique( X entier256,  bYPositif est un booléen  ) : Point256
      
      renvoyer courbeBtc.xVersCléPublique( X,  bYPositif  )
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1b79807101981d00
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
  strings :
   -
     text :
      fr-FR : "la signature est invalide : elle ne correspond pas a \r\n<%1> \r\nsigné pour la clé publique \r\n<%2,%3>."
     index : 0
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
