#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : CorpsModulaire
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1b3a8e5132bf57e3
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      // gestion des opérateur dans le corps des entiers (256 bits) modulo P avec P premier
      CorpsModulaire est une Classe
      	// modulo principal utilisé pour Z/PZ. doit doit être premier
      	// ex : "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"
      	P est Entier256
      	
      	// OTIMS :
      	// constantes et tables pour accélérer les calculs
      	_1 		  est Entier256  // 0x0000000000000000000000000000000000000000000000000000000000000001
      	_0 		  est Entier256  // 0x0000000000000000000000000000000000000000000000000000000000000000
      	// P' tels que P'*P = -1 mod 2^256 ( ou 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF )
      	invPmod2P256 est Entier256 	// ex: "c9bd1905155383999c46c2c295f2b761bcb223fedc24a059d838091dd2253531"  si P="0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"
      	// P' tels que P'*P = -1 mod 2^32  pour montgomery par bloc
      	_2P32ModP est Entier256 ///= 2^32 Mod P
      	invPmod2P32  est Entier256  // ex : "5f4a72907543367f61d0fb07f7f1ffa1c447723a87f9235090703845d2253531" si P="0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"
      	invPmod2P64  est Entier256  // ex : "5f4a72907543367f61d0fb07f7f1ffa1c447723a87f9235090703845d2253531" si P="0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"
      
      	
      	//  c = 2n −p : pour L’algorithme basé sur la retenue sortante d’Omura 
      	DeuxPuissance256MoinsP est entier256
      	// P - 2; pour inverse modulaire
      	PMoins2 est Entier256
      	
      	
      	// tableau de 2^N (mod P)
      	TabPow2_MoinsP est un tableau de entier256
      	
      	TabCacheA est un tableau de entier256
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1962037067068233699
     type_code : 27
     code : |1+
      PROCEDURE Constructeur( valeurHexa chaine )
      
      // Init P, modulo principal
      p.affecteAvecChaineHexa( valeurHexa )
      
      // Init constantes 
      MaxInt256 est entier256("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")
      //MaxInt256.affecteAvecChaineHexa( Répète("F",64) )
      _1.affecteAvecEntierPositif(1)
      
      // Init constantes en fonction de P
      DeuxPuissance256MoinsP = soustraction (MaxInt256, P ) 
      DeuxPuissance256MoinsP = additionAvecUn(DeuxPuissance256MoinsP )
      // P-2
      deux est Entier256(2)
      PMoins2 = soustraction (P, deux ) 
      
      
      // calcul de  P' tels que P'*P = -1 mod 2^256
      _moins1moduloP est Entier256 = negation( P )
      phi_moins1_256 est Entier256 ( "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" )
      invPmod2P256 = puissance256_256( _moins1moduloP, phi_moins1_256 )
      // calcul de  P' tels que P'*P = -1 mod 2^32
      phi_moins1_32 est Entier256 ( "0x7FFFFFFF" )
      phi_moins1_64 est Entier256 ( "0x7FFFFFFFFFFFFFFF" )
      invPmod2P32 = puissance256_256( _moins1moduloP, phi_moins1_32 )
      
      invPmod2P64 = puissance256_256( _moins1moduloP, phi_moins1_64 )
      
      
      // Multiples de (2^N-P) mod P
      k2N_P est Entier256 = DeuxPuissance256MoinsP
      POUR i = 1 à 256
      	TabPow2_MoinsP.Ajoute( k2N_P )
      	k2N_P = additionModulo(k2N_P, DeuxPuissance256MoinsP )
      	//Trace(n.VersChaineHexa())
      FIN
      
      // 2^32  Mod P
      _2P32ModP.affecteAvecChaineHexa("0x100000000")
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 1962037067068299235
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
      
      
     type : 655360
   -
     name : additionModulo
     procedure_id : 1962037479385255214
     type_code : 12
     group : 1
     code : |1+
      // renvoie A + B ( mod P )
      Procédure additionModulo( nombreA entier256, nombreB entier256) : Entier256
      
      // S = A + B
      retenue est un booléen
      resultat est Entier256 = addition(nombreA,nombreB, retenue)
      SI retenue  ALORS
      	// ajout le résultat du modulo pour 2^256
      	resultat =  addition( resultat,DeuxPuissance256MoinsP)
      FIN
      si resultat.estSupérieurOuEgalA(P) ALORS
      	renvoyer soustraction(resultat, P)
      FIN
      renvoyer resultat
     type : 458752
   -
     name : négationModulo
     procedure_id : 1962039966171440705
     type_code : 12
     code : |1+
      // renvoie B = -A (mod P), cad tel que A +B = 0 (mod P)
      PROCÉDURE négationModulo( nombre entier256 ) : entier256
      dbgAssertion(P.estSupérieurOuEgalA(nombre))
      RENVOYER soustraction ( P, nombre )
      //RENVOYER additionModulo ( P, negation(nombre))
     type : 458752
   -
     name : soustractionModulo
     procedure_id : 1964419115212207273
     type_code : 12
     code : |1+
      // renvoie A - B ( mod P )
      Procédure soustractionModulo( nombreA Entier256, nombreB Entier256) : Entier256
      
      si nombreA.estSupérieurOuEgalA( nombreB ) ALORS
      	renvoyer soustraction(nombreA,nombreB)
      sinon
      	moinsR est Entier256 = soustraction ( nombreB, nombreA  )
      	renvoyer négationModulo( moinsR )
      fin
     type : 458752
   -
     name : multiplicationModulo_DEBUG
     procedure_id : 1962047327745723262
     type_code : 12
     group : 1
     code : |1-
      // renvoie A * B ( mod P )
      // version lente pour test en debug
      procédure multiplicationModulo_DEBUG(  nombreA entier256, nombreB entier256) : Entier256
      
      resultat est un entier256
      zero est un entier256 //TEST
      
      pour i = 255 a 0 pas -1
      	// r = r * 2
      	si pas resultat.estEgalAZero() alors
      		resultat = multiplicationPar2Modulo(resultat)
      	fin
      	
      	// r = r + A
      	si nombreB.bit( i ) alors
      		resultat = additionModulo(resultat, nombreA )
      	sinon
      		resultat = additionModulo(resultat, zero )
      	FIN
      
      
      FIN
      
      renvoyer resultat
     type : 458752
   -
     name : multiplicationModulo
     procedure_id : 1962192921991122669
     type_code : 12
     group : 1
     code : |1+
      // renvoie A * B ( mod P )
      procédure  abstraite  multiplicationModulo(  nombreA entier256, nombreB entier256) : Entier256 
      //dbgAssertion( P.val0 <> 0xFFFFFFFEFFFFFC2F, "ne devrait pas être appelé dans le corps sepc256k1" ) // car dérivée 
      // cas particulier de la multiplication par 1 (fractions)
      //si nombreA.EstEgalA1() ALORS
      //	renvoyer nombreB
      //FIN 
      //SI nombreB.estEgalA1() ALORS
      //	RENVOYER nombreA
      //FIN 
      //
      //resultat est un entier256
      //// calcul d'un cache des valeur de A * K pour K de 0 a 255
      //si TabCacheA..Occurrence>0 _et_ PAS TabCacheA[1].estEgalA(nombreA)
      //	TabCacheA.SupprimeTout()
      //fin
      //si TabCacheA.Occurrence()=0 ALORS
      //	nCur est Entier256 = nombreA
      //	pour i = 1 a 256
      //		TabCacheA.Ajoute( nCur )
      //		nCur = additionModulo( nCur, nombreA )
      //	FIN
      //FIN
      //
      //pour i = 31 a 0 pas -1
      //	// r = r * 256
      //	resultat = multiplicationPar256Modulo(resultat)
      //	// r = r + k * A
      //	kB est entier = nombreB._8Bits( i ) 
      //	si kB<>0 alors
      //		// récup de A * K en cache
      //		AMultK est un Entier256 = TabCacheA[kB]
      //		resultat = additionModulo(resultat, AMultK)
      //	fin
      //
      //
      //FIN
      //
      //
      //renvoyer resultat
     type : 458752
   -
     name : carréModulo
     procedure_id : 1964406591087343535
     type_code : 12
     group : 1
     code : |1+
      
      procédure carréModulo( nombre est Entier256 ) : entier256
      
      renvoyer multiplicationModulo(nombre,nombre)
     type : 458752
   -
     name : cubeModulo
     procedure_id : 1964412170249914761
     type_code : 12
     code : |1+
      Procédure cubeModulo( nombre est Entier256 ) : entier256
      
      RENVOYER multiplicationModulo( multiplicationModulo(nombre,nombre), nombre)
     type : 458752
   -
     name : multiplicationPar2Modulo
     procedure_id : 1962194124583490858
     type_code : 12
     code : |1+
      // renvoie A * 2 ( mod P )
      // =>décalage de bits
      procédure multiplicationPar2Modulo(  nombreA entier256) : Entier256
      
      // OPTIM: version ASM
      resultat2 est un entier256 = nombreA
      API(arithmetique.addrprocAddition256p256_256c, &resultat2, &resultat2 )
      //dépassement est un booléen = (nombreA.val3 & 0x8000000000000000) <> 0
      SI (nombreA.val3 & 0x8000000000000000)  ALORS
      	// ajout le résultat du modulo pour 2^256
      	resultat2 = additionModulo( resultat2,DeuxPuissance256MoinsP)
      FIN
      SI resultat2.estSupérieurOuEgalA( P ) ALORS
      	resultat2 = soustraction(resultat2, P )
      FIN
      renvoyer resultat2
     type : 458752
   -
     name : MultiplicationPar3Modulo
     procedure_id : 1964419553298908132
     type_code : 12
     code : |1+
      Procédure MultiplicationPar3Modulo( nombre Entier256 ) : entier256
      
      renvoyer additionModulo( multiplicationPar2Modulo(nombre), nombre)
     type : 458752
   -
     name : multiplicationPar4Modulo
     procedure_id : 2166246092384922583
     type_code : 12
     code : |1+
      procédure multiplicationPar4Modulo( nombre Entier256 ) : entier256  
      //@A optimiser
      RENVOYER multiplicationPar2Modulo( multiplicationPar2Modulo(nombre) )
      
     type : 458752
   -
     name : multiplicationPar8Modulo
     procedure_id : 2166340036236684091
     type_code : 12
     code : |1-
      PROCÉDURE multiplicationPar8Modulo( nombre Entier256 ) : Entier256  
      
      //@A optimiser
      RENVOYER multiplicationPar2Modulo( multiplicationPar4Modulo( nombre) )
     type : 458752
   -
     name : multiplicationPar256Modulo
     procedure_id : 1962539719127474187
     type_code : 12
     code : |1+
      // renvoie A * 256 ( mod P )
      // =>décalage de 8 bits +  gestion du modulo
      procédure multiplicationPar256Modulo( nombreA entier256 ) : Entier256 
      
      // récup du nombre dans un buffer low endian
      sbufA est un buffer = nombreA.versbuffer( Entier256::BUF_LOW_ENDIAN )
      nPoidsFortRestant est un entier = asc( sbufA[32] ) // LE : 32 = poids fort
      sbufAmul256 est un buffer =  caract(0)  + Milieu(sbufA,1,31) 
      
      // récup partie basse
      resultat est un entier256 
      resultat.affecteAvecBuffer(sbufAmul256)
      SI resultat.estSupérieurOuEgalA( P ) ALORS
      	RENVOYER soustraction(resultat, P)
      FIN
      
      // ajout partie haute avec une table pré-calculé du reste modulaire des puissance de 2 a partir de 256
      si nPoidsFortRestant <> 0 alors
      	pr est Entier256 = TabPow2_MoinsP[ nPoidsFortRestant ]
      	renvoyer additionModulo( résultat, pr )
      fin
      
      
      
      renvoyer resultat
     type : 458752
   -
     name : puissanceModulo
     procedure_id : 1964422602725873770
     type_code : 12
     code : |1+
      // envoie A^B (mod p)
      procédure puissanceModulo(  nombreA entier256,  nombreB entier256) : Entier256
      
      pow2	 est Entier256 = nombreA
      résultat est Entier256(1)
      pour  i = 0 a 255
      	si nombreB.bit(i) alors
      		résultat = multiplicationModulo( résultat, pow2 )
      	FIN
      	pow2 = carréModulo(pow2)
      FIN
      
      renvoyer résultat
     type : 458752
   -
     name : inverseModulo
     procedure_id : 1964420450947150377
     type_code : 12
     code : |1+
      // renvoie l'inverse modulaire d'un nombre A.
      // cas un nombre I tel que A * I = 1 (mod P)
      Procédure virtuelle inverseModulo( nombre entier256 ) : entier256
      
      inverseMod est Entier256
      
      // calcul "rapide" par une version optimisée de l'algorithme d'Eurclide étendu.
      inverseMod = inverseModulaire_HGCD256( P, nombre  )
      // si echec
      si inverseMod.estEgalAZero() ALORS
      	// calcul par le théorème d’Euler :
      	//  inverse(A) = A ^ (P-2)
      	inverseMod  = puissanceModulo( nombre, PMoins2 )
      sinon
      	//gère le cas ou l'on obtient P-X au lieu de X
      	_valTest est Entier256 =  multiplicationModulo( nombre, inverseMod )
      	SI pas _valTest.estEgalA1() ALORS
      		inverseMod = négationModulo( inverseMod ) // soustraction( inverseDex, gCorps.P )
      		_valTest =  multiplicationModulo( nombre, inverseMod )
      		SI pas _valTest.estEgalA1() ALORS
      			// Pb
      			dbgAssertion(faux,"nombre*inverseMod <>1."+rc+"nombre = "+nombre.VersChaineHexa())
      			// calcul par le théorème d’Euler :
      			//  inverse(A) = A ^ (P-2)
      			inverseMod  = puissanceModulo( nombre, PMoins2 )
      		FIN
      	FIN
      
      fin
      
      //@TEST en debug  on vérifie qu'on a bien trouvé l'inverse modulaire
      si pas gbModeBench _et_ EnModeTest() 
      	DBG_1 est Entier256 = multiplicationModulo( inverseMod, nombre )
      	dbgAssertion( DBG_1.estEgalA1(), nombre.VersChaineHexa() + rc + inverseMod.VersChaineHexa() + rc + DBG_1.VersChaineHexa() )
      fin
      
      renvoyer inverseMod
     type : 458752
   -
     name : divisionModulo
     procedure_id : 1964420506781804621
     type_code : 12
     code : |1+
      // renvoie A / B (mod P), cas un nombre C tel que C*B = A (mod P)
      Procédure divisionModulo( nombreA entier256, nombreB entier256 ) : Entier256
      
      renvoyer multiplicationModulo( nombreA, inverseModulo(nombreB))
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1b3a8e2532bcacde
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
