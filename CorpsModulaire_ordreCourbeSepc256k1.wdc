#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : CorpsModulaire_ordreCourbeSepc256k1
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1e370c1b00847e6a
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      // corps avec comme modulo 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
      // ordre de la courbe elliptique sepc256k1 
      // =>pour de calcul de d'inverse modulaire ou de multiplication de multiplicateur de points sur cette courbe
      CorpsModulaire_ordreCourbeSepc256k1 est une Classe
      	hérite de CorpsModulaire
      
      	// constante pour accélérer les calcul
      	//  2^256 mod P  = 2^256-P =  0x14551231950b75fc4402da1732fc9bebf
      	_2P256_MoinsP est Entier256
      	
      	// adresse de procédures en assembleur pour optim des calculs :
      	// ok que en mode 64 bits + spécialisé modulo 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
      	addrprocMult256x256Modulo		est entier système
      	addrprocInverseModulo			est entier système
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 2177222254969323114
     type_code : 27
     code : |1+
      PROCEDURE Constructeur()
          Constructeur CorpsModulaire("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141")
      	Constructeur _2P256_MoinsP(                                "0x14551231950b75fc4402da1732fc9bebf")
      
      // 256x256 mod P :
      :addrprocMult256x256Modulo	=  pCompileAsm("mult256x256_Modulo_OrdreCourbeSepc256k","multiplication_256x256_512", arithmetique.addrprocMult256x256_512_ASM )
      // 256^256 mod P :
       addrprocInverseModulo     = _pCompileInverseModulo()
     type : 589824
   -
     name : Destructeur
     procedure_id : 2177222254969388650
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
      
     type : 655360
   -
     name : multiplicationModulo
     procedure_id : 2179890958674001854
     type_code : 12
     code : |1+
      // version plus rapide de ma multiplication modulaire si le modulo est 00xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
      PROCÉDURE virtuelle multiplicationModulo(  nombreA Entier256, nombreB Entier256) : Entier256 
      
      // résultat R
      résultat est Entier256
      //si on une routine asm dispo (64 bits)
      API(addrprocMult256x256Modulo, &nombreA, &nombreB, &résultat )
      RENVOYER résultat
     type : 458752
   -
     name : _pCompileInverseModulo
     procedure_id : 2182412727330015498
     type_code : 12
     code : |1+
      // compile une formule qui renvoie l'inverse modulaire spécifique au corps CorpsModulaire_ordreCourbeSepc256k1
      // pour Optim de la vérification de signature.
      procédure privée _pCompileInverseModulo()
      
      // Algo : on régénère une formule qui calcule X^(P-2) (Algorithme d'Euler) puis on la compile.
      
      // debut
      sCodeFormule est une chaîne = [
      inverveModuloOrdre( X )
      	P = X*X
      ]
      // construit le code
      //i est un entier
      POUR  i = 1 À 255
      	// si bit a 1 on multiplie le résultat par P = nombre^(2^I)
      	SI PMoins2.bit(i) ALORS
      		sCodeFormule += RC + "X = X*P "
      	FIN
      	// pour tous les bits : P = nombre^(2^I) (sauf le dernier)
      	si i<255 alors
      		sCodeFormule += RC + "P = P*P " 
      	fin
      FIN
      
      
      CPL est un compilateurDeFormule
      // déclaration des routines a utiliser pour implémenter les opérateurs
      CPL.déclareOpérateurBinaire("*", addrprocMult256x256Modulo  )
      // Optims : utiliser R12/R13
      CPL.declareOptimRegistre("P", "r12" )
      CPL.declareOptimRegistre("X", "r13" )
      
      // compilation de la formule
      _pf							est un entier système
      _pf = CPL.compileFormule(sCodeFormule)
      
      // renvoie l'adresse la routine. 
      // a utiliser avec API( _pf, param1, param2, ...)
      dbgAssertion(_pf<>0,ErreurInfo())
      RENVOYER _pf
      
     type : 458752
   -
     name : inverseModulo
     procedure_id : 2182410489648780926
     type_code : 12
     code : |1+
      // version spécialisé pour les corps "ordre"
      PROCÉDURE virtuelle inverseModulo( nombre entier256 ) : entier256
      
      // rebond version compilé spécialement pour ce modulo
      résultat est un entier256 = nombre
      API( addrprocInverseModulo, &résultat  )
      
      renvoyer résultat
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1e370c15008166ac
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
