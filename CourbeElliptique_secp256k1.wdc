#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : CourbeElliptique_secp256k1
 major_version : 25
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x1b51731a00a35eca
 internal_properties : BQAAAAUAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  internal_properties : BQAAAAUAAACmcEcPUOl8P88f4DqAteA6m/Mt111GGOClrNjaLJ9vO63bNEtdrqYoCCnjX1eG34p8AOi72Du5JSuppQ==
  type_code : 10
  p_codes :
   -
     code : |1+
      // courbe elliptique avec les paramètres pour secp256k1
      // cad pour le ECDSA utilisé par bitcoin
      CourbeElliptique_secp256k1 est une Classe
      	Hérite de CourbeElliptique
      
      	// Tableau pré-calculé de multiples d'un point K par 256 puissances de 2
      	// TabPointPow2[1]   =         K
      	// TabPointPow2[2]   =     2 * K  
      	// TabPointPow2[3]   =     4 * K
      	// TabPointPow2[4]   =     8 * K
      	// TabPointPow2[5]   =    16 * K
      	TabPointPow2PreCalculé est un tableau de Point256
      	// Tableau pré-calculé de 256 multiples d'un point K par 256 puissances de 2
      	// TabPointPow2[1 * 1*246]   =         K
      	// TabPointPow2[2 + 1*256]   =      2 * K
      	// TabPointPow2[3 + 1*256]   =      3 * K
      	// TabPointPow2[1 + 2*266]   =      3 * K
      	TabPointPow2PreCalculé_256 est un tableau <agrandissement=N> de Point256
      	// idem mais dans la version transformée de montgomery + type fraction
      	TabPointPow2PreCalculé_mon est un tableau de PointFraction256
      
      	// point générateur pour secp256k1
      	pointGen 		 est Point256
      	pointFractionGen est PointFraction256
      	// corps spécialisé pour calcul plus rapide des points de la courbe
      	corps_secp256k1 est CorpsModulaire_sepc256k1
      
      prive
      	// un nombre d'ordre 3 sur <corps>
      	// ie tel que :_N_Ordre3^3 = 1 modulo P
      	// NB : tout nombre d'ordre 3 est OK.
      	_N_Ordre3			est Entier256// = "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"
      	// racine du polynôme sur corpsOrdre : X^2 + X + 1 = 0 ( modulo N ) 
      	// A la propriété que map(P) = _MulticateurP * P
      	_RacineQuiMuliplie	est Entier256 // = "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72"
      FIN
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1968481067654733514
     type_code : 27
     code : |1+
      PROCEDURE Constructeur()
      // P =0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F : nombre utilisé pour le modulo des coord. des points
      // N =0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 : ordre de la courbe
      Constructeur CourbeElliptique( :corps_secp256k1 ,"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141")
      Constructeur _N_Ordre3(         "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
      Constructeur _RacineQuiMuliplie("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
      coefB.affecteAvecEntierPositif(7)
      
      // Init point générateur
      pointGen.x.affecteAvecChaineHexa("0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798")
      pointGen.y.affecteAvecChaineHexa("0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8")
      pointFractionGen.x.numérateur = pointGen.x
      pointFractionGen.y.numérateur = pointGen.y
      dbgAssertion(pointEstSurLaCourbe(pointGen))
      dbgAssertion(pointFractionEstSurLaCourbe(pointFractionGen))
      
      
      // init  pour MultiplicationScalaire_AvecCache()
      _InitTabPreCalculé()
     type : 589824
   -
     name : Destructeur
     procedure_id : 1968481067654799050
     type_code : 28
     code : |1+
      PROCEDURE Destructeur()
     type : 655360
   -
     name : _InitTabPreCalculé
     procedure_id : 1968482287425664261
     type_code : 12
     code : |1+
      procédure _InitTabPreCalculé()
      // valeurs pré-calculées
      TabValeurPreCalculées est chaine = [
      	79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798 483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
      	c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5 1ae168fea63dc339a3c58419466ceaeef7f632653266d0e1236431a950cfe52a
      	e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13 51ed993ea0d455b75642e2098ea51448d967ae33bfbdfe40cfe97bdc47739922
      	2f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01 5c4da8a741539949293d082a132d13b4c2e213d6ba5b7617b5da2cb76cbde904
      	e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821
      	d30199d74fb5a22d47b6e054e2f378cedacffcb89904a61d75d0dbd407143e65 95038d9d0ae3d5c3b3d6dec9e98380651f760cc364ed819605b3ff1f24106ab9
      	bf23c1542d16eab70b1051eaf832823cfc4c6f1dcdbafd81e37918e6f874ef8b 5cb3866fc33003737ad928a0ba5392e4c522fc54811e2f784dc37efe66831d9f
      	34ff3be4033f7a06696c3d09f7d1671cbcf55cd700535655647077456769a24e 5d9d11623a236c553f6619d89832098c55df16c3e8f8b6818491067a73cc2f1a
      	8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf
      	465370b287a79ff3905a857a9cf918d50adbc968d9e159d0926e2c00ef34a24d 35e531b38368c082a4af8bdafdeec2c1588e09b215d37a10a2f8fb20b33887f4
      	241febb8e23cbd77d664a18f66ad6240aaec6ecdc813b088d5b901b2e285131f 513378d9ff94f8d3d6c420bd13981df8cd50fd0fbd0cb5afabb3e66f2750026d
      	5d1bdb4ea172fa79fce4cc2983d8f8d9fc318b85f423de0dedcb63069b920471 2843826779379e2e794bb99438a2265679eb1e9996c56e7b70330666f7b83103
      	175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739 d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695
      	423a013f03ff32d7a5ffbcc8e139c62130fdfeb5c6da121bce78049e46bc47d6 b91ae00fe1e1d970a1179f7bbaf6b3c7720d8ec3524f009ed1236e6d8b548a34
      	111d6a45ac1fb90508907a7abcd6877649df662f3b3e2741302df6f78416824a 0696911c478eaffbb90d48dbff065952f070008996daca4ca9a111d42108e9d0
      	4a4a6dc97ac7c8b8ad795dbebcb9dcff7290b68a5ef74e56ab5edde01bced775 529911b016631e72943ef9f739c0f4571de90cdb424742acb2bf8f68a78dd66d
      	363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 04e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9
      	4c1b9866ed9a7e9b553973c6c93b02bf0b62fb012edfb59dd2712a5caf92c541 c1f792d320be8a0f7fbcb753ce56e69cc652ead7e43eb1ad72c4f3fdc68fe020
      	a4083877ba83b12b529a2f3c0780b54e3233edbc1a28f135e0c8f28cbeaaf3d1 40e9f612feefbc79b8bf83d69361b3e22001e7576ed1ef90b12b534df0b254b9
      	a804c641d28cc0b53a4e3e1a2f56c86f6e0d880a454203b98cd3db5a7940d33a 95be83252b2fa6d03dec2842c16047e81af18ca89cf736a943ce95fa6d46967a
      	8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c 4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36
      	ed0c5ce4e13291718ce17c7ec83c611071af64ee417c997abb3f26714755e4be 221a9fc7bc2345bdbf3dad7f5a7ea68049d93925763ddab163f9fa6ea07bf42f
      	faecb013c44ce694b3b15c3f83f1fae8e53254566e0552ced4b6e6c807cec8ab cc09b5e90e9ecb57fc2e02c6ec2fb13d9c32b286b85e2e2e8981dfd9ab155070
      	09bb8a132dcad2f2c8731a0b37cbcafdb3b2dd824f23cd3e07f64eae9ad1b1f7 945bb2b2afeee3b9b6f9dd284f863e850f54a840f4752d5364130627c3811c80
      	723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda 96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f
      	57efa786437b744d343d7dc45773a3c62d240a43079849071fd383d60ca030d5 d712db0bd1b48518893627c928de03ec689b6d2ae5e9974ab07ab44274b02f9e
      	264bbd436a28bc42a2df7e9cd5226cb91080577e327b012a7fafc7770c584dd5 d87c6fa94ee093b4d4f75ce24c33be226a118243717b8d8de61227937704ab11
      	a94c6524bd40d2bbdac85c056236a79da78bc61fd5bdec9d2bf26bd84b2438e8 b5201fd992f96280fd79219505019e3a7e5d3c60a0e39b2bc2e2c8dbf18661f4
      	eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa 5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999
      	381c4ad7a7a97bfda61c6031c118495fc4ea4bc08f6766d676bee90847d297fd 936af53b238eeee48f3e5fa709915eccf0451032db939c0093ace3187d493fc5
      	e1efb9cd05adc63bcce10831d9538c479cf1d05fefdd08b2448d70422ede454c 0ecb4530d8af9be7b0154c1ffe477123464e3244a7a2d4c6ad9fd233a8913797
      	5318f9b1a2697010c5ac235e9af475a8c7e5419f33d47b18d33feeb329eb99a4 f44ccfeb4beda4195772d93aebb405e8a41f2b40d1e3ec652c726eeefe91f92d
      	100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0 cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09
      	8c0989f2ceb5c771a8415dff2b4c4199d8d9c8f9237d08084b05284f1e4df706 fb4dbd044f432034ffd2172cb9dc966c60de6bf5156511aa736ac5a35d72fa98
      	fb8f153c5e266704c4a481743262c0259c528539bc95bc1bb1e63c33dc47bffd 6ca27a9dc5e0621816fa11d9b4bccd531dde1389ac542613090a45ddd949b095
      	e747333fd75d51755a0cc9f0a728708465a02c587737a7b8b8fa1b8b4bb2629a f2affe0145070c114cc43603804c2581c88376aa6e1a969a9f8d961a6946f6d6
      	e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d 9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d
      	f4b93f224c8089eab9f95dcd0f29b2c9028a6ac5de94d85784e27e36a95c8356 a67a92ec062962dfb0e5f6a7a40eee90c37ef1344915609abd5861b9be001fd3
      	09d1aca1fce55236b19622ea025b08b0d51e8512f97e696c20d62fe17b160e8a 1153188f5101f0c63e56692ce0d8c27e6fe9e0ee9212b5e534e050c57ca04c44
      	c66c59cc454c2b9e18a2ad793821cde7518b3a93bfc39562e97d7d0475ba7fc2 d9592fe2bfb30fcfbea4f3ceaac10cb2f00a60ddb15955977ec3c69cf75f5956
      	feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088
      	4d000b621adb87e1c53261af9db2e179141ecae0b331a1870aa4040aee752b08 6a0d5b8f18e0d255cb6d825582d972cccb7df5f119c7293a3e72851f48302cea
      	71f570ca203da05dd6aa262114717128d657a0403e1f1b77f89962fd475c58ef eb42415b95dc880dd25557345bc95b8df2445d00c3363e7df8649a72d35d420e
      	a2b7b3629f7bd253b7d282b5c21da01446b4821dc65e76516048b06043ff8359 693038941695122d57a937a3f71e29c910d10835046f3835a2397fecfe86fec2
      	da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1 9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d
      	4dbacd365fa1ef587c0c0cfaaf00d8718bbd9f35ccea5a835ee3cc821fe741c9 16c3540e8a51892e7fdcfd59e838299d0cc384a09fc0535f60be10f8338eb623
      	13d1ffc481509beee68f17d8ff41c2590f4c85f15268605087eda8bab4e218da 6008391fa991961dcecb9337b1b758bda4ad01206d5bd127e0db419ddb191c19
      	219b4f9cef6c60007659c79c45b0533b3cc9d916ce29dbff133b40caa2e96db8 24d9c605d959efeaf5a44180c0372a6e394f8ac53e90576527df01a78d3b6bc7
      	53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0 5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8
      	01a575af9d4146753cf991196316995d2a6ee7aaad0f85ad57cd0f1f38a47ca9 3038f1cb8ab20dc3cc55fc52e1bb8698bdb93c5d9f4d7ea667c5df2e77ebcdb7
      	f5f0e0437621d439ca71f5c1b76155d6d3a61a83d3c20c6ee309d755e315565b 6b9f4e62be5a052bf62189160df7101aa5bf61bf3ed7e40a678430afdd2ecc82
      	8f506f0b6c0b6e9a57a7f36d970ca4e347cbc92146227642cbe781d9f5362d33 469f955d2afa61719530c5424f1c336848cf925d43bb8eaf30487d0c87fa243f
      	8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047 10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a
      	33b35baa195e729dc350f319996950df3bc15b8d3d0389e777d2808bf13f0351 a58a0185640abf87f9464036248d52bcaa6560efbc889b702bc503cccb8d7418
      	374deeae22c93f955cb83ad2071f7e2256f6e109cad7bca6d71dc7b24414bb36 171165b64fcd4f9916032c06f806f7293828d66300e543217875bea98daf734a
      	2380c09c7f3aeae57c46e07395aeb0dc944dbaf2b62a9f0c5e8a64ad6ae7d616 6f8e86193464956af1598aefd509b09a93af92148f8467560099be48161bbc1a
      	385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862 283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453
      	f6f622083daf54800456be134d5f67d147c82642befc1ce2dc83a27078f2827c 1bcd4e817de73a0faf2c5715b367cee7e657ca7448321bf6d15b20b520aaa102
      	fb26e5188f953de2bd70cb3c3d1fc255cd91c3ce7d8c6f369d893209715adcb6 f3e128811012a34d58e846a719d0176916d2cb31b8b7ab5449dbca3b58ba68f3
      	8991225911b9132d28f5c6bc763ceab7d18c37060e8bd1d7ed44db7560788c1e da8b4d987cc9ac9b27b8763559b136fa36969c84fdef9e11635c42228e8f0ef1
      	06f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7 7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160
      	ae86eeea252b411c1cdc36c284482939da1745e5a7e4da175c9d22744b7fd72d 19e993c9707302f962ab0ace589ff0e98d9211551472f7282334cb7a4eee38bc
      	2248c9f90bbfff55e61d2f8c56dc2c488718be75cf36f2ee7a1474267c169290 fa0594692d21eed7a506bb55b435ba18e163750235da2be2369d8a12883ea257
      	e11a6e16e05c44074ac11b48d94085d0a99f0877dd1c6f76fd0dac4bb50964e3 87d6065b87a2d430e1ad5e2596f0af2417adc6e138318c6f767fbf8b0682bfc8
      	3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd 56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0
      	8d26200250cebdae120ef31b04c80cd50d4cddc8eadbcf29fc696d32c0ade462 ebed3bb4715bf437d31f6f2dc3ee36ba1d4afb4e72678b3ad8e0a8b90f26470c
      	1238c0766eaebea9ce4068a1f594d03b8ed4930d072d9c8b9164643e1516e633 8a9db02dbb271359d6c979e2d1c3dc170946252dcc74022805cdb728c77b7805
      	271d5b0770cb9c15e7b2ea758a6a11b9cddcd7282b0ec21619b01552788e7a66 5d3aa45834e7f491e457d09949ac877fe2a065e3508a824e7a8d7258e03c9727
      	85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83 7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6
      	534ccf6b740f9ec036c1861215c8a61f3b89ea46df2e6d96998b90bc1f17fc25 d5715cb09c8b2ddb462ae3dd32d543550ae3d277bfdd28ddd71c7f6ecfe86e76
      	a91d1f5cee87b7f3081e142018f8aaed79020d47ecfbc8d2c7170923e8bee8b6 748a324ee2df8ee15a7189c8dddad3b2f800569f628cb225003d16aa410644c1
      	c15c8c23d90c8e35c1a214dde2d4383c0735ae45bef61f10aa1a1c255984cf74 2ba954d828522235c8dc6f45e25fd7ba47bf772d50b015a2c4a48cd839ccb000
      	0948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a 53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589
      	26952c7f372e59360d5ce4c66291f0b6ef16c1331e825e51396eb0457e8b000a f513ea4c5800a68862bc893d2d688422debe398f653d67318c3d401f05ef705a
      	c62e58e6fc23c5bdbef2be8b131ff243f521196572d6b0e9f102588976134f96 4397827d45b1a1678c3d676753141fc5bcfb853563731c3e82277ed4d14cf97e
      	107460520eec5c741683329a716622b0b81c03200807de973686f8800b188cbb abe5d4c09a21598c35326b9b9cf54a11242e0d748dce3da601d7b6361f272124
      	6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8 bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17
      	85d8da4748ad1a73dec8409be84f1a1316e65c5196aad27e0766746f3d477c2d 58948b53665c6690586b536531efc7bc94b0a02033c4d5a62079816fc7d1dd70
      	8e2a7166e7ec4b968c0892e9cc3ee3ee4d1e7e100fdc47f04850312d6c0b80d9 eadb0ba9ae2cbe592cedd29b716a9d485297b688d706349a49c61f2ad6b29f50
      	769bc75842bff58edc8366ecd78f8950ee4ab2e81359d90f9921fa3d2c4561be 4bf817362fe783bac8dce4cef73f5d4741a177767b7873add5920bffb0d9685f
      	e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d 4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda
      	a5e00da467fd5494f40b6cf7d2d61b3ec3ab217c792a2ddb8c63c8c79e3d34ef 098fe5f5e5608555421726fe99bf43d25b60dcfe790900acb855c5ce2f7adb4c
      	a99415f5ef3a2b403519f4bb1c9bfbc46d4afd2e4477572ae6737160d7b91252 82d0e64cae81f84bb9e2f10f24f6f6b6899a16ad590f4ddd73a377ac4bedc264
      	b56f4e9f9e4fd1fc7d8edde098f935f84c750d705f0c132bd8c465b66a540f17 32e8e53429cca856d3dc11adf0582d1d21d42963cbcca85446a2fcae0200102d
      	e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725 7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd
      	0eac134ca2046b8f9c8dbd304fad3f3c045ebfdb4ec6ed3cfe09aee43ed2ff3e 49630dbe79359b4245bf103bf2b11799ac19f696b7f21376e17206207d210988
      	d6788590731fea198392119d7adbb41ff5948a7804c85b17476706e4dfbfa4dc 28eaa8c89d5063c4940ef5c6d21c13aa6206f1c4ddc9a07cca7bcd6bbd3b5406
      	6930fccbd9a040974abf210f12b71d4bc7b1a6205599b01a7275fb40e48ff9b3 7f02ae94b94701eada30fcdb875f6d78090f9b13e4acc51acfddab5f8ee96a4e
      	213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754 4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2
      	1c5e548132b49a7f66ae9fed8323480e0d1ab974622e7cf08993895e0ec87fac 4ffcf60f837f468f2bb959fa1d4c2ad3a3deaceb26fe324c555d7b3d5fc2d4ef
      	46276d0602c5668ddef6e94210bbc7ce1f901c19fed5c970e20fcba1d4531dbc 0e0f7f24d44c75b84a292287570ded99498badfbffe1bc99af8730099686b8e2
      	efea68eca7a6c24f4e65eb211c3191636850e0acdc78d8996114ef13522f001d aab847869d583c14da150307a3719a17e413959fb3848771c128419f73bc4415
      	4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c 17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6
      	899017b02696888f268a269f4e385d9c9b11f25a1bef8790e2821e6e7c6e1b4d 43ae2cdab5b334f0bb45798336358bfae4e51bc0f932b212009aebdad814ab2b
      	67f644f76e905fd4a8f4728e63227f0e2831f5bf91b583a8af2635a17e5f712f b833d68f66445d04f05adeb7b586cf785e0e1488f7d36198d68acb5e707160e5
      	327f876c93652555fa80a054968b4712930dc93012ee6b8dc10263ed3b89a762 b2d404eab3524026b09969255e1997b975535070febd7dfe9c9fd959b9203301
      	fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6 6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f
      	ed9441c8304280ff180e03d850e8cd0ebb570ee5de3730488fd97c961f9756e4 3dbe9e9efe8bfa19afa176128b13911e09f23774fe4de98bff0e09f93f3abfae
      	29d9698ee67a7c3fc9fed3f624b487515b10bdd84fab4d3015bad033d51cf119 7fd02c517dc82b45277a125404f1c96fb89c940e93a7c2963c88740575056339
      	126b57d05013936d6f3fb7bd33580a31fd453e4a86060cff467c44537f422491 c1a7dc13061662c2e3c4a3eba2bf3fb0e148bac30bf39347afa31f199da3ef84
      	76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39 c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01
      	708a530e9e52c73bee87c9d88161c810005d57622c29ae691cf999a83a1187a5 9b884811e1f9a897fa9656dcbb6d38283ecda73c6d353e8a58a4f19b473db9c0
      	19cf034fc48b3be219bd648395e462cf9f374b6d86b2b59e2e1b16c6cde4f5be 28e32b06a15ab466c3b4be68ab181947ef91d1c93f0f1c0c0a91532b6f321af2
      	af6c44a078cb5f0d7c719c2f8397f576ee93bd034bea2219e3abc209d17cf3e8 0784096fe85d4b30af9e73153cb246dfec362aea7ca0d435b8add0601751baea
      	c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891 893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3
      	5578845ecd7c037435b32a6992e7aa94647197ea49b8c9e4ddaab0784662ab1b e61d07978b6de2c3cea6d0a51d2a4053f653a7746a5d64de316d18f3056f3511
      	47f3383888a364cc4abfa3bc1d0ceccd22f12354fce3996094f869b8948b6c29 48ca9a8d0f032937190e48675b416c7118bb499588f994a81edee1120e537ef9
      	c0c01f34ae41b8cfe466b4c9c6a5d5f614f570d6fcbef768a81a6c8f05ff4adb 0b84f5bee4357f5c7c937a0b4075b8cecdbc43d170d15b85fc4eff73ac351065
      	d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f
      	fd136eef8971044e8a3a43622003a26703ecaf7a0ec40c3fba5b594b77078424 218da834f3c652cc67a1d191b5c5efa57cf2b1f78a2adfa8cd61eeefc671ddf1
      	d99e8e9dd9638d140e9cca5367519f861b7003a0d43f024a5f1d84ec8db1cb3c 36dc19ad1cc0a3a7a945bb321bceba6e6286fef8ffc8765cd88a29e36b8637a7
      	03fdf1619a198317a1bd8a54e5b09191d203351e0440e636fd46f68d3c385172 408d02c06e5c12c3fe470c7d3c8573755b9b929e90e7232b79ac67f0fccb9794
      	b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03 2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7
      	6d36d105ed8cc5ce53f2cb698ab620f9469a3e5cb25bf6e6d413f414c5af726a e4ba5c34e377669e72d8c66c95c50029dcc59936b4108a35c570491a13f9fc7d
      	3ab6bde10cd3ac0cd06883fa66f0b0e3eb1309c0534b812286e2a30ca540db99 baca62079be871d7fc3117a96a13e99c38d137b0e369c043e6873fe31bda78a3
      	796634e3f1ad56f0fdba069d9d07bce2ba2fd4f373ddd3ba7777bf279f1048da 4d8ee2b6cfb20b8956de74735a7927f2532576d8cfd74862e8f9be24a106cf01
      	e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78
      	440ca1f08ea41265981ac4ed1efe7a37122dcc3877d2f9162db0e78b0f83cd58 a6c8b0d2cd5ee122af8954dc9d4e2f02a21e4d4269c0a260b07bc069b88a3f4b
      	f694cbaf2b966c1cc5f7f829d3a907819bc70ebcc1b229d9e81bda2712998b10 40a63eba61bef03d633c5ffacc46d82aeb6c64c3183c2a47f6788b1700f05e51
      	8b6e862a3556684850b6d4f439a2595047abf695c08b6414f95a13358dd553fd ea5e08910ed11cb40d10bc2df4eb9fa124ac3c5a183383d0d803dad33e9be5ed
      	a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070 7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1
      	27e1e59cff79f049f3e8d2419e0bff74b43965004c34b5d811420316f24ba5ae 310b26a6c804e209ee1b5e3cfc79df05df48a1a69afa63f784a5bfee883a45b3
      	c712e7a5f6864aee16588ec3892d7e4f5a39adde84fbfb4f9969175c9caed7ae 49644107516363b365ed4b82311dd9e5380d8e544b0ce63784d148aa46156294
      	0bfc0504a4b3235d065c0d426b8675fcb2c85d6f58275d791b43e1fe44a6db03 1955467a6c34f3453fb8ec7f94a6c99237427197345d4f0558ac8d1a464b8542
      	90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4 0e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150
      	7e2cd40ef8c94077f44b1d1548425e3d7e125be646707bad2818b0eda7dc0151 905b75082adcfab382a61a8b321ef95d889bee40aeee082c9a3bc53920721ec7
      	a146f52195bedace21c975bbd1ef52a79c636bf9db853cf90e103ae41345e597 a5a99b0ab053feb09ae95dd2dbb31b40ea67a5b221f094b07675676af45a770a
      	d24c75a1cf1993b9bcfbf9dab25a8114dbde421efeccc4e20cbb53fc4ce45444 58fe1d2de84dc1d1cfcb7d1810e5a78abf7593f499f1e524cb93246987dd4a57
      	8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da 662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82
      	4d49aefd784e8158fcafebe77fd9af59d89858ade7627eaee6847df84cf27076 cd32fc59a10dd135e723f210359ca6f06e0f2d1a7df4d8466b90b66203aa781e
      	7564539e85d56f8537d6619e1f5c5aa78d2a3de0889d1d4ee8dbcb5729b62026 c1d685413749b3c65231df524a722925684aacd954b79f334172c8fadace0cf3
      	210a917ad9df27796746ff301ad9ccc878f61a5f1ff4082b5364dacd57b4a278 670e1b5450b5e57b7a39be81f8d6737d3789e61aaff20bfc7f2713fd0c7b2231
      	e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11 1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc
      	4b30cbb7686773e01ec64110abdb362f88531a825ba172953bfee2233bcdaf2f 74c6350265bb629b6f9e2c5777c3c4a91fdf3c81e434857568033d463d26b5b7
      	cbb434aa7ae1700dcd15b20b17464817ec11715050e0fa192ffe9c29a673059f 4a1a200ab4dabd17562d492338b5dfad41d45e4f0ad5f845b7da9642227c070c
      	f478056d9c102c1cd06d7b1e7557244c6d9cdac5874610e94d4786e106de12c0 7f09e610f33e3946e68095e01068694c26c17ef609ab92d769a76ce6ca5361fe
      	8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b
      	24cfc0176da2b46fa8bb5bf9636be1effd7e297f29122fb3e84c9ab0c18ada5f ebff8fbb079c61a69868714d5deda927ed959ca1a4f814f268fa6139978a586b
      	004a7d58d4b9bc82ea2ded72a1292ec616ddd67fc7f057edf103189594679da2 b98ac5b76702cb75e6b1d8147ec71b3b71c3b494963fa28a4877f484779ffe26
      	ee7d69c4cbd001c7fc76c5e2c066ce4996f8808a1e07b2a9ccf34eadc87c4b65 ecc8626ec1a413821a192abf030f2ee2c33e8999bae942e523e8f44ed136a95a
      	e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41 2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51
      	f5cafaba036bf8d00d38bfb6772089f5203c35e4d6e32fa9d97e5b917b4ae861 19e83b8a022a6d817bff9904640839159b3b2a9c552f05f3cc9c239c0d82239c
      	e9389024ceb63f1f12df5156d7e805428f9e509c494c982084fd4cd7bd2a9651 8648688723726595f9287abaf671aaf18d7110cec6770bfefefde2b75e786824
      	264559d87829256bed116900d82d0c379f0e4d1253c68e6fcf2d41ae7cddab8b 79e5bd1926d3512cef7bc637034072d77a8631af39caf1e6c9f64b45001de473
      	b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef 067c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45
      	e5d8e8f0d9823c88e4d36f7301f41593b6890576be79c211253ef375033eb51f 4dc1e9b7861e3e04abb16a57d8feeef0e509dc46d9f0f54979d5bd965a62a2d9
      	a9ca27f77dbc8c3dc56b0f7321bae0ddab66be4fa8a3011737a676480f155e64 f4bb335678fb14d4d197d2246c02d004875d41821bcaf0ae1f3f333c561b3297
      	68fb71800686d7f25eba105611cfe7591f478e847f51cee06d4bc629d6ee247c cd12d23462dd963673735427501b0c079a8d580b04c73c9dae1f822d1a01865d
      	d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8 db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120
      	f16a409c677a40be402f8efb3752373caced053c6f702b828bda222ca412b6fd 2a41311714532799d7a6a75a74e30e4e16540659249ebca4268dae77eca052da
      	4154b506ab766f42fbe37f699976f84db89f4f2f6bed98325c1a0b6e326dd4e4 23ad075043c5988894c6e44d61025ff6414ea9d9d1e22dd46c859295075ded1c
      	b73c652769cc95c1080a8d4d0b5956ea93e86e49fc727ddf4c51a7a63f7f0246 9a67db107174ca9d4b535893c5b6c1ea1a0d72e4c6e554e5597e5164ea2a407b
      	324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d 648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84
      	32c9331ea26f490228d32681880d7203f72b3e4a8de0db1fa8f38381b2919749 d7cd272b34209cb5695a2f02b6f3dbb8268a4abdae39ab09631e97b0f290b5e3
      	eb292f3b3b9837854a02f6a70fec6b1c69c161b6e1846b8e1e1c22527b9795e4 8c43c25a96eebe801696634af145835b57131d7509111c6f5b7e9d2fae53a0fe
      	a65a3a01df3b5ef2e620d4310049fbe14d71457f19d1ed35aea39d5789303fdd 798ea0940cff5c6fb8f43d8d90ed2c7686861d024faed3cadad44a8d02e68703
      	4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96 0035ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d
      	ed32cad8d2cc998cd25317d4e4b87088e9de4554e57a8d70c0c6b0fc1da49e04 129fef5f1d030204a541ca375859d20b52da9facb49fab7db63120d17c1db9e0
      	e821ab724d6360f18049e4111c70366e28c36dcb63c34016cb7418d4e883f855 adefcbf863f53ce367d0d4115416cf598b3b19c614ec23efed4e0c6a59852ddf
      	3f0d8994e51ad212f455452fbc9693a72f14a547af3806e9fbff59eeb441742e fbd76c23f28c3dc445e5cb0e847a6e0b1e205e2c3ad13d958c65363bcfecadbe
      	9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d
      	2e3c05326255d80f0a42fc69d5c92aa40cd326a53e8535f0435efb7b694a09ec 001ff891656c6fb5bddae240b82fc1abe048a53c707b66512534868188c7327e
      	e8e2a24ccfa41587ae15fb7e3e24dda433710316a1908934205f19a2ab9c7ce6 46c983ce0c6f5d1b4caf2b2b3bee20596e09e603b5c27a73b2c01eb68836267c
      	a7549aac5d8573c2b2f0a38b170032a212acaf92383d5b5f5b0d39668ac7b3c2 bd17d1b90d1c2415335a1d70c1947d2b5d6b5115537116dffa0c91719287eaef
      	6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5 9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8
      	6773fd677c52e0640394110a46dc85df7c133f8dd4a28e661899ca5d82fd545c 444eb6d8cd97652f0f0f25c9dd2b246bead780f5a1c6cf98e8c7f034947eb1ae
      	e0f86d94d17ce565237c79aace0c87c20374e43810468050373c616b0b86f021 0c571c73730abcf47a91e832f1c89a2c9a80bcc0115fc45b3b6b79ccb5bf325a
      	42ca15ab9f245041ce991e193d696f4f4c277df908cad6038ad0772c02da6e03 68d2ef26c81c57c9647ce4d1fcb800eed66e85a68106bea7836889fa8c347793
      	a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266 40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8
      	9e5dcc62ef3b5a3b546520867be71bae6f3ba063c9acfb8dcec5725bda704896 6fedd12ddb925f3ea5fd3a2154c7612279605d186030f51248f2769dca82c835
      	a7de08375b8745adf8d6e9f976f03b20e33625a05cef5833953ed58744bf7ea0 a63d96b057ada5e52104a0b334888e9a645a47c0febc5aa2e04c05539bbcabaa
      	c266658e689080c9c13c35ac01cff4cbe68065fde949e4a3a9f8fa104ad916fb e7e8593854e7daab0f798170b24627ab6b8fecdfeb61138856aef52ba0887814
      	7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71 34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac
      	e7b9796b5ca006d1632f482d7f0fe3932cf16a5ae104eea7a7ea1c251073e879 12b8988c19169e2fdf42102a737cc1ca9cb5bf25eda98af338e71089baa89d98
      	071bf01850876203c2c915a24be09a7365423daaf2aee919865d722bf2628f0f 527aa15d504dcf4ae33600bc1c084ce2098f9c6a231c80bbb57c5cbd45a1c334
      	0218343acb9be56833a32e594c03c39e5b1911c8501213786f6376dfa39620e1 bea81d48970a50beaf3f24fd602fbfc0443299a42f43c9ec5e0199f6506998b5
      	0928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f
      	4f89bdee3771d350dad163b04cb18ad67ce5e9c55b58f0e7231047a60f59dd9e ca7952d5227a1f695c4baf4c043bb2471e4882506638df5c1016ae320156b049
      	cb9e8304cae3c5a80c396baca2c3c4c994b668f079a245bf529c314cfff01197 62c7d2801eb80e6a127258cdff08891741b2d18c015e0a24c334e0763b989c1d
      	e2f349b0f89c69bd3c8cf2a410730dc58e0beed47048c58c15f9ffc2508d2cc2 1feb2f280f82723781860aec760215ba42344be8e09cbdb37e347bd8e0d4c04f
      	85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751 1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962
      	6b790f4b19a4c4f4f607a6cfcd11df0468b482e009711ff756356d141d5fcade d03a981b2ff9eb3ef296661f9cae09cba83fa5b47be26b0ab6fff86fc338d3ff
      	41149b2c2d7ebed3c162c367acc4f8fe3d2479de85978be0bb0ccdabe3a3e0cb c90d5b92db7c30542b415c9b9902cf28b3ec7805ef490f2470e92e98339033a8
      	d1fad4fa4e7c849dfaec3dfe2872a7ba664a9b8205c29cebf8dddd28e3f3d3fc 8fe19714a348fdfe5473f70e858b7818bad37131eff37326ed22343c50f3704d
      	ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e 493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907
      	2982dbbc5f366c9f78e29ebbecb1bb223deb5c4ee638b4583bd3a9af3149f8ef a61b5be9af66220ab9fa5339c7b5bc9d095db99412e3ed8456e726b016c7a248
      	1a28e5042af0c0f6b436eb590497db5860011f4580e1765885289f612380441b 55779a7996c59dab7c78329a8976f0ed04b3e75b46ee67aeb05f606a8452af25
      	0c8b83e9535f30601d250cc0bd3f20142edd5eb7985d83242eef0e39621e30a7 0dcc7077065fdac7b850e3f17efdc854aacad237b987134dbebf7beb9ff688de
      	827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241 c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec
      	b77f12a7dce56b973e2d7c8d576e6b3660470a9218b87461ef6e44b70cb1815d 4b6f85b14f86acc43f0cefb373cc2e654c42f0f91a44816d6ba3d2bc8e57dbc5
      	48973b943018bf1247b308b2cb79f956d858d8df4977c5970fe5dad2c45565ec 761f75684f3cdc1b6437bb3a01445af1511b3596580477b83b879075faed07e9
      	e931258e8eb5559c6d6972728a704c170b775a265b4527d4a4d4d742bbfd71fa fb1e33364c3fdee0e85eb4169c954b40b3946ce1bb5e35f33d9bd0d3174d3307
      	eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3 be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d
      	3adb9db3beb997eec2623ea5002279ea9e337b5c705f3db453dbc1cc1fc9b0a8 374e2d6daee74e713c774de07c095ff6aad9c8f9870266cc61ae7975f05bbdda
      	129e53ac428e9cbb7e10955e56c5fc69fefdff56963e7caf054e9e0c90ae86f9 415ecb958aee9a29b2da2115b712183fb2a232fd16b3e01b822efdcd1e89c85d
      	60144494c8f694485b85ecb6aee10956c756267d12894711922243d5e855b8da 8bb5d669f681e6469e8be1fd9132e65b543955c27e3f2a4bad500590f34e4bbd
      	e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f 4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414
      	fd6451fb84cfb18d3ef0acf856c4ef4d0553c562f7ae4d2a303f2ea33e8f62bb e745ceb2b1871578b6fe7a5c1bc344ccfa2ab492d200e83fd0ad9086132c0911
      	1eee207cb24086bc716e81a06f9edbbb0042e2d5dcf3c7a1fa1d1fb9d5fe696b 652cbd19aef6269cd2b196d12461c95f7a02062e0afd694ebb45670e7429337b
      	cc0ea33ea8a9eb14d465ab2c346e2111e1c0fc017c57257908d40f19ef94c0d5 f9907a3b711c8a2fb23dd203b5fbe663f6074f266113f543deabe597af452fe6
      	1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19 aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd
      	5be7ea3519f04bc6cbeeaa0344fc90bb8e8462f6ebd890560dae805d414ff9e4 32f32ec3f638e605477f890f655ab7fe0e99c6302119a3094030b07847e0bdbb
      	58f099116eae4e650813fc8698df7f5cd50028649f853991e3fb545f4ddb7bb8 7e07002aaffe111a0d62ff7614638066507ee4062d174302bdec73582e5b2d6e
      	b0f9e4b9b29790b633bcc04fd860cb0f823d8d1a4cc1a1c1413c1606cc9a8e2c 49e82bf1843ade6d41cbb0b906fde3f03350cc02c171cee76c2066c4df3d0db4
      	146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0
      	574ef0ce8a597e24e5670b5c0bcd14cfeefc983c7ecb261911b2365579de5cac 09b99930281f19c73bd6ada0569b78451a260a7bef10008cae59aea6c75a4805
      	d3d97e799d8bf9f85d909397b98c835d10a770c1aeff8645808c2d74260966d3 8ddbb46376bac95e6aaa89275d403ad3b5e48711be8dc4eebddeb850833c2e52
      	b1aa653288b318987b974e782cbbee0ab2be78cf8f494c120040fb93968c6d4b 7ed6071c60810d712684aa8e2d63a83b100a1d909d623cc383d9e62ae891ac51
      	fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9 6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811
      	63964eee619074e0780140fe02e90836e72328d2448386d459c5be23187f5048 3b6cfb3a6b89cf41a39ff9b1c34bfbc93d580b934dde6c84383a284d89309df8
      	5a3ce25b4d15b7e22d1469ddf0fc9f75afd7f12ad3cbda31f814ba1ebadb2a65 8b34125b92e05f63873a6dbfbf3f99af3ee28bc3d825fe8ed8b170cf1d327f1d
      	5ce605af98f93eda6910be34f0de41ff85dbcb6e69a8fa0016a733754a9f44d0 4cddcf9bec226bfe7ba56bd031c76c58ab3cb1bfa32eccc6c0d05f3489d30105
      	da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2 8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1
      	9c7be00b4ef4c444df85d5f61dc1283a23605483e1f8e934b3c210d22cd3c369 9220c0de74b20d2052a26d455ce401483e31153a16769cbd29ee3feba2329515
      	0fcd83f42825263bb55664b238ccc49174dd06a70541178e76bcd92d7bb8c9e3 6c0bc1cfeac5fbced1d8232de5fdb683adbeaecdf1627bf4e86d55fbdf4aa9ad
      	7175407f1b58f010d4cda4c62511e59db7edcf28f5476d995cf39944b26b64f1 43b4554344e3d550f36d3401134cc86eb01fe8b774471d2a426e7efab24234d5
      	a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13 7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c
      	cac6f2e7e27faecbcb876f805ea66e63efbe9eaa753d67c1c15eb9ea7f7653a1 f7d416e5e2aa6f194cdb65d9a42a345081e83ae5688103a068c10ad0fec5e556
      	e6dfde46ee37d206efbc5932e58e43254ab767294238cb11cc9f4ab08624003d 8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd7548650e2216b93b
      	3c4e089cd9a6823d66a40cfc7ac96082e250e3149cf211d3b0e1103548dce109 43fbbe669fe191b480757bca15764d379579e142d97fe697e2bf65923a19aeea
      	174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73
      	20e6e2e796946bb630c7071ef1b92ea3d53d280e0e4501115f5da36f840dd273 d3ad7afe4f1559e44a0ba1ad97874655811ec9793da8693cc07cfd15bb46b593
      	8e0ca824d7a351dba80280a07e71db7035ae68136cc24ca3e7b54f301a077674 04ec560759192d41dc569d24da62cf57cff60419d2f910290b84cbec12b7ed98
      	f7bb50da51c982d1c5fa63553e3d66c1afdb5821a321b4afe96afc5ea8192441 93cc3be30334a526311bc63bdde6485db1cfdc1fbbc4c74bbc640ea1d45165ae
      	959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba 2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd
      	cbee1405ff0da7deafe32ca7dd73d95ed702226b391747c707275a940bc8f53b f6211f4f4e75f902b51f3e689b8294cf0d9ff4f68126f7282922e6b278c87f45
      	add5bad28faaf5acdd580bfa0ba252e03de3beaefbd71b9cf377c88b14b311dd e9c43cf4da3dc3a5974e434f8359814f52d4e1e7669b9b8902f982f349d6c38d
      	53f2432ba81717143fa9df3dff41ced24a29b314bc5a8c96f5f6400a0d7c0979 bd52effbc1f079b7ccd4e3e0911b07de4bd5a4f5c9e8b845f9f7e90c537b36a2
      	d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151 e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405
      	baf183a76100525e23bc7202033725f922b9cd6b36c413497c6c4bacca72da5f deac9fbe9ccb4d335688bd58dd69b1d18e2336c5ca739361377ce628a8f2a0cf
      	f7aef8a7e38440238f9332906e48f6fd5adbd02d56b76a5ffa5aca58c56c3943 4e3b0b44d5ffda797c442bbdc3ab3fcfeec30184a8dcd003431f627facf442f1
      	dfb547cb10019036c5a2e29f0dddbb1f7af2fa25a3c7a78c1fac945711924459 9accd2a9ba0f47088b8389ce9dc864cc22af0930e5c031dcfa205e0dcc65fd9e
      	64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073 d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589
      	b866d6b142df940f2cf28b54c92f0c1294e0b6a22a91f2ef44bcd88c4384480d 1914b0b3426aeb7089a278d7ea9ad7ac24e522804b1d86d60e659b470c4cafa8
      	ec2bb89085de819ec4d9d1646102ba87e2d52ae4ed4fe455d229cda81db20d6c ccecc17661e013a1332f66f0650940c633a2364be87efa98a0e99c4d629cf4a0
      	71c4a7e389e296ced39d75ef5e545905e50050640f50becf38a60ecb23b09d0f 1313fadb737af3ba0af3e0a292f810aa786f2b084a62ffc7637b1f01720ddb62
      	8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458 38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e
      	9629a450bd383a8b9fd43c6cd1d492bf392ed605299561dde54433526ce9f114 bf439b280c5fb6d7576befd220cef64db925593e5c56af8dca3972c4a24aa391
      	b73b1c47ef1e4688eb1730da7cc893df1477d747e187e18383d38d9626ca6cc3 584315cb294922a90a57d64bbcc805097322a25209757f5afac35d76a54fdba3
      	edfe16b2db40180311f9892007a2fef7d05b2a3bb676899f9c6e2192d38f93e0 ee6902f1fca5db3694d74faa4b05d0d25b3d5100c46e227e3d01793de29405ad
      	13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b 69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27
      	eb3cf8f532245362ec05c88c85fe12d19182be7dceabe577c75849c6065084ae c833c78222d9d70043fe63dcefdca4a1f52b45c5e7dbd2a66f67c1fff96b9480
      	bdf1a67d092d99974f7a60f2184519b2a576fcf984a201d9f8e5bcbcc2e9a5d0 4095902bab65a1aaa80be54a86bf7baaa6280b61e5626461cdb4f7018562ff7b
      	68856a6eddc4ec29cd5be267b64483b48c3b4196477da62abde5fc173b27e771 77a33df14f79a1fb13b6fd49c19f7b4a331d22f293b0733a6118d62a07bbdab6
      	bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366 0d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1
      	da433d5e11ceccc0abc5c7626ce7bab42e89b221f785c409282de545f3fceb19 e498dbd321a810301debbdc4af95e5218e77fc2d9227b277684e7120a6f5cc64
      	031e8e1ee9e8c7ec1c1c116981c16efdbcc4838a72207e0654de275c5acf692a ad7e7f5b465b353dd9d0970290d6743b70649827c5bf73b09cc2a84eb16f667a
      	a9878607a88d61155d3e00d862657f73e9c9bf363fc7a91592bbd7ff81f488b6 d181a1abd58895d61c063e7c82157c2239d0f01964ad5c6d495a7bbb031dab1d
      	8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa 40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482
      	ab1ac1872a38a2f196bed5a6047f0da2c8130fe8de49fc4d5dfb201f7611d8e2 13f4a37a324d17a1e9aa5f39db6a42b6f7ef93d33e1e545f01a581f3c429d15b
      	2564fe9b5beef82d3703a607253f31ef8ea1b365772df434226aee642651b3fa 8ad9f7a60678389095fa14ae1203925f14f37dab6b79816edb82e6a301e5122d
      	ff3d6136ffac5b0cbfc6c5c0c30dc01a7ea3d56c20bd3103b178e3d3ae180068 133239be84e4000e40d0372cdd96adc1547676f24001f5e670a6bb6e188c6077
      	08ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0 620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945
      	c25f637176220cd9f3a66df315559d8263cf2a23a4ab5ab9a293131da190b632 53154fede94d2873989049903809d7980a9f04ff9e027a1d6eebf3d6fc9590cf
      	2a9e8dfe3cce6bab3e82d82a5688544c0c7b55dc31978b4de2ccb3b7d466d561 01dfeda5c16e651fbac7b5ad608b96cf5e01eaec17a02182f96ccf5252e76373
      	b23790a42be63e1b251ad6c94fdef07271ec0aada31db6c3e8bd32043f8be384 fc6b694919d55edbe8d50f88aa81f94517f004f4149ecb58d10a473deb19880e
      ]
      
      TabValeurPreCalculées_mon est chaine = [
      	79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
      	c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5 1ae168fea63dc339a3c58419466ceaeef7f632653266d0e1236431a950cfe52a
      	e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13 51ed993ea0d455b75642e2098ea51448d967ae33bfbdfe40cfe97bdc47739922
      	2f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01 5c4da8a741539949293d082a132d13b4c2e213d6ba5b7617b5da2cb76cbde904
      	e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821
      	d30199d74fb5a22d47b6e054e2f378cedacffcb89904a61d75d0dbd407143e65 95038d9d0ae3d5c3b3d6dec9e98380651f760cc364ed819605b3ff1f24106ab9
      	bf23c1542d16eab70b1051eaf832823cfc4c6f1dcdbafd81e37918e6f874ef8b 5cb3866fc33003737ad928a0ba5392e4c522fc54811e2f784dc37efe66831d9f
      	34ff3be4033f7a06696c3d09f7d1671cbcf55cd700535655647077456769a24e 5d9d11623a236c553f6619d89832098c55df16c3e8f8b6818491067a73cc2f1a
      	8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf
      	465370b287a79ff3905a857a9cf918d50adbc968d9e159d0926e2c00ef34a24d 35e531b38368c082a4af8bdafdeec2c1588e09b215d37a10a2f8fb20b33887f4
      	241febb8e23cbd77d664a18f66ad6240aaec6ecdc813b088d5b901b2e285131f 513378d9ff94f8d3d6c420bd13981df8cd50fd0fbd0cb5afabb3e66f2750026d
      	5d1bdb4ea172fa79fce4cc2983d8f8d9fc318b85f423de0dedcb63069b920471 2843826779379e2e794bb99438a2265679eb1e9996c56e7b70330666f7b83103
      	175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739 d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695
      	423a013f03ff32d7a5ffbcc8e139c62130fdfeb5c6da121bce78049e46bc47d6 b91ae00fe1e1d970a1179f7bbaf6b3c7720d8ec3524f009ed1236e6d8b548a34
      	111d6a45ac1fb90508907a7abcd6877649df662f3b3e2741302df6f78416824a 0696911c478eaffbb90d48dbff065952f070008996daca4ca9a111d42108e9d0
      	4a4a6dc97ac7c8b8ad795dbebcb9dcff7290b68a5ef74e56ab5edde01bced775 529911b016631e72943ef9f739c0f4571de90cdb424742acb2bf8f68a78dd66d
      	363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 04e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9
      	4c1b9866ed9a7e9b553973c6c93b02bf0b62fb012edfb59dd2712a5caf92c541 c1f792d320be8a0f7fbcb753ce56e69cc652ead7e43eb1ad72c4f3fdc68fe020
      	a4083877ba83b12b529a2f3c0780b54e3233edbc1a28f135e0c8f28cbeaaf3d1 40e9f612feefbc79b8bf83d69361b3e22001e7576ed1ef90b12b534df0b254b9
      	a804c641d28cc0b53a4e3e1a2f56c86f6e0d880a454203b98cd3db5a7940d33a 95be83252b2fa6d03dec2842c16047e81af18ca89cf736a943ce95fa6d46967a
      	8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c 4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36
      	ed0c5ce4e13291718ce17c7ec83c611071af64ee417c997abb3f26714755e4be 221a9fc7bc2345bdbf3dad7f5a7ea68049d93925763ddab163f9fa6ea07bf42f
      	faecb013c44ce694b3b15c3f83f1fae8e53254566e0552ced4b6e6c807cec8ab cc09b5e90e9ecb57fc2e02c6ec2fb13d9c32b286b85e2e2e8981dfd9ab155070
      	09bb8a132dcad2f2c8731a0b37cbcafdb3b2dd824f23cd3e07f64eae9ad1b1f7 945bb2b2afeee3b9b6f9dd284f863e850f54a840f4752d5364130627c3811c80
      	723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda 96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f
      	57efa786437b744d343d7dc45773a3c62d240a43079849071fd383d60ca030d5 d712db0bd1b48518893627c928de03ec689b6d2ae5e9974ab07ab44274b02f9e
      	264bbd436a28bc42a2df7e9cd5226cb91080577e327b012a7fafc7770c584dd5 d87c6fa94ee093b4d4f75ce24c33be226a118243717b8d8de61227937704ab11
      	a94c6524bd40d2bbdac85c056236a79da78bc61fd5bdec9d2bf26bd84b2438e8 b5201fd992f96280fd79219505019e3a7e5d3c60a0e39b2bc2e2c8dbf18661f4
      	eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa 5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999
      	381c4ad7a7a97bfda61c6031c118495fc4ea4bc08f6766d676bee90847d297fd 936af53b238eeee48f3e5fa709915eccf0451032db939c0093ace3187d493fc5
      	e1efb9cd05adc63bcce10831d9538c479cf1d05fefdd08b2448d70422ede454c 0ecb4530d8af9be7b0154c1ffe477123464e3244a7a2d4c6ad9fd233a8913797
      	5318f9b1a2697010c5ac235e9af475a8c7e5419f33d47b18d33feeb329eb99a4 f44ccfeb4beda4195772d93aebb405e8a41f2b40d1e3ec652c726eeefe91f92d
      	100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0 cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09
      	8c0989f2ceb5c771a8415dff2b4c4199d8d9c8f9237d08084b05284f1e4df706 fb4dbd044f432034ffd2172cb9dc966c60de6bf5156511aa736ac5a35d72fa98
      	fb8f153c5e266704c4a481743262c0259c528539bc95bc1bb1e63c33dc47bffd 6ca27a9dc5e0621816fa11d9b4bccd531dde1389ac542613090a45ddd949b095
      	e747333fd75d51755a0cc9f0a728708465a02c587737a7b8b8fa1b8b4bb2629a f2affe0145070c114cc43603804c2581c88376aa6e1a969a9f8d961a6946f6d6
      	e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d 9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d
      	f4b93f224c8089eab9f95dcd0f29b2c9028a6ac5de94d85784e27e36a95c8356 a67a92ec062962dfb0e5f6a7a40eee90c37ef1344915609abd5861b9be001fd3
      	09d1aca1fce55236b19622ea025b08b0d51e8512f97e696c20d62fe17b160e8a 1153188f5101f0c63e56692ce0d8c27e6fe9e0ee9212b5e534e050c57ca04c44
      	c66c59cc454c2b9e18a2ad793821cde7518b3a93bfc39562e97d7d0475ba7fc2 d9592fe2bfb30fcfbea4f3ceaac10cb2f00a60ddb15955977ec3c69cf75f5956
      	feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088
      	4d000b621adb87e1c53261af9db2e179141ecae0b331a1870aa4040aee752b08 6a0d5b8f18e0d255cb6d825582d972cccb7df5f119c7293a3e72851f48302cea
      	71f570ca203da05dd6aa262114717128d657a0403e1f1b77f89962fd475c58ef eb42415b95dc880dd25557345bc95b8df2445d00c3363e7df8649a72d35d420e
      	a2b7b3629f7bd253b7d282b5c21da01446b4821dc65e76516048b06043ff8359 693038941695122d57a937a3f71e29c910d10835046f3835a2397fecfe86fec2
      	da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1 9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d
      	4dbacd365fa1ef587c0c0cfaaf00d8718bbd9f35ccea5a835ee3cc821fe741c9 16c3540e8a51892e7fdcfd59e838299d0cc384a09fc0535f60be10f8338eb623
      	13d1ffc481509beee68f17d8ff41c2590f4c85f15268605087eda8bab4e218da 6008391fa991961dcecb9337b1b758bda4ad01206d5bd127e0db419ddb191c19
      	219b4f9cef6c60007659c79c45b0533b3cc9d916ce29dbff133b40caa2e96db8 24d9c605d959efeaf5a44180c0372a6e394f8ac53e90576527df01a78d3b6bc7
      	53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0 5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8
      	01a575af9d4146753cf991196316995d2a6ee7aaad0f85ad57cd0f1f38a47ca9 3038f1cb8ab20dc3cc55fc52e1bb8698bdb93c5d9f4d7ea667c5df2e77ebcdb7
      	f5f0e0437621d439ca71f5c1b76155d6d3a61a83d3c20c6ee309d755e315565b 6b9f4e62be5a052bf62189160df7101aa5bf61bf3ed7e40a678430afdd2ecc82
      	8f506f0b6c0b6e9a57a7f36d970ca4e347cbc92146227642cbe781d9f5362d33 469f955d2afa61719530c5424f1c336848cf925d43bb8eaf30487d0c87fa243f
      	8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047 10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a
      	33b35baa195e729dc350f319996950df3bc15b8d3d0389e777d2808bf13f0351 a58a0185640abf87f9464036248d52bcaa6560efbc889b702bc503cccb8d7418
      	374deeae22c93f955cb83ad2071f7e2256f6e109cad7bca6d71dc7b24414bb36 171165b64fcd4f9916032c06f806f7293828d66300e543217875bea98daf734a
      	2380c09c7f3aeae57c46e07395aeb0dc944dbaf2b62a9f0c5e8a64ad6ae7d616 6f8e86193464956af1598aefd509b09a93af92148f8467560099be48161bbc1a
      	385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862 283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453
      	f6f622083daf54800456be134d5f67d147c82642befc1ce2dc83a27078f2827c 1bcd4e817de73a0faf2c5715b367cee7e657ca7448321bf6d15b20b520aaa102
      	fb26e5188f953de2bd70cb3c3d1fc255cd91c3ce7d8c6f369d893209715adcb6 f3e128811012a34d58e846a719d0176916d2cb31b8b7ab5449dbca3b58ba68f3
      	8991225911b9132d28f5c6bc763ceab7d18c37060e8bd1d7ed44db7560788c1e da8b4d987cc9ac9b27b8763559b136fa36969c84fdef9e11635c42228e8f0ef1
      	06f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7 7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160
      	ae86eeea252b411c1cdc36c284482939da1745e5a7e4da175c9d22744b7fd72d 19e993c9707302f962ab0ace589ff0e98d9211551472f7282334cb7a4eee38bc
      	2248c9f90bbfff55e61d2f8c56dc2c488718be75cf36f2ee7a1474267c169290 fa0594692d21eed7a506bb55b435ba18e163750235da2be2369d8a12883ea257
      	e11a6e16e05c44074ac11b48d94085d0a99f0877dd1c6f76fd0dac4bb50964e3 87d6065b87a2d430e1ad5e2596f0af2417adc6e138318c6f767fbf8b0682bfc8
      	3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd 56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0
      	8d26200250cebdae120ef31b04c80cd50d4cddc8eadbcf29fc696d32c0ade462 ebed3bb4715bf437d31f6f2dc3ee36ba1d4afb4e72678b3ad8e0a8b90f26470c
      	1238c0766eaebea9ce4068a1f594d03b8ed4930d072d9c8b9164643e1516e633 8a9db02dbb271359d6c979e2d1c3dc170946252dcc74022805cdb728c77b7805
      	271d5b0770cb9c15e7b2ea758a6a11b9cddcd7282b0ec21619b01552788e7a66 5d3aa45834e7f491e457d09949ac877fe2a065e3508a824e7a8d7258e03c9727
      	85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83 7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6
      	534ccf6b740f9ec036c1861215c8a61f3b89ea46df2e6d96998b90bc1f17fc25 d5715cb09c8b2ddb462ae3dd32d543550ae3d277bfdd28ddd71c7f6ecfe86e76
      	a91d1f5cee87b7f3081e142018f8aaed79020d47ecfbc8d2c7170923e8bee8b6 748a324ee2df8ee15a7189c8dddad3b2f800569f628cb225003d16aa410644c1
      	c15c8c23d90c8e35c1a214dde2d4383c0735ae45bef61f10aa1a1c255984cf74 2ba954d828522235c8dc6f45e25fd7ba47bf772d50b015a2c4a48cd839ccb000
      	0948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a 53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589
      	26952c7f372e59360d5ce4c66291f0b6ef16c1331e825e51396eb0457e8b000a f513ea4c5800a68862bc893d2d688422debe398f653d67318c3d401f05ef705a
      	c62e58e6fc23c5bdbef2be8b131ff243f521196572d6b0e9f102588976134f96 4397827d45b1a1678c3d676753141fc5bcfb853563731c3e82277ed4d14cf97e
      	107460520eec5c741683329a716622b0b81c03200807de973686f8800b188cbb abe5d4c09a21598c35326b9b9cf54a11242e0d748dce3da601d7b6361f272124
      	6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8 bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17
      	85d8da4748ad1a73dec8409be84f1a1316e65c5196aad27e0766746f3d477c2d 58948b53665c6690586b536531efc7bc94b0a02033c4d5a62079816fc7d1dd70
      	8e2a7166e7ec4b968c0892e9cc3ee3ee4d1e7e100fdc47f04850312d6c0b80d9 eadb0ba9ae2cbe592cedd29b716a9d485297b688d706349a49c61f2ad6b29f50
      	769bc75842bff58edc8366ecd78f8950ee4ab2e81359d90f9921fa3d2c4561be 4bf817362fe783bac8dce4cef73f5d4741a177767b7873add5920bffb0d9685f
      	e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d 4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda
      	a5e00da467fd5494f40b6cf7d2d61b3ec3ab217c792a2ddb8c63c8c79e3d34ef 098fe5f5e5608555421726fe99bf43d25b60dcfe790900acb855c5ce2f7adb4c
      	a99415f5ef3a2b403519f4bb1c9bfbc46d4afd2e4477572ae6737160d7b91252 82d0e64cae81f84bb9e2f10f24f6f6b6899a16ad590f4ddd73a377ac4bedc264
      	b56f4e9f9e4fd1fc7d8edde098f935f84c750d705f0c132bd8c465b66a540f17 32e8e53429cca856d3dc11adf0582d1d21d42963cbcca85446a2fcae0200102d
      	e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725 7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd
      	0eac134ca2046b8f9c8dbd304fad3f3c045ebfdb4ec6ed3cfe09aee43ed2ff3e 49630dbe79359b4245bf103bf2b11799ac19f696b7f21376e17206207d210988
      	d6788590731fea198392119d7adbb41ff5948a7804c85b17476706e4dfbfa4dc 28eaa8c89d5063c4940ef5c6d21c13aa6206f1c4ddc9a07cca7bcd6bbd3b5406
      	6930fccbd9a040974abf210f12b71d4bc7b1a6205599b01a7275fb40e48ff9b3 7f02ae94b94701eada30fcdb875f6d78090f9b13e4acc51acfddab5f8ee96a4e
      	213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754 4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2
      	1c5e548132b49a7f66ae9fed8323480e0d1ab974622e7cf08993895e0ec87fac 4ffcf60f837f468f2bb959fa1d4c2ad3a3deaceb26fe324c555d7b3d5fc2d4ef
      	46276d0602c5668ddef6e94210bbc7ce1f901c19fed5c970e20fcba1d4531dbc 0e0f7f24d44c75b84a292287570ded99498badfbffe1bc99af8730099686b8e2
      	efea68eca7a6c24f4e65eb211c3191636850e0acdc78d8996114ef13522f001d aab847869d583c14da150307a3719a17e413959fb3848771c128419f73bc4415
      	4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c 17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6
      	899017b02696888f268a269f4e385d9c9b11f25a1bef8790e2821e6e7c6e1b4d 43ae2cdab5b334f0bb45798336358bfae4e51bc0f932b212009aebdad814ab2b
      	67f644f76e905fd4a8f4728e63227f0e2831f5bf91b583a8af2635a17e5f712f b833d68f66445d04f05adeb7b586cf785e0e1488f7d36198d68acb5e707160e5
      	327f876c93652555fa80a054968b4712930dc93012ee6b8dc10263ed3b89a762 b2d404eab3524026b09969255e1997b975535070febd7dfe9c9fd959b9203301
      	fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6 6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f
      	ed9441c8304280ff180e03d850e8cd0ebb570ee5de3730488fd97c961f9756e4 3dbe9e9efe8bfa19afa176128b13911e09f23774fe4de98bff0e09f93f3abfae
      	29d9698ee67a7c3fc9fed3f624b487515b10bdd84fab4d3015bad033d51cf119 7fd02c517dc82b45277a125404f1c96fb89c940e93a7c2963c88740575056339
      	126b57d05013936d6f3fb7bd33580a31fd453e4a86060cff467c44537f422491 c1a7dc13061662c2e3c4a3eba2bf3fb0e148bac30bf39347afa31f199da3ef84
      	76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39 c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01
      	708a530e9e52c73bee87c9d88161c810005d57622c29ae691cf999a83a1187a5 9b884811e1f9a897fa9656dcbb6d38283ecda73c6d353e8a58a4f19b473db9c0
      	19cf034fc48b3be219bd648395e462cf9f374b6d86b2b59e2e1b16c6cde4f5be 28e32b06a15ab466c3b4be68ab181947ef91d1c93f0f1c0c0a91532b6f321af2
      	af6c44a078cb5f0d7c719c2f8397f576ee93bd034bea2219e3abc209d17cf3e8 0784096fe85d4b30af9e73153cb246dfec362aea7ca0d435b8add0601751baea
      	c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891 893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3
      	5578845ecd7c037435b32a6992e7aa94647197ea49b8c9e4ddaab0784662ab1b e61d07978b6de2c3cea6d0a51d2a4053f653a7746a5d64de316d18f3056f3511
      	47f3383888a364cc4abfa3bc1d0ceccd22f12354fce3996094f869b8948b6c29 48ca9a8d0f032937190e48675b416c7118bb499588f994a81edee1120e537ef9
      	c0c01f34ae41b8cfe466b4c9c6a5d5f614f570d6fcbef768a81a6c8f05ff4adb 0b84f5bee4357f5c7c937a0b4075b8cecdbc43d170d15b85fc4eff73ac351065
      	d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f
      	fd136eef8971044e8a3a43622003a26703ecaf7a0ec40c3fba5b594b77078424 218da834f3c652cc67a1d191b5c5efa57cf2b1f78a2adfa8cd61eeefc671ddf1
      	d99e8e9dd9638d140e9cca5367519f861b7003a0d43f024a5f1d84ec8db1cb3c 36dc19ad1cc0a3a7a945bb321bceba6e6286fef8ffc8765cd88a29e36b8637a7
      	03fdf1619a198317a1bd8a54e5b09191d203351e0440e636fd46f68d3c385172 408d02c06e5c12c3fe470c7d3c8573755b9b929e90e7232b79ac67f0fccb9794
      	b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03 2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7
      	6d36d105ed8cc5ce53f2cb698ab620f9469a3e5cb25bf6e6d413f414c5af726a e4ba5c34e377669e72d8c66c95c50029dcc59936b4108a35c570491a13f9fc7d
      	3ab6bde10cd3ac0cd06883fa66f0b0e3eb1309c0534b812286e2a30ca540db99 baca62079be871d7fc3117a96a13e99c38d137b0e369c043e6873fe31bda78a3
      	796634e3f1ad56f0fdba069d9d07bce2ba2fd4f373ddd3ba7777bf279f1048da 4d8ee2b6cfb20b8956de74735a7927f2532576d8cfd74862e8f9be24a106cf01
      	e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78
      	440ca1f08ea41265981ac4ed1efe7a37122dcc3877d2f9162db0e78b0f83cd58 a6c8b0d2cd5ee122af8954dc9d4e2f02a21e4d4269c0a260b07bc069b88a3f4b
      	f694cbaf2b966c1cc5f7f829d3a907819bc70ebcc1b229d9e81bda2712998b10 40a63eba61bef03d633c5ffacc46d82aeb6c64c3183c2a47f6788b1700f05e51
      	8b6e862a3556684850b6d4f439a2595047abf695c08b6414f95a13358dd553fd ea5e08910ed11cb40d10bc2df4eb9fa124ac3c5a183383d0d803dad33e9be5ed
      	a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070 7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1
      	27e1e59cff79f049f3e8d2419e0bff74b43965004c34b5d811420316f24ba5ae 310b26a6c804e209ee1b5e3cfc79df05df48a1a69afa63f784a5bfee883a45b3
      	c712e7a5f6864aee16588ec3892d7e4f5a39adde84fbfb4f9969175c9caed7ae 49644107516363b365ed4b82311dd9e5380d8e544b0ce63784d148aa46156294
      	0bfc0504a4b3235d065c0d426b8675fcb2c85d6f58275d791b43e1fe44a6db03 1955467a6c34f3453fb8ec7f94a6c99237427197345d4f0558ac8d1a464b8542
      	90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4 0e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150
      	7e2cd40ef8c94077f44b1d1548425e3d7e125be646707bad2818b0eda7dc0151 905b75082adcfab382a61a8b321ef95d889bee40aeee082c9a3bc53920721ec7
      	a146f52195bedace21c975bbd1ef52a79c636bf9db853cf90e103ae41345e597 a5a99b0ab053feb09ae95dd2dbb31b40ea67a5b221f094b07675676af45a770a
      	d24c75a1cf1993b9bcfbf9dab25a8114dbde421efeccc4e20cbb53fc4ce45444 58fe1d2de84dc1d1cfcb7d1810e5a78abf7593f499f1e524cb93246987dd4a57
      	8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da 662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82
      	4d49aefd784e8158fcafebe77fd9af59d89858ade7627eaee6847df84cf27076 cd32fc59a10dd135e723f210359ca6f06e0f2d1a7df4d8466b90b66203aa781e
      	7564539e85d56f8537d6619e1f5c5aa78d2a3de0889d1d4ee8dbcb5729b62026 c1d685413749b3c65231df524a722925684aacd954b79f334172c8fadace0cf3
      	210a917ad9df27796746ff301ad9ccc878f61a5f1ff4082b5364dacd57b4a278 670e1b5450b5e57b7a39be81f8d6737d3789e61aaff20bfc7f2713fd0c7b2231
      	e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11 1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc
      	4b30cbb7686773e01ec64110abdb362f88531a825ba172953bfee2233bcdaf2f 74c6350265bb629b6f9e2c5777c3c4a91fdf3c81e434857568033d463d26b5b7
      	cbb434aa7ae1700dcd15b20b17464817ec11715050e0fa192ffe9c29a673059f 4a1a200ab4dabd17562d492338b5dfad41d45e4f0ad5f845b7da9642227c070c
      	f478056d9c102c1cd06d7b1e7557244c6d9cdac5874610e94d4786e106de12c0 7f09e610f33e3946e68095e01068694c26c17ef609ab92d769a76ce6ca5361fe
      	8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b
      	24cfc0176da2b46fa8bb5bf9636be1effd7e297f29122fb3e84c9ab0c18ada5f ebff8fbb079c61a69868714d5deda927ed959ca1a4f814f268fa6139978a586b
      	004a7d58d4b9bc82ea2ded72a1292ec616ddd67fc7f057edf103189594679da2 b98ac5b76702cb75e6b1d8147ec71b3b71c3b494963fa28a4877f484779ffe26
      	ee7d69c4cbd001c7fc76c5e2c066ce4996f8808a1e07b2a9ccf34eadc87c4b65 ecc8626ec1a413821a192abf030f2ee2c33e8999bae942e523e8f44ed136a95a
      	e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41 2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51
      	f5cafaba036bf8d00d38bfb6772089f5203c35e4d6e32fa9d97e5b917b4ae861 19e83b8a022a6d817bff9904640839159b3b2a9c552f05f3cc9c239c0d82239c
      	e9389024ceb63f1f12df5156d7e805428f9e509c494c982084fd4cd7bd2a9651 8648688723726595f9287abaf671aaf18d7110cec6770bfefefde2b75e786824
      	264559d87829256bed116900d82d0c379f0e4d1253c68e6fcf2d41ae7cddab8b 79e5bd1926d3512cef7bc637034072d77a8631af39caf1e6c9f64b45001de473
      	b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef 067c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45
      	e5d8e8f0d9823c88e4d36f7301f41593b6890576be79c211253ef375033eb51f 4dc1e9b7861e3e04abb16a57d8feeef0e509dc46d9f0f54979d5bd965a62a2d9
      	a9ca27f77dbc8c3dc56b0f7321bae0ddab66be4fa8a3011737a676480f155e64 f4bb335678fb14d4d197d2246c02d004875d41821bcaf0ae1f3f333c561b3297
      	68fb71800686d7f25eba105611cfe7591f478e847f51cee06d4bc629d6ee247c cd12d23462dd963673735427501b0c079a8d580b04c73c9dae1f822d1a01865d
      	d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8 db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120
      	f16a409c677a40be402f8efb3752373caced053c6f702b828bda222ca412b6fd 2a41311714532799d7a6a75a74e30e4e16540659249ebca4268dae77eca052da
      	4154b506ab766f42fbe37f699976f84db89f4f2f6bed98325c1a0b6e326dd4e4 23ad075043c5988894c6e44d61025ff6414ea9d9d1e22dd46c859295075ded1c
      	b73c652769cc95c1080a8d4d0b5956ea93e86e49fc727ddf4c51a7a63f7f0246 9a67db107174ca9d4b535893c5b6c1ea1a0d72e4c6e554e5597e5164ea2a407b
      	324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d 648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84
      	32c9331ea26f490228d32681880d7203f72b3e4a8de0db1fa8f38381b2919749 d7cd272b34209cb5695a2f02b6f3dbb8268a4abdae39ab09631e97b0f290b5e3
      	eb292f3b3b9837854a02f6a70fec6b1c69c161b6e1846b8e1e1c22527b9795e4 8c43c25a96eebe801696634af145835b57131d7509111c6f5b7e9d2fae53a0fe
      	a65a3a01df3b5ef2e620d4310049fbe14d71457f19d1ed35aea39d5789303fdd 798ea0940cff5c6fb8f43d8d90ed2c7686861d024faed3cadad44a8d02e68703
      	4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96 0035ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d
      	ed32cad8d2cc998cd25317d4e4b87088e9de4554e57a8d70c0c6b0fc1da49e04 129fef5f1d030204a541ca375859d20b52da9facb49fab7db63120d17c1db9e0
      	e821ab724d6360f18049e4111c70366e28c36dcb63c34016cb7418d4e883f855 adefcbf863f53ce367d0d4115416cf598b3b19c614ec23efed4e0c6a59852ddf
      	3f0d8994e51ad212f455452fbc9693a72f14a547af3806e9fbff59eeb441742e fbd76c23f28c3dc445e5cb0e847a6e0b1e205e2c3ad13d958c65363bcfecadbe
      	9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d
      	2e3c05326255d80f0a42fc69d5c92aa40cd326a53e8535f0435efb7b694a09ec 001ff891656c6fb5bddae240b82fc1abe048a53c707b66512534868188c7327e
      	e8e2a24ccfa41587ae15fb7e3e24dda433710316a1908934205f19a2ab9c7ce6 46c983ce0c6f5d1b4caf2b2b3bee20596e09e603b5c27a73b2c01eb68836267c
      	a7549aac5d8573c2b2f0a38b170032a212acaf92383d5b5f5b0d39668ac7b3c2 bd17d1b90d1c2415335a1d70c1947d2b5d6b5115537116dffa0c91719287eaef
      	6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5 9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8
      	6773fd677c52e0640394110a46dc85df7c133f8dd4a28e661899ca5d82fd545c 444eb6d8cd97652f0f0f25c9dd2b246bead780f5a1c6cf98e8c7f034947eb1ae
      	e0f86d94d17ce565237c79aace0c87c20374e43810468050373c616b0b86f021 0c571c73730abcf47a91e832f1c89a2c9a80bcc0115fc45b3b6b79ccb5bf325a
      	42ca15ab9f245041ce991e193d696f4f4c277df908cad6038ad0772c02da6e03 68d2ef26c81c57c9647ce4d1fcb800eed66e85a68106bea7836889fa8c347793
      	a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266 40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8
      	9e5dcc62ef3b5a3b546520867be71bae6f3ba063c9acfb8dcec5725bda704896 6fedd12ddb925f3ea5fd3a2154c7612279605d186030f51248f2769dca82c835
      	a7de08375b8745adf8d6e9f976f03b20e33625a05cef5833953ed58744bf7ea0 a63d96b057ada5e52104a0b334888e9a645a47c0febc5aa2e04c05539bbcabaa
      	c266658e689080c9c13c35ac01cff4cbe68065fde949e4a3a9f8fa104ad916fb e7e8593854e7daab0f798170b24627ab6b8fecdfeb61138856aef52ba0887814
      	7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71 34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac
      	e7b9796b5ca006d1632f482d7f0fe3932cf16a5ae104eea7a7ea1c251073e879 12b8988c19169e2fdf42102a737cc1ca9cb5bf25eda98af338e71089baa89d98
      	071bf01850876203c2c915a24be09a7365423daaf2aee919865d722bf2628f0f 527aa15d504dcf4ae33600bc1c084ce2098f9c6a231c80bbb57c5cbd45a1c334
      	0218343acb9be56833a32e594c03c39e5b1911c8501213786f6376dfa39620e1 bea81d48970a50beaf3f24fd602fbfc0443299a42f43c9ec5e0199f6506998b5
      	0928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f
      	4f89bdee3771d350dad163b04cb18ad67ce5e9c55b58f0e7231047a60f59dd9e ca7952d5227a1f695c4baf4c043bb2471e4882506638df5c1016ae320156b049
      	cb9e8304cae3c5a80c396baca2c3c4c994b668f079a245bf529c314cfff01197 62c7d2801eb80e6a127258cdff08891741b2d18c015e0a24c334e0763b989c1d
      	e2f349b0f89c69bd3c8cf2a410730dc58e0beed47048c58c15f9ffc2508d2cc2 1feb2f280f82723781860aec760215ba42344be8e09cbdb37e347bd8e0d4c04f
      	85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751 1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962
      	6b790f4b19a4c4f4f607a6cfcd11df0468b482e009711ff756356d141d5fcade d03a981b2ff9eb3ef296661f9cae09cba83fa5b47be26b0ab6fff86fc338d3ff
      	41149b2c2d7ebed3c162c367acc4f8fe3d2479de85978be0bb0ccdabe3a3e0cb c90d5b92db7c30542b415c9b9902cf28b3ec7805ef490f2470e92e98339033a8
      	d1fad4fa4e7c849dfaec3dfe2872a7ba664a9b8205c29cebf8dddd28e3f3d3fc 8fe19714a348fdfe5473f70e858b7818bad37131eff37326ed22343c50f3704d
      	ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e 493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907
      	2982dbbc5f366c9f78e29ebbecb1bb223deb5c4ee638b4583bd3a9af3149f8ef a61b5be9af66220ab9fa5339c7b5bc9d095db99412e3ed8456e726b016c7a248
      	1a28e5042af0c0f6b436eb590497db5860011f4580e1765885289f612380441b 55779a7996c59dab7c78329a8976f0ed04b3e75b46ee67aeb05f606a8452af25
      	0c8b83e9535f30601d250cc0bd3f20142edd5eb7985d83242eef0e39621e30a7 0dcc7077065fdac7b850e3f17efdc854aacad237b987134dbebf7beb9ff688de
      	827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241 c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec
      	b77f12a7dce56b973e2d7c8d576e6b3660470a9218b87461ef6e44b70cb1815d 4b6f85b14f86acc43f0cefb373cc2e654c42f0f91a44816d6ba3d2bc8e57dbc5
      	48973b943018bf1247b308b2cb79f956d858d8df4977c5970fe5dad2c45565ec 761f75684f3cdc1b6437bb3a01445af1511b3596580477b83b879075faed07e9
      	e931258e8eb5559c6d6972728a704c170b775a265b4527d4a4d4d742bbfd71fa fb1e33364c3fdee0e85eb4169c954b40b3946ce1bb5e35f33d9bd0d3174d3307
      	eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3 be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d
      	3adb9db3beb997eec2623ea5002279ea9e337b5c705f3db453dbc1cc1fc9b0a8 374e2d6daee74e713c774de07c095ff6aad9c8f9870266cc61ae7975f05bbdda
      	129e53ac428e9cbb7e10955e56c5fc69fefdff56963e7caf054e9e0c90ae86f9 415ecb958aee9a29b2da2115b712183fb2a232fd16b3e01b822efdcd1e89c85d
      	60144494c8f694485b85ecb6aee10956c756267d12894711922243d5e855b8da 8bb5d669f681e6469e8be1fd9132e65b543955c27e3f2a4bad500590f34e4bbd
      	e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f 4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414
      	fd6451fb84cfb18d3ef0acf856c4ef4d0553c562f7ae4d2a303f2ea33e8f62bb e745ceb2b1871578b6fe7a5c1bc344ccfa2ab492d200e83fd0ad9086132c0911
      	1eee207cb24086bc716e81a06f9edbbb0042e2d5dcf3c7a1fa1d1fb9d5fe696b 652cbd19aef6269cd2b196d12461c95f7a02062e0afd694ebb45670e7429337b
      	cc0ea33ea8a9eb14d465ab2c346e2111e1c0fc017c57257908d40f19ef94c0d5 f9907a3b711c8a2fb23dd203b5fbe663f6074f266113f543deabe597af452fe6
      	1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19 aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd
      	5be7ea3519f04bc6cbeeaa0344fc90bb8e8462f6ebd890560dae805d414ff9e4 32f32ec3f638e605477f890f655ab7fe0e99c6302119a3094030b07847e0bdbb
      	58f099116eae4e650813fc8698df7f5cd50028649f853991e3fb545f4ddb7bb8 7e07002aaffe111a0d62ff7614638066507ee4062d174302bdec73582e5b2d6e
      	b0f9e4b9b29790b633bcc04fd860cb0f823d8d1a4cc1a1c1413c1606cc9a8e2c 49e82bf1843ade6d41cbb0b906fde3f03350cc02c171cee76c2066c4df3d0db4
      	146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0
      	574ef0ce8a597e24e5670b5c0bcd14cfeefc983c7ecb261911b2365579de5cac 09b99930281f19c73bd6ada0569b78451a260a7bef10008cae59aea6c75a4805
      	d3d97e799d8bf9f85d909397b98c835d10a770c1aeff8645808c2d74260966d3 8ddbb46376bac95e6aaa89275d403ad3b5e48711be8dc4eebddeb850833c2e52
      	b1aa653288b318987b974e782cbbee0ab2be78cf8f494c120040fb93968c6d4b 7ed6071c60810d712684aa8e2d63a83b100a1d909d623cc383d9e62ae891ac51
      	fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9 6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811
      	63964eee619074e0780140fe02e90836e72328d2448386d459c5be23187f5048 3b6cfb3a6b89cf41a39ff9b1c34bfbc93d580b934dde6c84383a284d89309df8
      	5a3ce25b4d15b7e22d1469ddf0fc9f75afd7f12ad3cbda31f814ba1ebadb2a65 8b34125b92e05f63873a6dbfbf3f99af3ee28bc3d825fe8ed8b170cf1d327f1d
      	5ce605af98f93eda6910be34f0de41ff85dbcb6e69a8fa0016a733754a9f44d0 4cddcf9bec226bfe7ba56bd031c76c58ab3cb1bfa32eccc6c0d05f3489d30105
      	da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2 8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1
      	9c7be00b4ef4c444df85d5f61dc1283a23605483e1f8e934b3c210d22cd3c369 9220c0de74b20d2052a26d455ce401483e31153a16769cbd29ee3feba2329515
      	0fcd83f42825263bb55664b238ccc49174dd06a70541178e76bcd92d7bb8c9e3 6c0bc1cfeac5fbced1d8232de5fdb683adbeaecdf1627bf4e86d55fbdf4aa9ad
      	7175407f1b58f010d4cda4c62511e59db7edcf28f5476d995cf39944b26b64f1 43b4554344e3d550f36d3401134cc86eb01fe8b774471d2a426e7efab24234d5
      	a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13 7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c
      	cac6f2e7e27faecbcb876f805ea66e63efbe9eaa753d67c1c15eb9ea7f7653a1 f7d416e5e2aa6f194cdb65d9a42a345081e83ae5688103a068c10ad0fec5e556
      	e6dfde46ee37d206efbc5932e58e43254ab767294238cb11cc9f4ab08624003d 8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd7548650e2216b93b
      	3c4e089cd9a6823d66a40cfc7ac96082e250e3149cf211d3b0e1103548dce109 43fbbe669fe191b480757bca15764d379579e142d97fe697e2bf65923a19aeea
      	174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73
      	20e6e2e796946bb630c7071ef1b92ea3d53d280e0e4501115f5da36f840dd273 d3ad7afe4f1559e44a0ba1ad97874655811ec9793da8693cc07cfd15bb46b593
      	8e0ca824d7a351dba80280a07e71db7035ae68136cc24ca3e7b54f301a077674 04ec560759192d41dc569d24da62cf57cff60419d2f910290b84cbec12b7ed98
      	f7bb50da51c982d1c5fa63553e3d66c1afdb5821a321b4afe96afc5ea8192441 93cc3be30334a526311bc63bdde6485db1cfdc1fbbc4c74bbc640ea1d45165ae
      	959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba 2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd
      	cbee1405ff0da7deafe32ca7dd73d95ed702226b391747c707275a940bc8f53b f6211f4f4e75f902b51f3e689b8294cf0d9ff4f68126f7282922e6b278c87f45
      	add5bad28faaf5acdd580bfa0ba252e03de3beaefbd71b9cf377c88b14b311dd e9c43cf4da3dc3a5974e434f8359814f52d4e1e7669b9b8902f982f349d6c38d
      	53f2432ba81717143fa9df3dff41ced24a29b314bc5a8c96f5f6400a0d7c0979 bd52effbc1f079b7ccd4e3e0911b07de4bd5a4f5c9e8b845f9f7e90c537b36a2
      	d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151 e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405
      	baf183a76100525e23bc7202033725f922b9cd6b36c413497c6c4bacca72da5f deac9fbe9ccb4d335688bd58dd69b1d18e2336c5ca739361377ce628a8f2a0cf
      	f7aef8a7e38440238f9332906e48f6fd5adbd02d56b76a5ffa5aca58c56c3943 4e3b0b44d5ffda797c442bbdc3ab3fcfeec30184a8dcd003431f627facf442f1
      	dfb547cb10019036c5a2e29f0dddbb1f7af2fa25a3c7a78c1fac945711924459 9accd2a9ba0f47088b8389ce9dc864cc22af0930e5c031dcfa205e0dcc65fd9e
      	64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073 d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589
      	b866d6b142df940f2cf28b54c92f0c1294e0b6a22a91f2ef44bcd88c4384480d 1914b0b3426aeb7089a278d7ea9ad7ac24e522804b1d86d60e659b470c4cafa8
      	ec2bb89085de819ec4d9d1646102ba87e2d52ae4ed4fe455d229cda81db20d6c ccecc17661e013a1332f66f0650940c633a2364be87efa98a0e99c4d629cf4a0
      	71c4a7e389e296ced39d75ef5e545905e50050640f50becf38a60ecb23b09d0f 1313fadb737af3ba0af3e0a292f810aa786f2b084a62ffc7637b1f01720ddb62
      	8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458 38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e
      	9629a450bd383a8b9fd43c6cd1d492bf392ed605299561dde54433526ce9f114 bf439b280c5fb6d7576befd220cef64db925593e5c56af8dca3972c4a24aa391
      	b73b1c47ef1e4688eb1730da7cc893df1477d747e187e18383d38d9626ca6cc3 584315cb294922a90a57d64bbcc805097322a25209757f5afac35d76a54fdba3
      	edfe16b2db40180311f9892007a2fef7d05b2a3bb676899f9c6e2192d38f93e0 ee6902f1fca5db3694d74faa4b05d0d25b3d5100c46e227e3d01793de29405ad
      	13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b 69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27
      	eb3cf8f532245362ec05c88c85fe12d19182be7dceabe577c75849c6065084ae c833c78222d9d70043fe63dcefdca4a1f52b45c5e7dbd2a66f67c1fff96b9480
      	bdf1a67d092d99974f7a60f2184519b2a576fcf984a201d9f8e5bcbcc2e9a5d0 4095902bab65a1aaa80be54a86bf7baaa6280b61e5626461cdb4f7018562ff7b
      	68856a6eddc4ec29cd5be267b64483b48c3b4196477da62abde5fc173b27e771 77a33df14f79a1fb13b6fd49c19f7b4a331d22f293b0733a6118d62a07bbdab6
      	bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366 0d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1
      	da433d5e11ceccc0abc5c7626ce7bab42e89b221f785c409282de545f3fceb19 e498dbd321a810301debbdc4af95e5218e77fc2d9227b277684e7120a6f5cc64
      	031e8e1ee9e8c7ec1c1c116981c16efdbcc4838a72207e0654de275c5acf692a ad7e7f5b465b353dd9d0970290d6743b70649827c5bf73b09cc2a84eb16f667a
      	a9878607a88d61155d3e00d862657f73e9c9bf363fc7a91592bbd7ff81f488b6 d181a1abd58895d61c063e7c82157c2239d0f01964ad5c6d495a7bbb031dab1d
      	8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa 40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482
      	ab1ac1872a38a2f196bed5a6047f0da2c8130fe8de49fc4d5dfb201f7611d8e2 13f4a37a324d17a1e9aa5f39db6a42b6f7ef93d33e1e545f01a581f3c429d15b
      	2564fe9b5beef82d3703a607253f31ef8ea1b365772df434226aee642651b3fa 8ad9f7a60678389095fa14ae1203925f14f37dab6b79816edb82e6a301e5122d
      	ff3d6136ffac5b0cbfc6c5c0c30dc01a7ea3d56c20bd3103b178e3d3ae180068 133239be84e4000e40d0372cdd96adc1547676f24001f5e670a6bb6e188c6077
      	08ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0 620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945
      	c25f637176220cd9f3a66df315559d8263cf2a23a4ab5ab9a293131da190b632 53154fede94d2873989049903809d7980a9f04ff9e027a1d6eebf3d6fc9590cf
      	2a9e8dfe3cce6bab3e82d82a5688544c0c7b55dc31978b4de2ccb3b7d466d561 01dfeda5c16e651fbac7b5ad608b96cf5e01eaec17a02182f96ccf5252e76373
      	b23790a42be63e1b251ad6c94fdef07271ec0aada31db6c3e8bd32043f8be384 fc6b694919d55edbe8d50f88aa81f94517f004f4149ecb58d10a473deb19880e
      ]
      
      pour TOUTE CHAINE sLigne DE TabValeurPreCalculées séparée par RC
      	// récup X,Y au format chaine hexa
      	sX est chaîne = ExtraitChaîne(sLigne,1," ")
      	sY est chaîne = ExtraitChaîne(sLigne,2," ")
      	// init point
      	pointI est Point256
      	pointI.x.affecteAvecChaineHexa( sX )
      	pointI.y.affecteAvecChaineHexa( sY )
      	// ajout
      	TabPointPow2PreCalculé.Ajoute( pointI )
      FIN
       dbgAssertion(TabPointPow2PreCalculé..Occurrence = 256)
       dbgAssertion(TabPointPow2PreCalculé[1].PointestEgalA( :pointGen ) )
        // autre Init tableau pour calcul rapide de la multiplication du point générateur par K
       _InitTabPreCalculé_8x256()
      
      POUR TOUTE CHAÎNE sLigne DE TabValeurPreCalculées_mon séparée par RC
      	// récup X,Y au format chaine hexa
      	sX est chaîne = ExtraitChaîne(sLigne,1," ")
      	sY est chaîne = ExtraitChaîne(sLigne,2," ")
      	// init point
      	pointI est PointFraction256
      	pointI.x.affecteAvecChaineHexa( sX )
      	pointI.y.affecteAvecChaineHexa( sY )
      	// ajout
      	TabPointPow2PreCalculé_mon.Ajoute( pointI )
      FIN
      dbgAssertion(TabPointPow2PreCalculé_mon..Occurrence = 256)
      
     type : 458752
   -
     name : _InitTabPreCalculé_8x256
     procedure_id : 2023644068910771407
     type_code : 12
     code : |1-
      procédure _InitTabPreCalculé_8x256()
      
      // Init tableau pour calcul rapide de la mutiplication du point générateur par K : precalc_8x255.txt
      	Procédure interne _Calc__8x255()
      		sFic est chaine
      		_2puissanceX est un entier256(1)
      		POUR x = 0 a 31
      			Trace("// X = " + x)
      			POUR i= 1 a 255
      				// Init point K = i * 2^(X*8)
      				IMult2PuissanceK est Entier256 = multiplication256x64_256(_2puissanceX, (i))
      				_ResI est Point256 = MultiplicationScalairePointGenérateur_Sans8x256( IMult2PuissanceK )
      				//Trace(_ResI.x.VersChaineHexa() + " " + _ResI.y.VersChaineHexa() )
      				sFic += [Rc]  +_ResI.x.VersChaineHexa() + " " + _ResI.y.VersChaineHexa() 
      				//Trace( sFic )
      				TabPointPow2PreCalculé_256[i + x*256] = _ResI
      			fin
      			_2puissanceX.multipliePar256()
      		FIN//Pour X
      		// sauver le résultat pré-calculé
      		fSauveTexte("S:\Mes Projets\ArithmetiqueModulaire\precalc_8x255.txt",sFic)
      	FIN//Procédure
      
      // a décommenter pour génération de <precalc_8x255>
      si EnModeTest() alors
      	//_Calc__8x255()
      fin
      
      // => résultat de ce code de calcul :
      // valeurs pré-calculées
      TabValeurPreCalculées est chaine = fChargeRessourceTexte("precalc_8x255.txt")
      								   
      x est entier //puisaance de 2 : 2^(x*8)
      i est entier =1
      POUR TOUTE CHAÎNE sLigne DE TabValeurPreCalculées séparée par RC
      	si gauche(sLigne,2) = "//" ALORS
      		continuer
      	FIN
      	// récup X,Y au format chaine hexa
      	sX est chaîne = ExtraitChaîne(sLigne,1," ")
      	sY est chaîne = ExtraitChaîne(sLigne,2," ")
      	// init point
      	pointI est Point256
      	pointI.x.affecteAvecChaineHexa( sX )
      	pointI.y.affecteAvecChaineHexa( sY )
      	// ajout
      	TabPointPow2PreCalculé_256[i+x*256] = pointI 
      	i++
      	si i=256 ALORS
      		// on passe a la puissance suivante
      		x++
      		i=1
      	FIN
      FIN
     type : 458752
   -
     name : MultiplicationScalairePoint
     procedure_id : 1980740824186297482
     type_code : 12
     code : |1+
      // renvoie K * P
      procédure MultiplicationScalairePoint( P est Point256, K est Entier256 ) : Point256
      
      pointRésultat   est Point256 // 0
      Ppow2I est Point256 = P // p^(2*i)
      POUR i = 0 À 255
      	SI K.bit(i) ALORS
      		// r = r + 2^k
      		pointRésultat = pointPlusPoint( pointRésultat, Ppow2I  )
      	FIN
      	Ppow2I = pointDouble(Ppow2I)
      FIN
      
      // le point devrait être sur la courbe ou null, sinon erreur de calcul
      dbgAssertion( pointEstSurLaCourbe( pointRésultat )  _ou_ pointRésultat.estZéro() , "pointEstSurLaCourbe FAILED")
      
      
      RENVOYER pointRésultat
     type : 458752
   -
     name : MultiplicationScalairePointGenérateurFraction
     procedure_id : 1991113720239772257
     type_code : 12
     code : |1-
      // renvoie K  * G au format fractionnaire. 
      // ( évite une division modulaire )
      procédure MultiplicationScalairePointGenérateurFraction( K est Entier256 ) : PointFraction256
      
      résultat   est PointFraction256 // 0
      POUR i = 0 a 255
      	SI K.bit(i) ALORS
      		// récup de  G * (2^i) précalculé 
      		valeurKPow2I  est PointFraction256( TabPointPow2PreCalculé[i+1] )
      		// r = r + 2^k
      		résultat = pointPlusPointFraction( valeurKPow2I, résultat )
      
      	FIN
      FIN
      
      RENVOYER résultat
     type : 458752
   -
     name : MultiplicationScalairePointGenérateurFraction_Mon
     procedure_id : 1997963050434330704
     type_code : 12
     code : |1+
      // renvoie K  * G au format fractionnaire. 
      // ( évite une division modulaire )
      procédure MultiplicationScalairePointGenérateurFraction_Mon( K est Entier256 ) : PointFraction256
      
      mon_résultat   est PointFraction256 // 0
      POUR i = 0 a 255
      	SI K.bit(i) ALORS
      		// récup de  G * (2^i) précalculé 
      		mon_résultatvaleurKPow2I   est PointFraction256 = TabPointPow2PreCalculé_mon[i+1]
      		// r = r + 2^k
      		mon_résultat = pointPlusPoint_mon( mon_résultatvaleurKPow2I, mon_résultat )
      
      	FIN
      FIN
      
      // sortie de mon() 
      résultatFraction   est PointFraction256
      résultatFraction.x = corps.monX_to_X( mon_résultat.x )
      résultatFraction.y = corps.monX_to_X( mon_résultat.y )
      // le point devrait être sur la courbe, sinon erreur de calcul
      dbgAssertion( pointFractionEstSurLaCourbe( résultatFraction ), "pointEstSurLaCourbe FAILED")
      
      
      RENVOYER résultatFraction
     type : 458752
   -
     name : MultiplicationScalairePointGenérateur_Sans8x256
     procedure_id : 2023649313097076577
     type_code : 12
     code : |1+
      // renvoie K  * G 
      // Version qui n'utilise PAS lt table TabPointPow2PreCalculé_256 
      //=>utilisé pour la calculer ou en debug
      PROCÉDURE MultiplicationScalairePointGenérateur_Sans8x256( K est Entier256 ) : Point256
      
      PointRésultat   est Point256 // 0
      POUR i = 0 À 255
      	SI K.bit(i) ALORS
      		// récup de  G * (2^i) précalculé 
      		valeurKPow2I   est Point256 = TabPointPow2PreCalculé[i+1]
      		// r = r + 2^k
      		PointRésultat = pointPlusPoint( PointRésultat, valeurKPow2I )
      		
      	FIN
      FIN
      // le point devrait être sur la courbe, sinon erreur de calcul
      dbgAssertion( pointEstSurLaCourbe( PointRésultat ), "pointEstSurLaCourbe FAILED")
      RENVOYER PointRésultat
     type : 458752
   -
     name : MultiplicationScalairePointGenérateur_PrecalInv
     procedure_id : 2145512713508079699
     type_code : 12
     code : |1+
      // renvoie K  * G 
      // utilise la tables de points pré-calculés TabPointPow2PreCalculé_256 pour les 256 points des 32 puissances de 256
      //=>Méthode la plus rapide
      PROCÉDURE MultiplicationScalairePointGenérateur_PrecalInv( K est Entier256 ) : Point256
      
      // création du tableau des points a additionner
      Point0   est Point256 
      Tab32Point est un tableau de Point256
      POUR X = 0 À 31
      	i est entier = K._8Bits(X)
      	si i=0 alors
      		Tab32Point.Ajoute( Point0  )
      	sinon
      		Tab32Point.Ajoute( TabPointPow2PreCalculé_256[ I+X*256 ]  )
      	fin
      FIN
      
      // Ajouter les points du tableau <TabPoint_IN> 2 a 2 avec résultat dans <TabPoint_OUT>
      // =>L'ajout de plusieurs points permet l'optim de ne calculer qu'un seul inverse modulaire.
      procédure interne _Ajoute_2A2_TableauDePoints( TabPoint_IN est un tableau de Point256, TabPoint_OUT est un tableau de Point256  )
      	NBPointDest est entier =TabPoint_IN.Occurrence()/2
      	NBPointDest_Sur2 est entier = NBPointDest/2
      	dbgAssertion(NBPointDest=16 _ou_ NBPointDest=8 _ou_ NBPointDest=4 _ou_ NBPointDest=2)
      	
      	// récupération des nombres D a inverser pour chaque paire de point
      	TabD est tableau de Entier256
      	pour i = 0 _a_ NBPointDest-1
      		D est entier256 
      		// cas particulier du point (0,0) => veut dire qu'il y a un "00" dans K. ex : "0x914f06164094ab80f14de57c15a5dead827a473c005837a5c137167db965a203"
      		si TabPoint_IN[i*2+1].estZéro() _ou_ TabPoint_IN[i*2+2].estZéro() ALORS
      			D.val0 = 1 // D = 1
      		sinon
      			D =   corps.soustractionModulo(TabPoint_IN[i*2+1].x, TabPoint_IN[i*2+2].x) 
      		fin
      		dbgAssertion(pas D.estEgalAZero())
      		TabD.Ajoute(  D )
      	FIN
      	// précalcul de produits réutilisables
      	// on calcule D1*D2  D3*D4 D5*6 ... D13*D14  D15*16
      	///           D1*D1*D2*D4 D5*D6*D7*D8... D13*D14* D15*16
      	///           D1*D1*D2*...*D8 D9*D10*...*D15*D16
      	///           D1*D1*D2*D4*D5*D6*...*D15*D16
      	TabDPrec est tableau de Entier256 booléens  //  // tableau a l'étape N-1
      	SI NBPointDest=2 ALORS
      		TabDPrec.Ajoute( TabD[1] ) // copie profonde (pour asserts)
      		TabDPrec.Ajoute( TabD[2] ) // copie profonde (pour asserts)
      	sinon
      		TabDPrec <- TabD // tableau a l'étape N-1
      	fin
      	TabProduit2A2 est un tableau de tableau de entier256 booléens
      	nTaileTabProduit est entier = NBPointDest_Sur2
      	tantque nTaileTabProduit>=2
      		TabProduit_I est un tableau de entier256
      		POUR i = 0 _a_ nTaileTabProduit-1
      			TabProduit_I.Ajoute( corps.multiplicationModulo( TabDPrec[i*2+1] ,  TabDPrec[i*2+2] ) )
      		FIN
      		TabProduit2A2.Ajoute(TabProduit_I  )	
      		// étape suivante
      		TabDPrec <- TabProduit_I
      		nTaileTabProduit = nTaileTabProduit/2
      	FIN
      	// calcul du produit de tous les nombres a inverser.
      	// ex: (D1*D2*D3 ... D15*D16)
      	dbgAssertion(TabDPrec.Occurrence()=2)
      	ProduitD est Entier256 = corps.multiplicationModulo( TabDPrec[1], TabDPrec[2]) 
      	Produit_D1_D8  est un entier256 = TabDPrec[1] 
      	Produit_D9_D16 est un entier256 = TabDPrec[2]
      	
      	// on inverse le produit (D1*D2*D3 ... * D16)
      	inverseDeProduitD est Entier256 = corps.inverseModulo(ProduitD )
      	// on en déduit les inverses pour chaque D en multipliant par tous les autres nombres :
      	// ex : inv(D1) = inv(D1*D2*D3 ... * D16) * D2*D3....*D16
      	//Algo plus rapide de la multiplication en N^2. 
      	// exemple pour 16 :
      	//             A1                            A2
      	// Q.D1.D2.D3.D4.D5.D6.D7.D8 ; Q.D9.D10.D11.D12.D13.D14.D14.D16
      	//      B1            B2              B3           B4
      	// D1.D2.D3.D4 ; D5.D6.D7.D8 ; D9.D10.D11.D12 ;.D13.D14.D14.D16
      	//=>     B1' = B1*A2     								B2'=B2*A1    													 B4'=B4*A1
      	// Q.D9.D10.D11.D12.D13.D14.D14.D16*D1.D2.D3.D4 ; Q.D9.D10.D11.D12.D13.D14.D14.D16* D5.D6.D7.D8; .... ; Q.D1.D2.D3.D4.D5.D6.D7.D8*D13.D14.D14.D16
      	//    C1   C2       C3      C4                  C8
      	//  D1.D2 ; D3.D4 ; D5.D6 ; D7.D8 ; ...  ; D14.D16
      	//=>C1' = C1*B2' ;  C2' = C2*B2
      	// Q.D9.D10.D11.D12.D13.D14.D14.D16* D5.D6.D7.D8*D1.D2 ; Q.D9.D10.D11.D12.D13.D14.D14.D16*D5.D6.D7.D8*D3.D4
      	// INV(D1) = D2*C2'
      	// INV(D2) = D1*C2'
      	// INV(D3) = D4*C1'
      	// INV(D4) = D3*C1'
      	
      	TabDPrec[1] = corps.multiplicationModulo( TabDPrec[1], inverseDeProduitD )
      	TabDPrec[2] = corps.multiplicationModulo( TabDPrec[2], inverseDeProduitD )
      	nProfondeur est un entier = TabProduit2A2.Occurrence()-1
      	TANTQUE nProfondeur>0
      		TabProduit_I est un tableau de entier256 <-TabProduit2A2[nProfondeur]
      		POUR i =0 _a_  TabDPrec.Occurrence()-1
      			// ex : C1' = C1*B2'
      			//      C2' = C2*B2 
      			indPrev est un entier = EstPair(i) ? i+2 sinon i
      			TabProduit_I[i*2+1] = corps.multiplicationModulo( TabProduit_I[i*2+1], TabDPrec[indPrev] )
      			TabProduit_I[i*2+2] = corps.multiplicationModulo( TabProduit_I[i*2+2], TabDPrec[indPrev] )
      		FIN
      		TabDPrec <-TabProduit_I
      		nProfondeur--
      	FIN
      	dbgAssertion(TabDPrec.Occurrence()=NBPointDest_Sur2 _ou_ NBPointDest=2)
      	// calcul final de chaque inverse modulaire et des points résultat
      	POUR i = 0 a NBPointDest-1
      		// calcul final de l'inverse
      		InverseD_I est Entier256				
      		si NBPointDest=2 ALORS
      			InverseD_I <- i=0 ? TabDPrec[2] sinon TabDPrec[1]
      		sinon
      			Isur2 est un entier = i/2
      			indPrev est un entier = EstPair(Isur2) ? Isur2+2 sinon Isur2
      			indDI   est un entier = EstPair(i) ? i+2 sinon i		
      
      			InverseD_I <- corps.multiplicationModulo( TabD[indDI], TabDPrec[indPrev] )
      		fin
      		dbgAssertion(  corps.multiplicationModulo( InverseD_I, TabD[i+1] ).estEgalA1() )		
      		
      		// on peut maintenant calculer rapidement chaque Points résultat => ex :  somme 2 a 2 des 16 points a additionner
      		pointSourceI1 est Point256 <- TabPoint_IN[i*2+1]
      		pointSourceI2 est Point256 <- TabPoint_IN[i*2+2]
      		pointRésultatI est Point256  <- pointPlusPoint_InvModulairePrécalculé( pointSourceI1, pointSourceI2, InverseD_I  )
      		//dbgAssertion( pointEstSurLaCourbe( pointRésultatI ) , "pointEstSurLaCourbe FAILED") // VRAI; mais un peu lent
      		TabPoint_OUT.Ajoute(pointRésultatI)		
      	fin
      fin
      
      
      // Ajoute 32 points 2 a 2
      Tab16Point est un tableau de Point256
      _Ajoute_2A2_TableauDePoints(Tab32Point,Tab16Point)
      // Ajoute 16 points 2 a 2
      Tab8Point est un tableau de Point256
      _Ajoute_2A2_TableauDePoints(Tab16Point,Tab8Point)
      // Ajoute 8 points 2 a 2
      Tab4Point est un tableau de Point256
      _Ajoute_2A2_TableauDePoints(Tab8Point,Tab4Point)
      // Ajoute 4 points 2 a 2
      Tab2Point est un tableau de Point256
      _Ajoute_2A2_TableauDePoints(Tab4Point,Tab2Point)
      
      // résultat
      pointRésultat   est Point256 = pointPlusPoint( Tab2Point[1], Tab2Point[2] )
      // le point devrait être sur la courbe, sinon erreur de calcul
      dbgAssertion( pointEstSurLaCourbe( pointRésultat ) _OU_ pointRésultat.estZéro() , "pointEstSurLaCourbe FAILED")
      
      RENVOYER pointRésultat
     type : 458752
   -
     name : MultiplicationScalairePointGenérateur
     procedure_id : 2018405110544884910
     type_code : 12
     code : |1+
      // renvoie K  * G 
      // utilise la tables de points pré-calculés TabPointPow2PreCalculé_256 pour les 256 points des 32 puissances de 256
      //=>Méthode la plus rapide
      procédure MultiplicationScalairePointGenérateur( K est Entier256 ) : Point256
      
      
      // résultats
      PointRésultat   est Point256 
      // 	32 additions par blocs de valeurs K*P précalculées
      POUR X = 0 À 31
      	// recup de 8 bits K 
      	I est entier = K._8Bits(X)
      	SI I<>0 ALORS
      		// récup de  G = I* (2^X) précalculé 
      		valeurKPow2X   est Point256 = TabPointPow2PreCalculé_256[ I+X*256 ]
      		dbgAssertion( pointEstSurLaCourbe( valeurKPow2X ), "pointEstSurLaCourbe FAILED")
      		// Addition du point précalculé
      		pointRésultat = pointPlusPoint( pointRésultat, valeurKPow2X )
      	FIN
      FIN
      
      // le point devrait être sur la courbe, sinon erreur de calcul
      dbgAssertion( pointEstSurLaCourbe( pointRésultat ) _ou_ pointRésultat.estZéro() , "pointEstSurLaCourbe FAILED")
      
      RENVOYER pointRésultat
     type : 458752
   -
     name : MultiplicationScalairePointGenérateurJacobi
     procedure_id : 2172238606859974765
     type_code : 12
     code : |1+
      // renvoie K  * G 
      // utilise la tables de points pré-calculés TabPointPow2PreCalculé_256 pour les 256 points des 32 puissances de 256
      // renvoie en coordonées de Jacobi pour éviter les divisions modulaires
      procédure MultiplicationScalairePointGenérateurJacobi(K est Entier256  ): Point256_3D
      
      // résultats
      PointRésultatJ  est Point256_3D
      // 	32 additions par blocs de valeurs K*P précalculées
      POUR X = 0 À 31
      	// recup de 8 bits K 
      	I est entier = K._8Bits(X)
      	SI I<>0 ALORS
      		// récup de  G = I* (2^X) précalculé 
      		valeurKPow2XJ  est Point256_3D
      		valeurKPow2XJ.VersJacobi( TabPointPow2PreCalculé_256[ I+X*256 ] )
      		// Addition du point précalculé
      		PointRésultatJ = pointPlusPoint_Jacobi( PointRésultatJ, valeurKPow2XJ )
      	FIN
      FIN
      
      
      RENVOYER PointRésultatJ
      
     type : 458752
   -
     name : multiplicationScalairePointJacobi
     procedure_id : 2165923497383385657
     type_code : 12
     code : |1+
      // renvoie K * P 
      // version utilisation les coordonnées de Jacobi pour minimiser les divisions modulaires
      procédure multiplicationScalairePointJacobi(  P est Point256_3D, K est Entier256 ) : Point256_3D
      
      // conversion en coordonnées de Jacobi
      //P est Point256_3D 
      //P.VersJacobi(point) // init à 1*P
      // précalcul de 2*P,3*P, ..., 15*P
      _MultiplesDeP est un tableau de 15  Point256_3D
      _MultiplesDeP[1] = P
      _MultiplesDeP[2] = pointDouble_Jacobi(P)
      pour i = 3 a  15
      	si EstPair(i) ALORS
      		// P = P[I/2] * 2
      		_MultiplesDeP[i] = pointDouble_Jacobi(   _MultiplesDeP[i/2]   ) 
      	sinon
      		// P = P[I-1] + 1
      		_MultiplesDeP[i] = pointPlusPoint_Jacobi(_MultiplesDeP[i-1], P) 
      	fin
      FIN
      
      PointRésultatJ	est Point256_3D		// 0
      // parcourt en partant du bit de poids fort par bloc de 4 bits
      POUR i = 255 À 3 pas -4
      	// Récup de 16 bits de K
      	n est un entier = K._4bit(i)
      	selon n
      		cas 0:
      			// rien
      		autres cas:
      			// r = r + 2^k
      			PointRésultatJ = pointPlusPoint_Jacobi( PointRésultatJ,  _MultiplesDeP[n]   )
      	FIN
      
      	SI PointRésultatJ.estZéro() ALORS
      		// cas particulier multiplication par l'ordre de la courbe : courbeBtc.Ordre
      		si i=3  alors
      			// renvoie (0,0)
      			_P0 est Point256_3D 
      			RENVOYER _P0
      		fin
      		// sinon c'est qu'on a pas encore rencontré de 1
      		continuer
      	FIN	
      	SI i=3  ALORS
      		sortir
      	FIN
      	
      	// r = r*16
      	PointRésultatJ = pointDouble_Jacobi( pointDouble_Jacobi(PointRésultatJ) )
      	PointRésultatJ = pointDouble_Jacobi( pointDouble_Jacobi(PointRésultatJ) )
      	
      FIN
      
      // conversion depuis jacobi:
      //  x=X/Z2
      //  y=Y/Z3
      //pointRésultat est Point256 = _JacobiVersPoint(PointRésultatJ  )
      // le point devrait être sur la courbe ou null, sinon erreur de calcul
      //dbgAssertion( pointEstSurLaCourbe( pointRésultat )  _OU_ pointRésultat.estZéro() , "pointEstSurLaCourbe FAILED")
      
      
      RENVOYER PointRésultatJ
     type : 458752
   -
     name : _JacobiVersPoint
     procedure_id : 2166308605637854078
     type_code : 12
     code : |1-
      // conversion d'un point en coordonnées de Jacobi vers 2D ( ie, en représentation de Weierstrass )
      procédure _JacobiVersPoint( pointJacobi est Point256_3D ) : point256
      
      _1SurZ			est entier256	= corps.inverseModulo(pointJacobi.z )
      _1SurZ_Carre	est entier256	= corps.carréModulo(_1SurZ) 
      _1SurZ_Cube		est entier256	= corps.multiplicationModulo(_1SurZ_Carre, _1SurZ) 
      //  x = X/Z^2
      //  y = Y/Z^3
      pointRésultat	est Point256
      pointRésultat.x	= corps.multiplicationModulo(pointJacobi.x, _1SurZ_Carre )
      pointRésultat.y	= corps.multiplicationModulo(pointJacobi.y, _1SurZ_Cube  )
      renvoyer pointRésultat
     type : 458752
   -
     name : pointPlusPoint_Jacobi
     procedure_id : 2165931902639027483
     type_code : 12
     code : |1-
      // Addition de 2 points en coordonnées de Jacobi
      // source des formules : http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-add-2007-bl , "add-1998-cmo-2"
      procédure pointPlusPoint_Jacobi( point1 est Point256_3D, point2 est Point256_3D ) : Point256_3D
      
      // gestion cas particulier P+0 / 0+P
      si point1.estZéro() ALORS	renvoyer point2
      si point2.estZéro() ALORS	renvoyer point1
      
      
      // Z1Z1	= Z1^2
      Z1Z1 est Entier256 = corps.carréModulo( point1.z )
      // Z2Z2	= Z2^2
      Z2Z2 est Entier256 = corps.carréModulo( point2.z )
      //U1	= X1*Z2Z2
      U1 est Entier256   = corps.multiplicationModulo( point1.x, Z2Z2 )
      //U2	= X2*Z1Z1
      U2 est Entier256   = corps.multiplicationModulo( point2.x, Z1Z1 )
      //S1		= Y1*Z2*Z2Z2
      S1 est Entier256   = corps.multiplicationModulo( point1.y, corps.multiplicationModulo( point2.z, Z2Z2  ) )
      //S2		= Y2*Z1*Z1Z1
      S2 est Entier256   = corps.multiplicationModulo( point2.y, corps.multiplicationModulo( point1.z, Z1Z1  ) )
      //H		= U2-U1
      H est Entier256    = corps.soustractionModulo( U2, U1)
      //HH		= H^2
      HH est Entier256   = corps.carréModulo( H )
      //HHH		= H^3
      HHH est Entier256  = corps.multiplicationModulo( HH, H )
      // r		= S2-S1
      r est entier256    = corps.soustractionModulo( S2, S1)
      //V		= U1*HH
      V est entier256    = corps.multiplicationModulo(U1, HH)
      
      pointRésultat est Point256_3D
      // X' = r^2-(HHH+2*V)
      HHH_plus2V est Entier256 =  corps.additionModulo(HHH, corps.multiplicationPar2Modulo( V ) )
      pointRésultat.x    =  corps.soustractionModulo( corps.carréModulo( r ) , HHH_plus2V)
      // Y' = r*(V-X')-S1*HHH
      _r_V_Xresultat est Entier256    = corps.multiplicationModulo( r, corps.soustractionModulo( V, pointRésultat.x  ))
      pointRésultat.Y    =  corps.soustractionModulo( _r_V_Xresultat, corps.multiplicationModulo( S1, HHH ) )
      //  Z' = Z1*Z2*H
      pointRésultat.z	   = corps.multiplicationModulo( point1.z,  corps.multiplicationModulo( point2.z, H  ) )
      
      renvoyer pointRésultat
     type : 458752
   -
     name : pointDouble_Jacobi
     procedure_id : 2165924145924843928
     type_code : 12
     code : |1+
      // Addition d'un point avec lui même en coordonnées de Jacobi
      // source : http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2
      procédure pointDouble_Jacobi( point est Point256_3D ) : Point256_3D
      dbgAssertion( PAS point.z.estEgalAZero())
      
      pointRésultat est Point256_3D
      //XX	= X1^2
      //YY	= Y1^2
      yy est Entier256     = corps.carréModulo( point.y)
      //S	    = 4*X1*Y        
      S  est Entier256     = corps_secp256k1.multiplication_255x255x8_Modulo( point.x, yy , 4 )
      //M	    = 3*XX          
      M  est Entier256     = corps_secp256k1.carré_255x255x8_Modulo( point.x,  3 )
      // X'	= M2-2*S    
      pointRésultat.X      = corps.soustractionModulo( corps.carréModulo(M), corps.multiplicationPar2Modulo( S ) )
      //Y'	= M*(S-X')-8*YY^2
      _M_SX est Entier256  = corps.multiplicationModulo( M, corps.soustractionModulo( S, pointRésultat.x ) )
      _8YY2 est Entier256  = corps_secp256k1.carré_255x255x8_Modulo( yy, 8 )
      pointRésultat.y      = corps.soustractionModulo(_M_SX, _8YY2 )
      //Z'	= 2*Y*Z
      pointRésultat.z      =  corps_secp256k1.multiplication_255x255x8_Modulo( point.y, point.z, 2 )
      
      renvoyer pointRésultat
      
     type : 458752
   -
     name : _multiplicationScalaire2PointJacobi
     procedure_id : 2169263272548855874
     type_code : 12
     code : |1+
      // renvoie K1 * P1 + K2 * P2 avec P2 = _PointMultRacine(P1)
      // .Utilise et renvouer en cood de. Jacobi pour minimiser les divisions modulaires
      procédure _multiplicationScalaire2PointJacobi(  P1 est Point256_3D, K1 est Entier256,  K2 est Entier256 , bSigneOpose booléen ) : Point256_3D
      
      //point2  est Point256 = _PointMultRacine(point1)
      //si bSigneOpose alors point2 = pointNégation(point2)
      //
      //// conversion en coordonnées de Jacobi
      //P1 est Point256_3D 
      //P2 est Point256_3D 
      //P1.VersJacobi(point1) // init à 1*P
      //P2.VersJacobi(point2) // init à 1*P
      // précalcul de 2*P,3*P, 15*P
      _MultiplesDeP1 est un tableau de 15  Point256_3D
      _MultiplesDeP1[1] = P1
      _MultiplesDeP1[2] = pointDouble_Jacobi(P1)
      pour i = 3 a  15
      	si EstPair(i) ALORS
      		// P = P[I/2] * 2
      		_MultiplesDeP1[i] = pointDouble_Jacobi(   _MultiplesDeP1[i/2]   ) 
      	sinon
      		// P = P[I-1] + 1
      		_MultiplesDeP1[i] = pointPlusPoint_Jacobi(_MultiplesDeP1[i-1], P1) 
      	fin
      FIN
      // idem P2
      _MultiplesDeP2 est un tableau de 15  Point256_3D
      // OPTIM : P2 = L*P1, inutile de calculer 15 points.
      PROCÉDURE interne _PointMultRacinJocobi( _p est Point256_3D ) : Point256_3D
      	pointRésultat est Point256_3D 
      	pointRésultat.x	= corps.multiplicationModulo( _N_Ordre3, _p.x )
      	pointRésultat.y	= _p.y
      	pointRésultat.z	= _p.z
      	RENVOYER pointRésultat
      fin
      PROCÉDURE INTERNE _pointNégationJocobi( _p est Point256_3D ) : Point256_3D
      	pointRésultat est Point256_3D 
      	pointRésultat.x	= _p.x
      	pointRésultat.y	= corps.négationModulo(_p.y)
      	pointRésultat.z	= _p.z
      	RENVOYER pointRésultat
      FIN
      
      POUR i = 1 a  15
      	_MultiplesDeP2[i] = _PointMultRacinJocobi( _MultiplesDeP1[i] )
      	SI bSigneOpose ALORS _MultiplesDeP2[i] = _pointNégationJocobi(_MultiplesDeP2[i])
      
      FIN
      
      
      iMax est un entier = 255
      // OPTIM pour ca K "petit"
      si K1.val3=0  _et_ K2.val3=0  alors  iMax-=64
      si K1.val2<16 _et_ K2.val2<16 alors  iMax-=60
      
      PointRésultatJ	est Point256_3D		// 0
      // parcourt en partant du bit de poids fort par bloc de 4 bits
      i est un entier = iMax
      boucle // POUR i = iMax À 3 pas -4
      	// Récup 16 bits P1
      	//n est un entier = K1.bit(i)*8 + K1.bit(i-1)*4 + K1.bit(i-2)*2 + K1.bit(i-3)
      	n est un entier = K1._4bit(i)
      	si n<>0 alors
      		// r = r + 2^k
      		PointRésultatJ = pointPlusPoint_Jacobi( PointRésultatJ,  _MultiplesDeP1[n]   )
      	FIN
      	// Récup 16 bits P2
      	//n  = K2.bit(i)*8 + K2.bit(i-1)*4 + K2.bit(i-2)*2 + K2.bit(i-3)
      	n  = K2._4bit(i)
      	si n<>0
      		PointRésultatJ = pointPlusPoint_Jacobi( PointRésultatJ,  _MultiplesDeP2[n]   )
      	FIN	
      
      	SI PointRésultatJ.estZéro() ALORS
      		// cas particulier multiplication par l'ordre de la courbe : courbeBtc.Ordre
      		si i=3  alors
      			// renvoie (0,0)
      			_P0 est Point256_3D 
      			RENVOYER _P0
      		fin
      		// sinon c'est qu'on a pas encore rencontré de 1
      		continuer
      	FIN	
      	SI i=3  ALORS
      		sortir
      	FIN
      	
      	// r = r^16 (8 multiplications par 2)
      	PointRésultatJ = pointDouble_Jacobi( pointDouble_Jacobi(PointRésultatJ) )
      	PointRésultatJ = pointDouble_Jacobi( pointDouble_Jacobi(PointRésultatJ) )
      	i-=4
      FIN
      
      
      RENVOYER PointRésultatJ
      
     type : 458752
   -
     name : _calcVecteurOpimisePourMult
     procedure_id : 2169272227556508116
     type_code : 12
     code : |1+
      // renvoie V1,V2,signeV1,signeV2 tels que
      // V1 + V2*R = K ( modulo N)
      // avec V1 et V2 "petits" = sur ~128 bits 
      // <signeV1> et <signeV2> valent +1 ou -1
      PROCÉDURE protégée _calcVecteurOpimisePourMult ( _k est Entier256 )  : (Entier256,Entier256, entier,entier)  
      	
      // constantes calculées par utilPourOptim.CalculeCoefConstantEuclide() pour _Lamda = 0x5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72
      V1_X		est Entier256("0x03086d221a7d46bcde86c90e49284eb15")
      moinsV1_Y	est Entier256("0x0e4437ed6010e88286f547fa90abfe4c3")
      V2_X		est Entier256("0x00e5e9bd2461792dd1aca54cdd1d8b2a6")
      moinsV2_Y	est Entier256("0x58a1bcb25ae2b9cc084678edad30447a7")
      //_moinsDelta	est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")	// X2*Y1 -X1*Y2
      
      // B2,B2 : coefficients tels que "(K,0) - (B1*V1 + B2*V2)" soit sur ~128 bits
      _B1			est Entier256	// ex : "0x276e6bcbe7ba30a0b216a78e91107e13"
      _moinsB2	est Entier256	// ex : "0x0658d53831aae2574117afb315cc83da"
      moinsK_Y2	est Entier512	= multiplication256x256_512( _k, moinsV2_Y)	
      moinsK_Y1	est Entier512	= multiplication256x256_512( _k, moinsV1_Y)
      
      // calcul de B1 =  K*Y1 / _Delta
      //	         B2 = -K*Y2 / _DeltaZ
      /// comme delta = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 ~= 2^256, 
      //  on approxime la division par un décalage de 256 bits vers la droite.
      // Résultat sur 128 bits car V1_X, .. le sont
      _B1		 	= moinsK_Y2.valPoidsFort
      _moinsB2	= moinsK_Y1.valPoidsFort
      		
      // v = B1*V1 + B2*V2
      // B1*V1
      B1V1X		est Entier512	= multiplication256x256_512( _B1,      V1_X      )
      moinsB1VY1	est Entier512	= multiplication256x256_512( _B1,      moinsV1_Y )
      // B2*V2
      moinsB2V2X	est Entier512	= multiplication256x256_512( _moinsB2, V2_X      )
      B2V2Y		est Entier512	= multiplication256x256_512( _moinsB2, moinsV2_Y )
      // NB: résultat est sur ~256 bits. parfois 257
      
      // vx     = b1*v1.x + b2*v2.x
      VX512	est Entier512		  = soustraction512(  B1V1X,   moinsB2V2X )
      dbgAssertion( VX512.valPoidsFort.estEgalAZero() _ou_  VX512.valPoidsFort.estEgalAmoins1())
      VX	    est Entier256 		  = VX512.valPoidsFaible
      // vy     = b1*v1.y + b2*v2.y
      moinsVY512   est Entier512         = soustraction512( moinsB1VY1, B2V2Y  )
      dbgAssertion( moinsVY512.valPoidsFort.estEgalAZero() _OU_  moinsVY512.valPoidsFort.estEgalAmoins1())
      moinsVY		est Entier256 = moinsVY512.valPoidsFaible // corps.négationModulo(VY)
      	
      // k - vx = K - (b2*v2.x - b1*v1.x)
      KmoinsVX	est Entier256 = corps.soustractionModulo( _k, VX)
      
      // Résultat :
      signeX		est entier			= 1
      signeY		est entier			= 1
      VX_Resultat	est Entier256		= KmoinsVX;	
      VY_Resultat	est Entier256		= moinsVY;	
      // si VX_Test<0
      SI VX_Resultat.bit(255)=1 ALORS
      	// x' = -x
      	VX_Resultat	= corps.négationModulo( VX_Resultat ) 
      	signeX		= -1
      FIN
      // si VX_Test<0
      SI VY_Resultat.bit(255)=1 ALORS
      	// y' = -y
      	VY_Resultat	= corps.négationModulo( VY_Resultat ) 
      	signeY		= -1
      FIN	
      	
      // renvoie le vecteur (Lamda-(b1*v1+b2*v2))
      RENVOYER ( VX_Resultat, VY_Resultat, signeX, signeY )
      
     type : 458752
   -
     name : _PointMultRacine
     procedure_id : 2169286937824428775
     type_code : 12
     code : |1+
      // fonction qui renvoie _RacineQuiMuliplie * P
      // (x, y) => ( _N_Ordre3*x, y) 
      PROCÉDURE _PointMultRacine( _p est Point256 ) : Point256
      
      pointRésultat est Point256 
      pointRésultat.x	= corps.multiplicationModulo( _N_Ordre3, _p.x )
      pointRésultat.y	= _p.y
      RENVOYER pointRésultat
     type : 458752
   -
     name : multiplicationScalairePoint_OptimiseJacobi
     procedure_id : 2169274014262991166
     type_code : 12
     code : |1+
      // renvoie le point : K * point
      // version utilisation les coordonnées de Jacobi + optim de décomsition de K en 2 nombres de 128 bits
      PROCÉDURE multiplicationScalairePoint_OptimiseJacobi(  point est Point256, K est Entier256  ) : Point256_3D
      
      // N = générateur du groupe des points  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
      // P = ordre de la courbe               = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
      
      	// renvoie x + _RacineQuiMuliplie*y mod N
      	PROCÉDURE INTERNE _F( x Entier256, y Entier256 ) : Entier256
      		res est Entier256 =corpsOrdre.additionModulo( x, corpsOrdre.multiplicationModulo( y, _RacineQuiMuliplie ) )
      		RENVOYER res
      	FIN
      	
      // on décompose K en 2 nombres k1, K2
      // tels que K = k1 + k2 * _Lambda (modulo N)
      // et _Lambda est tel qu'on peut trouve _Lambda*P par une simple multiplication de P.X
      soit (k1,k2,signek1,signek2) = _calcVecteurOpimisePourMult(K)
      
      // on vérifie que le résultat a bien les propriétés attendues
      k1AvecSigne	est entier256	= (signek1 = -1) ?  corpsOrdre.négationModulo(k1) sinon k1
      k2AvecSigne	est entier256	= (signek2 = -1) ?  corpsOrdre.négationModulo(k2) sinon k2
      _Tmp		est Entier256
      _Tmp = _F(k1AvecSigne, k2AvecSigne )
      dbgAssertion( _Tmp.estEgalA(K) ,"nombre pas OK")
      // k1 et k2 doivent êtres "petits"
      dbgAssertion( k1.val3 = 0)
      dbgAssertion( k1.val2 < 0x1000)
      dbgAssertion( k2.val3 = 0)
      dbgAssertion( k2.val2 < 0x1000)
      
      // on doit avoir _map(P) = _Lambda * P
      P 		   est Point256 = point
      //_Lambda_P  est Point256 = _PointMultRacine(point)
      // gestion du cas ou les coefficients sont négatifs
      SI signek1 = -1 ALORS
      	// P = -P
      	P     = pointNégation( point )
      FIN
      //SI signek2 = -1 ALORS
      //	// P = -P
      //	_Lambda_P =  pointNégation( _Lambda_P )
      //FIN
      bSigneOpose est un booléen = signek1 <> signek2
      
      // conversion en coord de Jacobi
      PJ est Point256_3D
      PJ.VersJacobi(P) // init à 1*P
      
      // renvoie k1*P + k2*Lamda*P
      K_PJ est Point256_3D =  _multiplicationScalaire2PointJacobi( PJ, k1, k2, bSigneOpose  )
      RENVOYER K_PJ
     type : 458752
   -
     name : xVersCléPublique
     procedure_id : 2173352992000852630
     type_code : 12
     code : |1-
      // calcule une clé complète a partir de juste la coordonnée Y et le signe voulu pour Y
      PROCÉDURE xVersCléPublique( X entier256, bYPositif est un booléen ) : Point256
      
      // on a    Y^2 = X^3 + 7
      _7 est Entier256(7)
      X3Plus7 est Entier256 = corps_secp256k1.additionModulo( corps.cubeModulo(X), _7)
      // en débug on vérifie que X^3 + 7 est un résidu quadratique. 
      SI dbgActiveAssertion() ALORS
      	_Pmoins1Sur2	est Entier256("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe17")
      	_DBG			est Entier256	= corps_secp256k1.puissanceModulo(X3Plus7, _Pmoins1Sur2)
      	dbgAssertion(_DBG.estEgalA1(), "X3Plus7 n'est pas un carré. ie X n'est pas un point de la courbe.")
      FIN
      
      // Y = racine(  X^3 + 7 )
      Y est un Entier256 = corps_secp256k1.racineCarréeModulo(X3Plus7)
      // selon le "signe" voulu on inverse (envoie -P au lieu de P)
      bSigneCourant est un booléen = Y.val3 >= 0x8000000000000000
      si bYPositif<>bSigneCourant ALORS
      	// Y = -Y
      	Y = corps_secp256k1.négationModulo(Y)
      FIN
      
      
      // mise dans le point résultat
      Résultat est Point256
      Résultat.x = X
      Résultat.y = Y
      
      dbgAssertion( pointEstSurLaCourbe(Résultat))
      renvoyer Résultat
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x1b51730b00a025a9
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
