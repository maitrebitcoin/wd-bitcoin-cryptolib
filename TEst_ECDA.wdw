#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : TEst_ECDA
 major_version : 25
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : TEst_ECDA
 identifier : 0x2b7cfedd00d3a562
 internal_properties : BQAAAAUAAACxHeUIxbZNvvEi196KSYVfgKITg89gyzCvyEIeuuHEH0c1FyBDd7UCXGpUHONBGjWYzNq138gyr2XMYBQH/jCbSb8o08CtbXdmFdbYRb9d39KxuXAGlophEQPGa5Ee/xqqzY08bFXeq50NsCK4yMQMDhpoDFep2crWxtTV4d62rxxmFD3XWU+I5ksQWjS1cWtQawRqmx0aU2tlT/TdULG5ECWCIcf4v99Wcgn13Gtgw1mtluYC42LmfFSwdzud/z7zHGgfKKQbuc2dx0fMr/moPNRj1GmUXDEXaya98fq7OBdOEV9jQPcLkrCnrYmvHbMkJFod5Nh+19tMyiW5e5SYQ6M4nuYk/4cOvrduQk6gFQ97udkAWTQdc9/foDhyGa77HOiRG7QOdvmKYdVi4tIqSlFrzYBIruf0j85FzXUtQwF2RRAEPqQvd+gdoaEquvJQ+uih7XX8s1JKU0yX641bM9eZnuo8fRjoxHWoJPZnZNzNS1Xzc+4gvGEDuuli/sharV8pTQ8yRqyFaHcGJ13zoQeItBRFQ1vDT3j93/uBa7vPELknYBa6FZwt7V4dJ0De25XgVuMBGkaQ0eAiyO6IDL95BVqBaSyTfdJ0yGSDkiw5HPLBH8aosMc2PsYG+/Pz9Pje3oK+2MWAoTJ+bLkLjnMzPnBEpS02nC+pCi6cdQlxevZXx+exobtWrFyE9sohTsytDmQLSydH/jM3SnN1a/Qwg5aWgvfAZXRE3mBFDrSO+naaRlr0C677WwUZUkAGlKWYwq3MCN5UlaeYIoqgRDIBA0857UXLe9loERkGmjTGWSA8d/RSidr6D4shQKIgwfBhQ4SYsj2Qa3Q=
 controls :
  -
    name : priv_pub
    identifier : 0x2b7cfee80119d106
    internal_properties : BQAAAAUAAACJvP/pvrziKQbzKHvWLFOg++WQlYdD6hZX+/GUiZfRibJIj6H0clWFydRSC+dRiC0AMO+6JurCv6+nc4efjFAXgjLwIA9Wix2NQYA5W69tKCU0Yyi3miiQvXRFyCgerN+N7g7tyCi88yOP1dcf9nS9PjvaITblhgv+xC3WStL+mK/ZCb+t9mtN4FB3mQ4TbZ/xSWNP2TxKA+kPruARjiJdREJxI8f/QKVRepbQjpruFJW6k8t5KBuR4qLLl2/BZAcit/5kEOBhgn8fXkA6RDJ0jj4TP33SS27PDkR8rRtfso+TJjFlbZrLgyWln4UIN3+7h3RKOy7kB4MSpxkZXuwfWvRhhF306p7gT/nq0SB26y65KJHipR3UPxwBWMsgAxcaLc/wy/P3wNC5xfjxTKqv3z1OMLW7b7n5ySyC4D31sbRHGbgC6dPKYs0o2pQ6Ln1VU7E+99FcDqO79YcdO/s3HOxIp5lglHkFt16NTW19n0LHjWk/iRiupVMmC6PAhGqCvyWavQO+Mk0B+JN60nlqVzUrP84CmGLRLhecSZp4GalThHv/AXoYw4r7jOE+8+WTCNDRY0p59QmBDpSjn8xhOuv30MXHcrAocV6b1E2iB6HoOVvruj94B5fg05s9oUPjg+ug4LlXgCOKi+qNHcRske6g4498oST2cdeKmRs78CUwZ4NaON9yMzcVOU0rwR5dZsThWo80amDJTSb+Q4R4RL2JZ4f+uR8z7JZxyS+iqbGbq7A0JEv111wxLUg8HqaH4AsyPC0vUrTTdS4=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         //ClePrivee est Entier256("75be5c76cde3bcb877a523f618c839cb6ac58269880288734acee9473a180744")
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // 5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b
         xOK est Entier256("0x5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         //xOK est Entier256("0xFD0F6EBE95AAFBED3C431047BB3D9DEA4324B8D6CDBC16D35AE30AC22E9548")
         yOK est Entier256("0xb809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         
         
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
         // b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : FIn1
    identifier : 0x2b8390ec00c21e47
    internal_properties : BQAAAAUAAACHXxipdqWeapjUd8wkxG0qOhw1GybBfGx1VX2Cna4BSS3MRmGgCtUBc1zsGCYVQIXFlgz4vuKROfJvtvCqhg2ApHvitaGMjh93JI9ekLZkLJJ8u0CTWvduQBz5+YvUSGoG3ZstmVkiwvkMQlXkhWw0W3H1ZGqS7ifhAgdCIJxl8kNSr4JkYfvwA8ORCsfLwOiNvL17u3q8HQevNBrmjEahjfAf8yxCoveF+xUqCn/tE6iWDZTs0Uk8C753x5RsoGFrJk4W9/aTbHLdvi4f36DlgV9cGm5AT/msqU8Aq+0725y9gFilHW0MPy17FA39xJvwI6P3EpV1ALQndXTijcwVUZlqdyYhm0udG0hf8GdewGZizrXx6B7Q5fCFXbaJY24p3cj233DdJm0lrCfz14Ioeiw1G3GkG7XwIZXzhBh3EHncyCmsojFoh8EXBww/vK7ALj5Du/reULixwu7N7sma5YmBkKuFSi9e92uEE6Qxhzky8OhtPMAmeinJsL8jRIuRUgi9KSqiFtAF8SquGxWlHH7umqqRZhAclsEcWxtKjamXzIn6my3dGeGjOgZ0w09JLtobnoMdo70h++vZsjzzVGRGXvXmCnTu3+ivmuEOoCbC/Dvp6FBnVWmBSMUT2bC2bKcJNqPRgFpqGLPhY97J4wJppgENIjzhrZFB2nBJePJpWCNBJueyUdDwJU5FQLdp/KKasC3jdIxuEY71V3SsDeB8
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         ferme()
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_64
    identifier : 0x2b8e1e360145dde5
    internal_properties : BQAAAAUAAACOgZ0bSvcyUlKvOdgf7gMZo2k/2VObGO+mlGXie5o3fMM70rMrFoSDg+8S26Y4IQreeRYmbUOUdky88+oXWQIrAkvZ+ha7enZYtq42EGa8tFnbIPooBj9iTMSX/o0JG4m8WOUJXCtXiuuCHy0zcB2yipdQzIOXBaWgBaUs78ptmFnpG9LwcSQeajSbjPSutVV/I5CKTU9fXBrvi4+fHU9DAjdB56bkxiVm5PewjOF0qnVJ5x1YTvx3vMtXKJsgUbnI2HQ9TKLOnXC9gQInVvp4f63Us46zgX4RFEiQ7uVwsGWZqtc+7E5tSIYpBAhT2sHyD7Lad+Uwuz8Ufoy54X6aumhsAtROYu+Ak1KXBV7eJXrMjKI9+ggpsO6lfWoPKTUQnRoYFWDZ9/iferWt8ayZ1xIhy6WoA+4zzduroLCLZ9ymMvsyZglPpFl9W0wxpuFTpmKl4SDMS3WHCuIdTkVBRH37FqVzcIbP32mM95Y77YIsgr4nBHzPPe0BHhEjQBJsRFw1XZ7ys6O5B9Bgu6lOrbZkVAivrB1HrnXMXr8CUuLv9v/sD93GpKXr9KwUNrZgsUPU+HRTbQ5zccQ3iEIuoTe8YBQ6hO3EBfTvHrPCJZdUXD9L5/xk/VAA10ijlMzANXQN9t3UD1MqleWBYzZ2PMRii+ITJX8uXxnmKgFmqMSENAthBcvLWGf+7ZUKQfhIKlh2OBw/GkAMVP/SvnTb0SaccaNgaM7Wh48=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         PROCÉDURE interne _multiplication64x64_128( nombreA entier sans signe SUR 8 octet, nombreB Entier sans signe sur 8 octet  ) : Entier256
         
         	//@TEST
         	Résultat  est Entier256 
         	nA est un numérique   (38,0) = nombreA
         	nB est un numérique   (38,0) = nombreB
         	n64 est un numérique  (38,0) = 0x100000000
         	n64 = n64 * n64
         	nAB est un numérique  (38,0)  = nA
         	nAB = nAB *  nombreB
         	sRes est chaine =  NumériqueVersChaîne(nAB,"32X")
         	nMax64 est un entier sur 8 octets sans signe  = 0xFFFFFFFFFFFFFFFF
         	nMax64_num est un numérique (38,0) = nMax64
         	//buf est un buffer sur 16
         	Transfert(&Résultat.val0,&nAB,8)
         	Transfert(&Résultat.val1,&nAB+8,8)
         	//Résultat.val0 =  ETBinaire(nMax64, nAB ) //arithmetique._2_Puissance64) //, 	arithmetique._2_Puissance64 )
         	dbgAssertion( Résultat.val0 = HexaVersEntier(droite(sRes,16)) )
         	//si taille(sRes)>16 alors
         	dbgAssertion( Résultat.val1 = HexaVersEntier(gauche(sRes,Taille(sRes)- 16) ))
         	//fin
         
         	renvoyer Résultat //(Résultat.val0, Résultat.val1)
         fin
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est un entier sur 8 octets sans signe = 1 //0xFFFFFFFFFFFFFFFF   //0xE6B52D16CF375361
         V2 est un entier sur 8 octets sans signe = 0xFFFFFFFFFFFFFFFE // 0xFFFFFFFFFFFFFFFF 
         
         ResOK est Entier256(  "0xcfea0d3dc68974efebb6f377ccd60ac1" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = _multiplication64x64_128( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Génration_Table_Point_2_N_mon
    identifier : 0x2b8f620400c6b0a3
    internal_properties : BQAAAAUAAADbuIh/Ntnky64jo5/3QnQSms6XYJ7/f+mKe+Sc979L+aiKOPbihpi4Js7an6/rjy9UOqZXAP1c8yV6Dq2t3bFlFBTBqYB1/HkhnL3zFntaz81X0dGT7XX8erB+EwFb0Bb6qdkFJCCy0HZlehfMEcBSlWHt+BTPws4d0aOsyvL8wvK7MiuZQjlHZIcQaPhJ2DrwX2Y67Bjk+7u1YlO4bbIfK3lJ/obozZWJOLuEQRdegSBWVojOTx+QazqILJGRMGmAZFlyVRwD5VUhYLNuM+006Od/rc4K5Qcp40k65LrwHNl6MGbaswf3fRGw6GDPTqDH6WC2P9qfrexRX5b3LRKlraX33+4L2xHyOPOrW25YjuTQgckFITgM7+bAmTi6IxYJowS71HBGGGa34LQnauMtBMx5kogSttsJmTneFhOwGTn28MbRWFroHJ9REjgqKZvqsmY4EGbZCnsb/m/tR8g1oW/5/5qZPy/1N30Nfemw1Y82ouuYDlXyC0kL48muTdy7rtyazkRp2NEVpZ+6ZsKGGhYineWhRQ5HeE1hvnGquq+3OGylzTTJWM91G/eUbNtVLU05ETpei91NnZDJF68p+MRwOCTilcoGP62bvpfxXa6Xhh+2E73gYdGtT+F44BMeBswFSFrmjVsa4i0MQA2wrJKTcyaVXPy6pfbbcLd+noIEQppNhIIrXV5R/Bx4iZSuD92oMHaZfGRQMEHbC2LFzUAyMsyFyLJKW4uZhZXG8YiYTYtK6Y8YBYLI5Os90lU=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire dynamique <- CrytoLib.corpsECC
         ecc   est CourbeElliptique_secp256k1 dynamique <- CrytoLib.courbeBtc
         
         //GN est PointFraction256 //= CrytoLib.courbeBtc.pointGen
         //_1 est Entier256
         //_1.affecteAvecEntierPositif(1)
         //mon_résultat   est PointFraction256 // 0
         //mon_résultat.x.dénominateur = corps.X_to_monX( _1 )
         //mon_résultat.y.dénominateur = corps.X_to_monX( _1 )
         POUR i = 0 a 255
         	valeurKPow2I   est PointFraction256  =  ecc.TabPointPow2PreCalculé[i+1]
         	// vers mon 
         	mon_résultatvaleurKPow2I   est PointFraction256 
         	mon_résultatvaleurKPow2I.x   = corps.X_to_monX( valeurKPow2I.x )
         	mon_résultatvaleurKPow2I.y   = corps.X_to_monX( valeurKPow2I.y )
         
         	trace("  " + mon_résultatvaleurKPow2I.x.VersEntier256(corps).VersChaineHexa() + " " +	
         		  	     mon_résultatvaleurKPow2I.y.VersEntier256(corps).VersChaineHexa())		
         	Multitâche(-1)
         FIN
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_SigneNombre
    identifier : 0x2b9198d600a6d698
    internal_properties : BQAAAAUAAADZwqJw1jZxw2TlvodJoMsJwioANMvWCZAtlzTGaXcCx8mDOPdEXHoJ582oo/hncsEg/XAgcmXuFPCeq+L7TDsqFoFZDrbdzjfYkO564wiMc4Kbodpfmp9TP6Dik+L92I9+FQPfx+KDtGXNDuHpxOeE0r99bdPfvuSqCqLfPB9OvjZEY2OETDSioWyqy7pu5Bkh2H1xMsEtn+HbTVeWG6/bHASxkdeYc5QYhWCO3o5WDvH3f67sU9mmp04BfodO71MHubkz6nrHyNnPw2BUrbPoSy0OL53Euc9WgS7/qMXCsXl0JeQ5Z8fuOzynWcETVUEV40Fle7IuZNM937FkUrbCTRheQRO4f3R5E9t2U6+rIgjd1FSwJEhemOqMkBBBN6IJng4nTTBpw0wBgYC5p3awfkHTRsUiueKPS0aMqrjLVkuFFmoyCPdzeO/aJiSXOBL4Pdw88ZQY2UerhVXB8Btmndi1OUM17kJL6WSBowYDhKnF3Otr0n6FF2k0J0HpQodBpxRQ2X6ilwcPPvmCj50xPKtiW5TTeDXPgJ2kjpibb48D7fkV+GSHnRAdZJ1JQ+xo2jldfcZeUTG4LfumQfOYB7RnbsHqqinWhBbHAfIn/yaJoamXqkG6pW/+QzU8Dw4k2jkK2/JR+Uv8caG4MB+KDsqg4Je7fD417NNEgqNMYSEGX9e9OlVgaabTDCw7t9fvYq073ilagx6gkW4SXk5APQv/rGoD/R8aWGXwsQRY05uO0Er+
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature= CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         retour
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         sERR est chaine
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_65
    identifier : 0x2b9a01bd00828070
    internal_properties : BQAAAAUAAAC4mbScLuHaVsvMXVeFLY8QiL6LYJVdGBzQ6OXB0eTv1kg/IGlfsfQT6gQY7Lajgu59jjrql30GQrabA1qyqsTxh2An5g5dqAZylZYdXNETZCPk6L3er2e3rYNPUt7Td8LK+9f35rtajln8lOvO2eXzT8DAS330wYj6lwyvigl2aFvoxy8LWZT4+0rGuiOBDFc3T9TW++nGvDmdSH7VGK9O+VOI0XKFmOxrHwQ4cT0+o5SqRfV8eNmq2gO+lb/j1jFbXWIIJgffel4Wq5FksBAIgZICWSanjkFrEiio9re5dbTD8mmFIyvejDOW6wNSqDEod2z3Abvzl8RBRh9sM4+GjHDTTN6GWoT3KsTfCjQWTZmIXHyF3Jr5Fz642iehbaFlYcsfB9kvuHiK2O197fDH5J9lg7WP7vEBFST4tFrV3aevZJSpBqcAPCjIqHHPVZl/qsiLzmwat5lhhdGcIZpxC1Hq9fjKtnPnCK0Q8LZnvzbc3aWN5z3oBGBM82Y6q15vwVv+gze/SQ0qOb4mPG6MHXjNeOF21LbC2p0cJtt0nwBFxru63VQ9T91nstUuD/zHQhx5BMCiQ6ZmwenTChCsWlGg1vq6hHW2NS6HRo8Q9GmeUY5SSh34f3wKJhlaSRGmFh8iFVcemrSws5FVgWWyqd1JdNlUmP56zi+kXvGe8qBARVQZTr75AWyATPT93P4bWccaAenNvgZgRI/emJVU6flx2RpZ93fJLB1kjJ5Vp7o=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est Entier256( "0xFFFFFFFFFFFFFFFFFFFFFFFFFF" )
         V2 est  Entier256 ( "0xFAEAAC7C6663B93D3D6A0D489E" )
         
         ResOK est Entier256(  "0xfaeaac7c6663b93d3d6a0d489d05155383999c46c2c295f2b762" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = multiplication128x128_256( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEst_Div
    identifier : 0x2b9d499901f6ea31
    internal_properties : BQAAAAUAAAByVX98qCalMEz/VxYkoVP7m38xEulDRA+m21CDa0mPUlJKLCEIC4lhBb+6bpI8yvL0S0iR4ndeHXY2skryE/nFuxIMGNtL8fdsp/JDpu68fN87SdrMooqNi9kjJww8dWwlx42f9IJ9G25G7yVQFR0TxNiwjkr/QxgpP/LxWy3jRL7E3/0tEysoGHlCQvcisIDSoGv+w1WMcnfgT8hbBrLSDwAkqYst7LSwkpPitl7ZGhnBE82duexoYHPQPXUsz9EKKocHyj0nfO1jS7BPKAZTh3R1V0GB3bMEBwsNnMMHb21mW6hrWY8Qq3hNjP+CpQWMyjsr/oklSq4RUWVhOIbpdqj4UnXNazXr563SXcBoKFjAAz17vv4CTaKhltPKQi1eFi5pICxYkyGGcy9vQOY4DTGGcSwsaRQsF180GIqFLkg4pn+lTs9Evu2QxloLjW6B4OZSZNpARoYa6JcFd2PWpDcScK4WSOIKiIfdgB5d6naZpyoUiBJj5HWLeVSNkKwpICqvN8HRNbDXyWcPjz+CuLdVp4EJ3D3jBrYjnlwiqejQOIg2PVr30O3xUx+t9XJsCFia6h1BLhjHu8/aBN9ew6GVIyOZvK/XnaQfaq4mkKUDf19BHxNdHKBQGksX8VnK5/wPXR+CitX2ei762U12kedAZuQ+kmbGfRz35uYKM4/RbDBNC4gmjMa+Y5urzpf6s4l5URFPACEjIQP5RFwseYjPXijVY/I=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         	PROCÉDURE INTERNE _VerifieAdivB( AFormaHexA est chaine, BFormaHexa est une chaîne, QuotientFormaHexa est chaine, ResteFormaHexa est chaine)
         	nombreA est Entier256(AFormaHexA)
         	nombreB est Entier256(BFormaHexa)
         	Q_Etalon est Entier256(QuotientFormaHexa)
         	R_Etalon est Entier256(ResteFormaHexa)
         	Q,R sont Entier256
         	(Q,R )  = divisionEuclidienne256( nombreA, nombreB )
         	SI PAS Q.estEgalA(Q_Etalon) ALORS
         		trace(Faux, Q.VersChaineHexa() + RC + Q_Etalon.VersChaineHexa() )
         	FIN
         	SI PAS R.estEgalA(R_Etalon) ALORS
         		Trace(Faux, R.VersChaineHexa() + RC + R_Etalon.VersChaineHexa() )
         	FIN
         	FIN  
         
         
         _VerifieAdivB("0x23456788fffdcba9877", "0xFFFFFFFFFFF", "0x23456789", "0" )  
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : PGFD
    identifier : 0x2b9d55b302462d21
    internal_properties : BQAAAAUAAABNOd7EGGhF+eU/jhsH30Qf583AzMp/XIoTcWDQjD1UJg6ur2l/+SVkgJGbzSEIa+iaKZEb+Q2uGEfckSEhtdTbkTJ/AvnY+0D6esTnOcGvDHNN3agkc07OOQmF28qMGPvcFHVgi2djxdJIWwlmZ0sgp9AiP3CE1K+jmgtS3nurnPUR+Oplsstqzlj05meRvJlVimbd7RASfQ+HVHBPseqbk+O4f6klI95DVkseOj3p366y+kIlUu9V4Wp8xJOGVNIF6ZqylgXpyK3h+ayQmb0og63j6D2Nc5MhjGr2GYS1qcIbl3990Jp44UbNg8ktJEPSX5Het55sbrisUm6ZGjWv00zM8o73u/ieiCNfnIGw7XUxROrh1Xma8ho5g0xCBypgWnZsuKFR6WigHe5qYPunmXeS0F7x9gT3p9kPf+zWwaAalrZh1Qb8jZncJ2dBArG/ZEYHtufNQkFQmEqMTeCjXu864Ty1v6ZtoLVSSZb22Up7x68GjZsrX81p/IvFJYknYE4mWfyI/Y9hvcb6FwiZsCmDAqH+WTfAVlI7Whsu6wfB59B71XSAZExeX1emMQTNmX1oK9mHqaZYNJ/21UN0sgYYN6o/6Ox79H8xaCn2iK5mGpkYoxUqxGVRgKWCXbQa9EGBTkG7mkTqut/VDVQ9H+JrxvEDFK4TNdNFbykOVFbOMcYMl5YjSnstpo/6BfpiIaPl+5aSDXkbQrnoQP1C5zrG
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         nombreA est Entier256("0x23456788fffdcba9877")
         nombreB est Entier256("0xFFFFFFFFFFF")
         
         // Test PGDS
         _pgdg, u, v est Entier256
         (_pgdg,u,v) = PGCD_Etendu(nombreA, nombreB)
         
         trace(_pgdg.VersChaineHexa())
         trace(u.VersChaineHexa())
         trace(v.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : inverseModulo
    identifier : 0x2ba08bf4027a10b8
    internal_properties : BQAAAAUAAAA7fDciHSAKZzPxNGLUVbogM0N9tQ32kvm0prcwKPcCY8IaSQ5C9fEvx1/IfbooxUiuFvxEJI5t25ltY04bvpL7sIK74ezrDAhAQx0cP8Vd5f21mGl0y0VMvBJ3kUozOf9brgqjpPer2YOGBvC0Ei3AQi/iFxQXRRyqjtlNzFMfexAHL4NpYUArDFNJqMBMjsc72YQDobmR/pjfacUP9kiXsYGEluiGpg9eYcSxPHIIuEoTvo2g6GB/oqsNDO5Dfd5mMqe/+inkyUGRlodHE0BUvHhJBaDJPyRswpvtsjUoD5W+x8uUWvowhVrSEqTRiaA7KbHGNUSwym9f42XivGhKBlScW+J+gU4ESQgGox78sIvjEFYrEapjrsAZilYvd9bztF3xfVLrbDmIdVKqFAPSqFss10wXxPhuS8nT2kZFXT4CcX/YqIQHbXZ/x3AOTUrSL/ZwHB99kWzDA3hJTvK9EcUf4Y4qCOReQuY+XUu/tVDK4PyvZKgrURh851rWXg2ByRt/Xkv1tRECmMFRYpnv1FpgJSon7EIsAyeIgJvmNkLM0JsA04l03JkNj7fvPXvXtE3ECMR5lb6zAaijOBLey1l6hPGfB/iDzM4B6PkEq1leKFvnco8L/Bj2SwuHUv66rvqhpKuolVqS63gMGIOhYcFjNn00NBZZ3s5PU/pnDxX/T1b0XkG5qiHiI01URwICjBoU3t/cN00JM3hLVV/lkefZCF0sPERBMjo=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gCorps est CorpsModulaire( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         //P2 est Entier256("1" + Répète("0",28+28)) 
         //P2_Mod est Entier256 = gCorps.multiplicationModulo(P2,P2)
         //trace( P2_Mod.VersChaineHexa())
         
         
         //x est Entier256("2") 
         //x est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b915") 
         //x est Entier256("497c0fb9646881ce25a2fc68e89a129135e8715423e73fce0759ecca87d30009") 
         x est Entier256("ea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         
         inverseDex est Entier256
         y_2 est Entier256
         ChronoDébut()
         inverseDex = gCorps.inverseModulo(x)
         Trace( "Temps (ms) : " + ChronoFin())
         //y_2 = gCorps.puissanceModulo( x, gCorps.PMoins2 )
         trace(inverseDex.VersChaineHexa())
         y_2 = gCorps.multiplicationModulo(x, inverseDex)
         dbgAssertion(y_2.estEgalA1(), y_2.VersChaineHexa())
         //trace(y_2.VersChaineHexa())
         
         quotient est Entier256
         reste est Entier256
         ( quotient, reste ) = divisionEuclidienne256( x, gCorps.P )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_PGCD
    identifier : 0x2badc0020158377f
    internal_properties : BQAAAAUAAADa3amXLqXMBAyxs0KdJP1vaY8FM6PjCN8GhC/7yun+MajI5wbegR2IOPJ9fI2vLFPbsmd9YMYS58Cvv5vytqiPh9vfPSKo94V0sinRj6NOsrPEwlHsXUo67aD8sDORiYU8oZ3F+CyXiN5VRXtR+qyxBBUTn+poyK223N0UlRJR+lH/EaZAuQpW4jCrQ3jFJU0N2XTct+HDNtTjgXELryHnmIN5xfCuus/QeG3GPKNWVhcRm+/OBIRR5qdZHmP2qxXW/Hj/ziRS+xrhy5AvXHjwGZUQjdyx+Yj3pG66srsiDO/BspkInhInOip3Dhz9wCmUr4Z0CW+sJemYEHIhY0Cu/ODwkC7wDsUeezi1VYSYCWAoNFQHX2P4C2VuTgt0uvQVJJPlGnkQNlv2kxZ+Dok0HFGaoNLpMqEujFx0GTVU/j1le+Af95jaY6ge5FU2WwRovWuKDolTUnSC74dKL2Iseay8i4pET2kiIt5pZDeQUF9rS8NUpSv2zHjOS3bcCdmp/6EWpnvFfh5QoHHRKDJ1PkX9KSXIw7Aq1zwbZ4muby02S+Sx7IDlT9T4hS2FR7URc4XkK3SgySny0N4441EZbCfDiz+YvPMUjGO2VXydImG8CSq/Pn0oT2OjZqHGvEhoPhzTUtMvIsfHMK/stLvblnqtogQzRSlcwTHMwG2yJATGjOVb5bsxCp1St18qYYi0RkQCpJizjrzMcD8Sgig/mdYomcvc9Fqi01s=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         
         //PGCD_Ex(23,120)
         PGCD_ExR(40,70)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TET
    identifier : 0x2c228a9a00fa64e4
    internal_properties : BQAAAAUAAADjo9jGAvua0OJA6Qi6Wt8anLQtf6p/aP77ZZmOZDRvJXe1BPRuUIaLkSq2suxDgjuP2OIqDABDC1DlCLLQhIf+Fo3wabwbsFkdwpF8kaD9aFtjD3ZyCwCOXWeVoaa4ID1EMrMamRN5Ze5e839mZYdW+TfC78AkdJ8rCqNS1tuLNBUBkKJNOkMy/vDOps+hcHmNjibxHaCuES97oMDvEb4zI8fg40E9z6ozOodu0p2Nb26W6paNgsthEW54DKtu2Jr13bquxvW9vH213dzY2Wmwa/H77F01X//paN7GGbzpGcJHh3sd6L4sacKRWyGtWMti46F6v4ZomhBIFibxOkHnE0iUTh6fzyw2hM9HnMF8tcVPVuTr18fYCGCLdUb05QSCuJgWcpNHP55uZ1icoslxk230ehA7NKK9ldMpkdb8a9rA+CgDZ1wioxdG8SlzsFsp0gAxGHlTuNemarzGVz51kG3ca5YXHZQ79gfEg8j0W/Sh0YlIR5kJVRsDPhUvk3tpZoCww35WeyX/x5DUqf4TIl9tNHMwT92s2o7vTgcqX/MdS3xfKbjEgHAag6vCHei5UiJB2Gzc7MGd8x49jBrLS3dTbmFGMecu0VbYl4gBF7dLUYifIJDXcV2RTIm8o/wi/EvJ5u8tTEpiJGsZN5J9P8Kt5sFBXuhBTfVBIwsc7JamE6a8NShFFA2z9B1o92b+sa3NgxwU/xdzNJWMsgNE6cRY
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         Signature est SignatureEcdsa
         Signature.R.affecteAvecChaineHexa("13cfb50edf248662ca8d64195cf48b26d90f4ebc1998966d0d9ead4275c20dad")
         Signature.S.affecteAvecChaineHexa("6c2134191f22d1f5fea6848fd23524297fc88c0fb296cd7e955f01370fcda63f")
         
         
         CléPublique est Point256 // = CrytoLib.ECDSA_DériveCléPubliqueDepuisCléPrivée( CléPrivée )
         CléPublique.x.affecteAvecChaineHexa("61b0c48518491955c022d99b0c73b43d947990ae361eced90d5e0d22ce3ab4b7")
         CléPublique.y.affecteAvecChaineHexa("8aa93591f1a2818ffc6e7d575bdc1312055e188616dca470aaefd5bba9b9625e")
         
         N est un entier256
         N.affecteAvecChaineHexa("f49c9d1c8a96157ce04d5651ce201778aba934c3ff245f9c64727ecb2f6fe0ad")
         
         sERR est chaine
         bOK est un booléen 
         (bOK, sERR ) =  ECDSA_Bitcoin.VerifieSignature( N, CléPublique, Signature )
         trace(bOK)
         trace(sERR)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : priv_pub1
    identifier : 0x2dc68581035feaad
    internal_properties : BQAAAAUAAABpgPAUDoTTMAFaCcJsmDupXyp60RQrAMsf9lQ1i1xC0lYsh93uPhYx2ig3iyOWuYNrvobJwphKgqi4oh8fntW62e0w5CBKAKEoqUKycuLVCE3iuf6wdsFQzEYh+77n5yp/biR6M8oXNG7uA/qKyQ97KOFRWQ7+RNw2JgRe4/zfvtJvw6cy15ti6x52ciS896m40/AsyaLZwJqlF4ls92zjcS9g6vHVWLW9zvCykQ6xlWh53CVwCoChau+vv2RibVTp4SzhIAIcoZ6PE3SKi9ht1aujSIwlkyJYyJ7URXfFELz8y+MjC1HRoTVjT+kYNxn8UW+dQftIrgqWwq0XfHv2ZTHSeRSLsaK3V+o5bAkgkEWa1mdv3Q6soZIJxxAv5xSN6gK9THlo3YQ+4fT72zr3wfZ4WfzvlHV24VCckbPqgXTEPWB4XGNuATpMKsD/GrnQmWmzluNZmwXZgrIYlZaSiUOAcK7HS8LjUcy9KH4XQWdZLvV210vUh6q4eXkZCjgkNMJktn+x5Rx2f5JBmbuSnwoz5UsQoNqrKk+shHKh7w/x509vLUb5ppEZJMxvNGiQAyHHuVFbUsadltIbXtQfrNdKR+jjMVgYNkWqNoMcqAnOheeMiSivew99HaKzVe7cvyj7hTj7NEyjN3vSHSpUSbttk6nJ8X5v9vB36FBplFekmXY/hoOqxwZeMV0d1kRFXcSsfGFElDy7so31ZE88/uxp8fbJ78C2l2Rdb7WBaVX4F+3ek39cvCCdVXNsU/IG9guhy+EMDxYYfSI3vusXX6bK4kY=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("0x914f06164094ab80f14de57c15a5dead827a473c005837a5c137167db965a203")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // TEST si OK
         xOK est Entier256("0xc51b1777e1a45b4b3cc29d32cd89153ded2c45d6cadc019207f5aec8b451e9e9")
         yOK est Entier256("0x58f798f6ec04fbcb768aae73f4f58ecd55cbf7326d79adf7cf5bf620ed9acffe")
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_mult_2
    identifier : 0x2dc8390b03833679
    internal_properties : BQAAAAUAAADWxr/ER4u2kldLHJ/gqVIpd2d81qHFmhTAxEo3k720ztxF2yJvTuvbYovRySQo/364v9tZB0BZ960Gff+2lyInrcrDEqRBf/F4MCIZNp374Zct7Kca2Hxo3lDOVfyuIXjxzyTbYUevo718wKlBYvrLW20c9vLJzJielymNKBPz5pxelFeWdBcg3doeZdqw5n+h9Lgz3Pa2X33ssABjeD3m5d9SkTwRbHGJXdkJtKpsRAGjKB2mV9mWGoOkuzQiZYg27lbWAjfaXsr1SuIWGha86M7AtWSsOYgYmMzvEuJ4dH1ZEF8KJ4Zc5H+ayYPUaB6s2CA4kz6hZKu/hadHObPkAFsNajLSFLTvQLzzKZixWYmZ/QKaerrNUJMPinwXjUhz9e/ZzQhtidpCaKa9x+I+4EDMcFP4d1xp2iOy+kgX/scEo+qcnHdTDKABwEp9Pv7gyHkm8e6SqUM6FvVJJlFo42ngaf0XILSdmN2j77b3uAHQIeOF3jbrtYqLkd9PQNMJXD821xZWDa3Y+T30Ua/zMg4D9QBrhOPldzmXqHbpepzrz+5IpTs6TLyXyQ7GqPcx6E9sZvRdBIjyPXb1OlRPqLgd6yJVg7BV/qJGqh8UNOnp9766Q3xDPsWeYCgpB7yCXOBOlk1KP7c5yNV0YCMiDDjwp+Wqe0MOUnvJHCdcBo+O7WbiPP72Q91wBOdAeHtsnGGf09rYDciU7Td97xMqgAaEqcDfJVHiNa+RxQ==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gCorps est CorpsModulaire_pointSepc256k1 //( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         //x est Entier256("80000000000000000A00000000000000000000000000B00000000000003") 
         //x est Entier256("483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faa001") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         //soit y = x
         //y est Entier256("1222") 
         xy est entier256
         xy2 est entier256
         //xy_TEST est entier256
         
         // TEST
         //sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\DebugDLL\LibInt256.dll"
         sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\ReleaseDLL\LibInt256.dll"
         dbgAssertion(fFichierExiste(sDLL))
         ChargeDLL(sDLL)
         si ErreurDétectée ALORS
         	erreur()
         	retour
         FIN
         hModule est un entier système = API("kernel32","GetModuleHandleA","LibInt256.dll")
         pAddr est un entier système = API("kernel32","GetProcAddress",hModule,"multiplicationMudulo_sepc256k1")
         dbgAssertion(pAddr<>0)
         
         ChronoDébut()
         POUR i = 1 a 10 000
         	//API(sDLL,"multiplicationMudulo_sepc256k1", &x, &y, &xy)
         	API(pAddr, &x, &y, &xy)
         	//Trace(xy.VersChaineHexa())
         	//x = xy
         fin
         soit dureeAlgo3 = ChronoFin()
         Trace(xy.VersChaineHexa()+";"+dureeAlgo3..EnMillisecondes/10+"ms")
         //retour
         
         
         
         // nouvel algo
         ChronoDébut()
         pour i = 1 a 1000
         	 xy2 <- gCorps.multiplicationModulo(x, y)
         fin
         si pas xy2.estEgalA(xy) ALORS
         	trace("*****ERR*****")
         FIN
         soit dureeAlgo1 = ChronoFin()
         
         // ancien
         //ChronoDébut()
         //POUR i = 1 À 1000
         //	xy_TEST <- gCorps.multiplicationModulo_OLD(x, y)
         //fin
         //soit dureeAlgo2 = ChronoFin()
         
         
         //trace(x.VersChaineHexa())
         //trace(y.VersChaineHexa())
         trace(xy2.VersChaineHexa()+";"+dureeAlgo1..EnMillisecondes+"ms")
         //trace(xy_TEST.VersChaineHexa()+";"+dureeAlgo2..EnMillisecondes+"ms")
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Image1
    identifier : 0x2e10ace804c9b359
    internal_properties : BQAAAAUAAABHRyxHauuMBkJyyyr4ldl/qutBigtMbuCLWJtCIrR+97YwRwOyKk0JfNdZfVNtdpXcfLy0LuRW5tW4p0tDxUqfR3y90JgN+VBLVuwv8wYVWkiRJELZ4rOIP1V1hNRKJCGEwabVWZ8qCRcIGPis8hL/szbMRkX/Yji8Pd7NrRch0HRg3c9jQjJjxEQ3NdRNcClq3t1s5+ZmdmalWXVr0Ty6p+igiQPNjtHbhtlPerKAB0/wnwo9wk/JvggM4iYuUGh1NJjaIg7zOGDjV/u2KUhuVhGPKyxB1rzIm1fcQ3VcvQ+7QNs5oJWR5Y1CkaEl8EQZ6DFmCWzOYXq2saWTZzpuyN/XrnrUUoTs8xOIuxqAhDfjtvOXJ8qaBdz7DjLW9XT9ACFVz/C4IEE50j8O8VyqYoqiuR6zvUgv0gqxrxRnY7Pu6Ww5H8uY0GajOSWFlGa3gObfD/nwFxegYM2RIfm/P9T5lI/Ik2P8kpDNSmZhEcebngdASzO/iqaGotVnxHYnx+4Pi4/JtSmVPjNZ/19r8i79fzlatDBJm864V3KH7CJlLNM0lx7p5et95VZ+6suvNVBZ/PYwwsI6vFG++uDpagj32rHLtVYwOuoX63cIcaC+Ne28jnqwR8+R2KymdU46HCoxThwcRWkp9jMIRsGqGVBoMB/J5KJB0/3Gdfib3sx1W1uKTsxURYl4a6dp1XLFqAorqdQ9UOWKFiGGj36ZZxNVj0mRcIL/l6kpi1qbrds/GzJ6o4FBrujd2dCwsYZ9OWC9sMlbioKK5zwcjgnS6w0WM6ubd2/n4ESZs59n5+/nY8un5R3HhOE9YBOc2HBou3MM1OY7EMGy7CVRfVNZBwTMf/YWWVp0YtwxGQMbsHI8/ajbnV8F7w==
    type : 8
    code_elements :
     type_code : 8
     p_codes : []
  -
    name : ECDSA_SigneNombre_ECDSA_VérifieSignature
    identifier : 0x2c02cf800181802d
    internal_properties : BQAAAAUAAADYSUzE4DCtGI4bAYChySMNi0bWyRvs7HYpI5bzKBDG7ZQ9QBAk8kig4BQZi/oomPHD4zhPhXPYt3tnYMLJ52GalR0X26NtEj/g4IWeeKnQ2aPDcV58PZ4stm0ZVtwAZJg5kwWnakuy11YTrv7+Tb8bC32QoisYlZjd87gSmJdg9aNsLIh44xxoWqNAvhHiPPHFhsTKKW84KP5KIe9NA7hDdbSBW64y+M5+mQL6jQmZrc6ocBNkllqNMBoIE43cdHf8jELBTm9sYAvXbBXocpLgVD1A4weidd52vf3sgg/LsNZwSXu7v8uoc20JMNjJETkVQfuy8s6V331HPHaf1TylsM59FPRr5vcyTccsSaYA+j7mCiduT07qnI1zrEfw2osY48PwC/c23Ah9IqiqBKTRiq5UpWj1O9f5ZFJhX1jp4Y//HAMbB68be/rr0+WVOd9mBbLQ6r/oU0+zTSIqAxFX/4rysngfniNNi9CkJbqxGy2Y66Q+U/oc6xxUEBUd2snqWTJx4RwzEnUsXLR+I+/9D859JS9O/nZpCoL42Q5KnJ7WMSkhTX1/7BljYROkmOISN0rakoJdA4vqEDqDtpW9QN6FecEuqBgoftmaFzh6mWoIeyVheHsEiTuvM3pNRxXem7WKGPHdbcSzzxTJ0Yt5LUfr0VFeH7jJyA4vr4akW5U5QGqep/qwtN8ZkFXvQjF1kn3rY35nOwtiS9PAJTMYhayN5R3Mn0iTA3IC2YGTiqGWnJ6+RRMgnqL0VwuOWqL2B9DIy4z3XIzTapJLbA==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         //CléPrivée est Entier256("3")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature = CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         Trace("Clé publique : ")
         Trace(CléPublique.x.VersChaineHexa())
         Trace(CléPublique.y.VersChaineHexa())
         
         sERR est chaine
         ChronoDébut()
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR
    identifier : 0x2e11a4eb00e97d0e
    internal_properties : BQAAAAUAAABXqFTG+ZHqDHDj357z/OUpFVXPiwwULZqtMwnsIYMUdeoMS6zA42Uilv6bujm1cv/lvqNbpuQ5vesD+AXWqjd0jeQKP4ZE84sAJk3P2dRYnGundnXAoT5uaSRw1CeVDRkobWnRdBij9DoDJ6HpaoAph8S2IQCIJLEEg+5MQm9f7saZhXfBXlrOLW/1AoCYmndQETiy9c/X1NLHgy/Hlc/7CnfBZ/astjXGpCdIvEFcihWxH7XQvvR/VPOPqNNI4SEQeMSdXKr+nWC9cYoXNnL472X8i7az+ZbpjNAQVv3gGJ3J2seuVE5tyDbJDIjz0tHyF2riP0Xoc1d8diyR+e5CAojcQmSGAi+ws3Lvtc62RTpUpBo1NkxltKoRKV4LLbl8GfYEIUzNc2w7hkGh/ZDNgz6NVyGU51qHmRd35Ey/y4jCPoe+kk2LyDVplzBd6iUPYp7BzUwA99ljFv5BWnklENl3oiH/1HLju7WYS1K/we54XnpjcNCbgYn9WkXvBNZYUAixGepWj1elM6wEFw0CmZKQkLRrUEmr9P5fAt3IZojWdmUyOJnlrQIvOux1bsrxcJzFHA/5/o0T+qjyJffderNfb1sUADd4MLe6QZCBVkW4DdZDogm0y/stvP+epLDIFuz5DGVN/kpVVAJmumFDTzfJWF+Kjm7BdnRHS/xtkcP7v9RqgFBGH2KVcgKJiDHPuTNXGZfEHz19875hAeusVK8DhJ4PIQkdXtY=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	//( "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141" )
         
         
         //x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         x		est Entier256("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e") 
         //x		est Entier256(3)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         //nSur3 est Entier256("0x55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0") 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // n/4 - 1
         //nPlus1Sur4   est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // (n+1)/4 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d904F") 
         //n_8   est Entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c828") // n/8
         //n_16  est Entier256("0x0fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414'") // n/16
         
         // calcul racine cubique de X 
         Trace(x.VersChaineHexa())
         racineCaree_x est un Entier256 = _RacineCaree_SHANK(x)
         Trace("y = racine(x) =" )
         trace(racineCaree_x.VersChaineHexa())
         //
         Trace("y^2 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCaree_x,racineCaree_x )
         trace(yy.VersChaineHexa())
         ////Trace("y^3 =" )
         //yyyy est un Entier256 =  corps.multiplicationModulo(yy, racineCubique_x )
         //Trace(yyyy.VersChaineHexa())
         
         //divisionEuclidienne256()
         //inverseModulo
         
         
         
         procédure interne _RacineCaree_SHANK( nombre entier256  ) : entier256
         	
         	// p = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         	trace(corps.P.VersChaineHexa())
         	// p-1 = 2^s * t
         	// p−1 = 2^6 * x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	// s = 6
         	// t = 0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	t			est entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905")		// = (p-1) / 64
         	tplus1Sur2	est entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c83")	// = (t+1)/2
         	
         	// au "hasard". ne dois pas être un résidu quadratique
         	M			est entier256("0x40bf3e95c2d24abb0dc4a579b08c0d3f52ef113a8484f33e83de2d1fef487b48")	
         	
         	
         	B  est entier256 =  corps.puissanceModulo( nombre, t)
         	_X est entier256 =  corps.puissanceModulo( nombre, tplus1Sur2)
         	Y  est entier256 =  corps.puissanceModulo( M, t)
         	R  est entier    =  5 // s-1
         	
         	//@TEst
         	_32 est Entier256(32)
         	_yy est un entier256 = corps.puissanceModulo( Y, _32)
         	trace(_yy.VersChaineHexa())
         	
         	tantque R>=1
         		
         	  // calcul de B^(2^(R-1))
         	   _2PuissanceRMoins1 est entier sans signe sur 8 octets = Puissance(2, R-1)
         	   trace(_2PuissanceRMoins1)
         	   _2PuissanceRMoins1_256 est entier256(_2PuissanceRMoins1)
         	   B2R1 est entier256 =  corps.puissanceModulo( B, _2PuissanceRMoins1_256)	
         	   
         	   //@Test
         		_2PuissanceR	est entier256( _2PuissanceRMoins1*2 )
         //		B2R				est entier256	=  corps.puissanceModulo( B, _2PuissanceR)	
         		B2R				est entier256	=  corps.carremodulo( B2R1 )	
         		trace("R="+R+":"+_2PuissanceR.val0+":"+B2R.VersChaineHexa() )
         		Multitâche(-1)
         		dbgAssertion(B2R.estEgalA1())
         		
         	   
         	   // si c'est 1 
         	   si B2R1.estEgalA1() ALORS
            	
         	   		// Y = Y^2
         	   		Y =  corps.carréModulo(Y)
         	  sinon
         	  	    // B = B*Y^2
         	   		B = corps.multiplicationModulo( B,  corps.carréModulo(Y) )
         	   		// X= XY 
         	   		_X  = corps.multiplicationModulo( _X, Y )
         	   		// Y =Y^2
         	   		Y =  corps.carréModulo(Y)
         	   		
         	   fin
         	   R--
         	FIN
         	
         	renvoyer _X
         FIN
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP
    identifier : 0x2e12d85900ed5c65
    internal_properties : BQAAAAUAAACHg1uc+0WPRq5sRoBX4ExtngUXzNHsgwGc5W6lwVnsJdvz1F4U15pjPbvbhLSVnO8JBsAropuozyJQhA35tx5LxaHYP1uDDB248elJm/vHMUkMYpaoO62yhbcwxJNjvIChly2C35El7OQBlRY/S7asaWpmIgfa8y0jR+xnRdWBXBm+X9CSV7xICsZRCA34GVI2z3o2Gdd90koDWZnAShG/YNrGDzUnNizf8Y+uR5DUGb90imMf5zGuDqQypQ5solzOIWZhG0VmkzP1n/vCFj9UycnjC6uI9zNmvoOXPHNjPGBXGW8zNz5B56PyLwnQQkv3+vDHjfUO39x37zfXvAHmG4Hp9LHEL/oPGoJAL9/xh/Ko0mUuDpP3zakzqTXnYAKpEaDuenQYg20m9t88AXU08oz94e6KPuYgoCu/55YARrtGfsPpwq4XP4JVm6mFZT602uotxEzD5/AIamjSxmSW/fGn5oZ7pxpwym2exOaWrmPYcApirvP7cIaxpACTtdlzRDitmiZLYaSIA5pHZezXouwyBrUbs38ytWZZgQ1JmZ/s4Ndp4B61siGNSgsTq6H09Fj9v1srDS0BgzmYUq0Lhkqs/PMNOsSU7uhDp8mhKjMBqqkLgZmB1Qt4bVNn9GTSTbGt4x20Prskesbv1OhwJHG3GCw+iyCU39LZaIIAOqhPy87ZrkP0oCEz5OnjgRSaiXlJ8nM5aWAux3isp+/a1LtN9g3p1EqXVqE+
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         
         // nombre d'odre 3.
         // ie tel que  beta^3 = 1 mod 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //beta  	est Entier256("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         // ie tel que  beta^3 = 1 mod 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         
         // Racine carrée de 3:
         //racineDe3      est Entier256("0x3538be51af024152640d9ba6e4fa9c5ce6ed7102d28e789bcc8921c18a34cf78")
         //// Racine carrée de -3:
         racineDeMoins3 est Entier256("a6c75a9980b861c14a4c38051024c8b4245c45d44102ccf1be052cf836477ae5")
         //// racine de X^2 + X + 1 = 0 :
         //// (1 - racineDeMoins3) / 2:
         //// 0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf
         _moins1 est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
         _1 est Entier256(1)
         _2 est Entier256(2)
         //_1_MoinsRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3)
         _moins1_PlusRacineCaréeDe3 est Entier256 = corps.additionModulo(_moins1, racineDeMoins3 )
         //_moins1_PlusRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3 )
         //trace( "-1-sqrt(-3)   = " + _1_MoinsRacineCaréeDe3.VersChaineHexa())
         _L est Entier256 = corps.divisionModulo( _moins1_PlusRacineCaréeDe3 ,  _2 )
         trace( "-1-sqrt(-3)/2 = " + _L.VersChaineHexa())
         //Trace( corps.multiplicationModulo( _L, _2).VersChaineHexa() )
         
         // racine de X^2 + X + 1 = 0 ( modulo xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 )
         //_Racine est Entier256("ac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_Racine est Entier256= _L //("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf")
         x est Entier256 = corps.additionModulo( corps.carréModulo(_Racine), _Racine )
         x =  corps.additionModulo(x, _1)
         dbgAssertion(x.estEgalAZero())
         //trace("X^2 + X + 1     = " + x.VersChaineHexa())
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // _Racine^2 marche ausi ?
         // _Racine = CrytoLib.corpsECC.multiplicationModulo(_Racine,_Racine)
         
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         trace("Map(P) : " )
         trace(mapP.x.VersChaineHexa())
         trace(mapP.y.VersChaineHexa())
         //moinsX est Entier256 = CrytoLib.corpsECC.négationModulo( mapP.x )
         //Trace(moinsX.VersChaineHexa())
         KP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( P, _Racine )
         Trace(" K*P : k = "+ _Racine.VersChaineHexa()  )
         Trace(KP.x.VersChaineHexa())
         Trace(KP.y.VersChaineHexa())
         
         
         // (x, y) => (βx, y) 
         procédure interne _map( _p est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x =  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         	pointRésultat.y = _p.y
         	renvoyer pointRésultat
         FIN
         
         PROCÉDURE INTERNE _map2( _p est Point256 ) : Point256
         	RENVOYER _map(_map( _p))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR_3
    identifier : 0x2e142a0400e15cc3
    internal_properties : BQAAAAUAAABEW0M1cMZrp+MiwFWO3bqivM7IwLPz/KvucPsVCR0m5WwAW9oyFYUQ7MLlBNGjXC9vIjv5BGI9Ox2b6usazM3wIyRymWWaxzY4Xlcdg8fGTAFGbEQTVV5Q2CYGY/371YhUs9r1U1NLvNdi/3zxOwdUhFUZked8KI/6vIu+yMhHFJTVzY2/ZOKAq8czEJYStK/WIQiQ672j9hCLUbmvw2mbNCtVMVRSgt/sYF3uMPcG2tMR7+M6wGwB0hcBxn8Kq+ni1LQTKvhqa06Rs2Br2MBEJaWMeUB9edADdD5ajp+aIIsBNlWUavI/DvI3hqjhuN2oP+JApSs01W1AqKodb3CiUCBczDJ01v2ys2DlWbCQ3dRo8OibrdVqWU8EPLminDrnlnHjGJ8auJG4Yayk/JPStotA5lCn5FP0zipal4OGPMdneZ6V1YrEOboM0uuEjSqq3xkYZCfVzNI8XbUoTQyaA17SwQjKyWOY5Hy32r0KTnktqUGqixXg6hIkcdx6Mydj0fdMdCFvKBz6FodfrvTb4L9Ld9MeDXrY6SGyzUQl4eGxY04bnQRMhO0cxe2trmpwfKId5Fem1yNODgdyOW70BC/tgrkcT86l6AoNvbFp1NKYq6n7IQp/9XML8hMYM8uB1fut8kcq248if/0JGfg0dmTkd/6tm3fOZ3PuopfAZgpUHmfNd1nP5Ktcqfm05yJq9I6kxqKpgpjEfjeKHNYpD0KC0YOWkvgMTcU=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsECC	//( "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         //x		est Entier256("2") 
         //x		est Entier256(2)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         //nSur3 est Entier256("0x55555555555555555555555555555555555555555555555555555554fffffeba") 
         Trace(x.VersChaineHexa())
         _9 est Entier256(9)
         _1sur9 est Entier256 = corps.inverseModulo(_9)
         Trace("1/9 = " )
         Trace(_1sur9.VersChaineHexa())
         // calcul racine cubique de X 
         _3		est Entier256(9)
         _1sur3	est Entier256	= corps.inverseModulo(_3)
         
         racine6eme_x est un Entier256 = corps.puissanceModulo(x, _1sur9)
         Trace(racine6eme_x.VersChaineHexa())
         racineCubique_x2 est un Entier256 = corps.cubeModulo( racine6eme_x)
         Trace("x^(1/9) ^3 =" )
         Trace(racineCubique_x2.VersChaineHexa())
         //
         racineCubique_x est un Entier256 = corps.puissanceModulo(x, _1sur3)
         Trace("x^(1/3) =" )
         trace(racineCubique_x.VersChaineHexa())
         //
         Trace("y^3 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,racineCubique_x )
         yyy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,yy )
         trace(yyy.VersChaineHexa())
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP2
    identifier : 0x2e155cf800e36084
    internal_properties : BQAAAAUAAAAiVG6f7tUxHA5MJGNs9WgpUtqQqLoSWsOSFoXBnhvfhuEW3koqNJzpZ39JWy6nKPKWLELlINVo317zPKSJyaLq2pVBGLG3UoOMPS9L5ISiXIxCBiws3xPsyaMmnN21XChFQ9kQW+mxUsThWwaVeRoAhZbmgGdPv6F3w2CbEQFtgLXqC6z+c7hsvnL13GkUQzLKC0raQePthr6PheUMNiEHRL4mo0V7jjCzDVt6yyxMUQNY4l/f28nqIsA2uXLgohwKZc7d4yk2r/dBQ8/GYtek9W3jxytsLwea2o9bqA9TfMRDwXObe0bt08feO610Gou7rkgLXbnOW4grw/Or+NG+57VpaPEgj+4bDkb0I8sBh/b0EnmuSmElN3N5H89t5ozTzx5kPGo+uV8opB0+D1veTArr9xBolEzCSoE1MVzOUPVMLKkTUKwliZQj4VP760CWWGiTrmL5TWLS4N60lCIYT2el3Ih5HZD6hNOEpgT0yN2GJti8HEFpamDHmtKxo8tF+k77FKzh9w4S2fBZ81K5VAJ4RLdhqWVcf0yn8+1ZsSdc6Ncx0C6lqtE14uM78yHkPJh1PyO6+sCMKlD9/X5ib58bK2xyT9Nt/7F00r5EV/6sOzISghpwxsR7chgys2XVUDoemjYdP/G3C6xEiz1t8nFOiYf7LFM7btFVU/uz11KNs869QswTaRqzBhYnAVf5yjKVLcpd2dj/cd42DTC8Nxoul2RSRT2aKfTj
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         _P est Entier256("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F")
         
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         //P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // Test que 2 P = map(P) - map(map(P)) ?
         
         // on doit avoir _map(P) = _Racine * P
         mapP    est Point256 = _mapFrobenius(P)
         dbgAssertion(  CrytoLib.courbeBtc.pointEstSurLaCourbe(mapP))
         mapP_2  est Point256 = _mapFrobeniusCarré(P)
         moinsMapP_2  est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP_2)
         moinsMapP    est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP)
         
         _2_MoinsP est entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f")
         _T_fois_mapP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( mapP_2 , _2_MoinsP )
         
         _P_  est Point256 =  CrytoLib.courbeBtc.pointMoinsPoint( mapP_2, _T_fois_mapP )
         
         // ---1
         trace("  Map(P) - Map(Map(P))   : " )
         trace(_P_.x.VersChaineHexa())
         trace(_P_.y.VersChaineHexa())
         ///---2
         //_2 est Entier256(2)
         _1 est Entier256(1)
         
         
         
         _1P  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePointGenérateur( _1 )
         Trace(" P :"  )
         Trace(_1P.x.VersChaineHexa())
         Trace(_1P.y.VersChaineHexa())
         
         
         // (x, y) => (x^2, y^2) 
         procédure interne _mapFrobenius( _Pt est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x = CrytoLib.corpsECC.puissanceModulo(  _Pt.x, _P )
         	pointRésultat.y = CrytoLib.corpsECC.puissanceModulo(  _Pt.y, _P )
         	renvoyer pointRésultat
         FIN
         
         // (x, y) => (x^4, y^4) 
         PROCÉDURE INTERNE _mapFrobeniusCarré( _Pt est Point256 ) : Point256
         	RENVOYER _mapFrobenius(_mapFrobenius(_Pt))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K2
    identifier : 0x2e1826970129ec26
    internal_properties : BQAAAAUAAADmOeXS+sT7DeUOslv2hwAKomIYYlFQYhlY/rxJRwsgk8rqkQjvcieSenTnDteRDuWVILnr0mi3xV/tTBXgQj+G6VJww3NgD90XNaN7UDEYKyFn3Cn0MiIwt7/eLkYqjEYO2lj4ZjNWX9WI/ORolSA9cP+b2A5418wPTLE5F2Mab8cQS4kQ9PsxzI4CK2/+9ICRoJH+FgxJyN61h9PF3IxkVxN71L9DaZk0N2Ya7SQHO1PmoqYzps+DVxd/QgVzbzn/jfHTtnsaga3kyie6qS9K7zTFZBZa4uLCZV5VkYoK/lrEzQ29dNm46TX43aMf01z/EqU91rz30MBtZd1CnGEF7wfnudMNsbyBQME8WtGac/GtR+BTiXkWTTO6JlMG6FY7OLUlwgOmytfWAe4WaG8OYj3s6JI7oJXiJLIcw05ZBQoC4DkmafbZ9AvdJJj1CnXitXHZnfohILBy7mWe7f60WzLEJID4QieUFB6M/Gt5qrpl+7bnSclCZmrnjhEBLMPBSaLe7F3rahNSSrFxjEOtf8c0E5ol3FCMHaMcfIKhqy99jULvuHfqzyxVxFQujUmwyVXcvZmidwIitwghDGbeqZR04sQd0tVGtMbNKBNWnhJNq2mnqhjS3jMg7YNsNtaW26STqhPOB5siWx1pjczILjTQX16Zn3s6Vwf2umP8oso0ZqsBtouFFqWWN1N6mVAgIrz2cH+MYZvTl7ATYdMkhDGbfqgvMRZu72c=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         
         nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         // trouve x,t,r tels que
         // s*N - t*_Racine = r et r < nMax128Bit
         soit (s,t,r,i) = PGCD_Etendu_StopMax(N, _Lambda, nMax128Bit)
         
         // vérifie que  S*A + T*B = R 
         _SA		est Entier512	= multiplication256x256_512(s,N)
         _TB		est Entier512	= multiplication256x256_512(t,_Lambda)
         _Tmp	est Entier256 
         // r = SA + TB  : 
         bSPositif est un booléen = estpair(i)
         SI bSPositif ALORS
         	//  avec T négatif  =>
         	//  R = SA - TB 
         	_Tmp = soustraction( _SA.valPoidsFaible, _TB.valPoidsFaible  ) 
         SINON
         	//  avec S négatif  =>
         	//  R = - SA + TB 		
         	_Tmp = soustraction( _TB.valPoidsFaible , _SA.valPoidsFaible ) 
         FIN
         trace(_Tmp.VersChaineHexa())
         
         
         Trace("************Trouve :")
         trace("s:"+s.VersChaineHexa())
         trace(t.VersChaineHexa())
         trace(r.VersChaineHexa())
         
         // R-1:
         _0_256 est Entier256
         soit (s0,t0,r0,i0) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i-1)
         dbgAssertion((i0=i-1))
         // R+2
         soit (s2,t2,r2,i2) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i+1)
         dbgAssertion((i2=i+1))
         
         Trace("************ -1  :")
         Trace("s0:"+s0.VersChaineHexa())
         Trace("t0:"+t0.VersChaineHexa())
         Trace("r0:"+r0.VersChaineHexa())
         
         Trace("************ +1  :")
         Trace(s2.VersChaineHexa())
         Trace(t2.VersChaineHexa())
         Trace(r2.VersChaineHexa())
         
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         // vecteurs tels que  X + Y*_Lamda = 0 modulo N
         V1_X est Entier256  = r2
         V1_Y est Entier256  = t2
         V2_X est Entier256	= r
         V2_Y est Entier256	= t//corps.négationModulo(t)
         //_Tmp est entier256
         _Tmp = _F(V1_X, V1_Y )
         Trace(_Tmp.VersChaineHexa())
         _Tmp = _F(V2_X, V2_Y )
         Trace(_Tmp.VersChaineHexa())
         Trace("****** ")
         Trace("X1 (v1.x) = " +V1_X.VersChaineHexa())
         Trace("X2 (v2.x) = " +V2_X.VersChaineHexa())
         Trace("Y1 (v1.x) = " +V1_Y.VersChaineHexa())
         Trace("Y2 (v2.x) = " +V2_Y.VersChaineHexa())
         
         X1Y2 est un entier512 = multiplication256x256_512(V1_X,V2_Y)
         X2Y1 est un entier512 = multiplication256x256_512(V2_X,V1_Y)
         _Delta est Entier256 = soustraction( X2Y1.valPoidsFaible, X1Y2.valPoidsFaible )  
         Trace("_Delta = " + _Delta.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         
         //  = K * Y1 / Delta
         //   =K * Y2 / Delta
         _B1 est Entier256("0x085428ac856e542bb711d2bb9e408611")
         
         K_Y2 est Entier512 = multiplication256x256_512(K,V2_Y)
         
         
         
         _DeltaLow est entier256 = _Delta
         K_Y2.multitpliePar2puissance128()
         _DeltaLow.diviseParUnePuissanceDe2(128)
         reste est Entier256
         trace(K_Y2.valPoidsFort.VersChaineHexa())
         trace(_DeltaLow.VersChaineHexa())
         
         (_B1,reste) = divisionEuclidienne256(K_Y2.valPoidsFort, _DeltaLow  )
         trace("_B1:" + _B1.VersChaineHexa())
          
         
         _B2 est Entier256("0x2b6a121d1ef84b440996421265b4e26d")
         K_Y1 est Entier512 = multiplication256x256_512(K,V1_Y)
         K_Y1.multitpliePar2puissance128()
         (_B2,reste) = divisionEuclidienne256(K_Y1.valPoidsFort, _DeltaLow  )
         Trace("_B2:" + _B2.VersChaineHexa())
         
         
         
         // v = b1*V1 + b*V2
         VX1 est Entier512 = multiplication256x256_512( _B1, V1_X )
         VX2 est Entier512 = multiplication256x256_512( _B2, V2_X )
         
         YY1	est Entier512	= multiplication256x256_512( _B1, V1_Y )
         VY2	est Entier512	= multiplication256x256_512( _B2, V2_Y )
         
         VX est Entier256 = soustraction( VX2.valPoidsFaible, VX1.valPoidsFaible )
         trace(VX.VersChaineHexa())
         K_VX est Entier256 = soustraction( K, VX)
         
         Trace("K-VX=" + K_VX.VersChaineHexa())
         
         VY est Entier256 = soustraction( VY2.valPoidsFaible, YY1.valPoidsFaible )
         Trace("VY=  " +VY.VersChaineHexa())
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K3
    identifier : 0x2e19a33400edabb1
    internal_properties : BQAAAAUAAABso1HT/TuCvQbKf1UL9ix2dn4254nzBL/Wm6+Nd8DqT9cC5RPTlMdPOdtMJXlgX/O3Hz8Yvcll7qX7JuZeNJTRykEZNTWomRQ7upUjtCpF51Lb8DsyfOIJEg+8JHoFWhQesArCUrqKVVtAo6m2elaMo15CmE0d9dw7cpzt4Zeucwl4A9GDuKmmWNL+DZ4PAzdaJcf+GoyThnWnMIm+j0PqFTYjQ/gNarDp3s4N3ZfPE3Pqgt9mXh2m2GiDuR0YLrQmjqa19g8beYO6t8GF9gQ7k40wU7xKOoyXK0n3FPqCYydlD203WD96Dje7IfDdHG9eeuRgo9Zy+EcR7aWQM+M9m9GYssgcsh/p4D907K17N6K257XKB+1f4/sG7fs5IQMjaoyr/7D+aerfN2WtBrgFUOwZ3j1x3zWiEfsY53D+v53tv2exKm4qGhlKJF4Q8CbUeP6dyt6wJKGdvftZallY/iGNTtVfpvhOzEhIXyKlzoR/uzaeIuwF2Hr8LmHQymcMi/PnCHhqoUw0kt52ZK6MFuZcNRkHnqSs1c0VLYndc8IXILJA+z7D4QSf57J8ljorBV4cLLZTXAhQR/KURIfaGmxGHUBA8r0IpiGF5J6ifeaKoK6Zh3gzDNBRy46SPE+mDIHYhDiNm3hZ3YM3TFAXzJr96WejLe8/FrcUW/1b5BhRtHAsVNDsRC6Ujb2dvIXkre/z1YXX8hFT2wmXnyFEz7Yjjea7Tdw=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_0_256 est Entier256
         //nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         CalculeCoefConstantEuclide( _Lambda )
         retour
         
         // renvoie x + L*y mod N
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         // cas a pb
         //K.val0	=0x8C9709EE2C00DB85
         //K.val1	=0xED340B2E31901BFD 
         //K.val2	=0x5DCE66E6049C6A08
         //K.val3	=0x7B5AAE134D8FDABF
         // cas a pb 2
         K.val0	=0xCD20AFA495B7BF2B	
         K.val1	=0xC1605B209D915713	 
         K.val2	=0x732947073A8716AF	
         K.val3	=0xF5CDDA00DF9C6B90	
         
         
         // renvoie V1,V2,signeV1,signeV2 tels que
         // V1 + V2*R = K ( modulo N)
         // avec V1 et V2 "petits" = sur ~128 bits 
         // signeV1 et signeV2 valent +1 ou -1
         procédure interne _calcVecteurOpimise( _k est Entier256 )  : (Entier256,Entier256, entier,entier)  
         
         	// constantes calculée par utilPourOptim.CalculeCoefConstantEuclide() :
         	_moinsDelta est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141") // X2*Y1 -X1*Y2
         	V1_X        est Entier256("0x03086d221a7d46bcde86c90e49284eb15")
         	moinsV1_Y   est Entier256("0x0e4437ed6010e88286f547fa90abfe4c3")
         	V2_X        est Entier256("0x00e5e9bd2461792dd1aca54cdd1d8b2a6")
         	moinsV2_Y   est Entier256("0x58a1bcb25ae2b9cc084678edad30447a7")
         	
         	// B2,B2 : coefficients tels que "(K,0) - (B1*V1 + B2*V2)" soit sur ~128 bits
          	_B1      est Entier256 // ex : "0x276e6bcbe7ba30a0b216a78e91107e13"
         	_moinsB2 est Entier256 // ex : "0x0658d53831aae2574117afb315cc83da"
         	
         	moinsK_Y2 est Entier512 = multiplication256x256_512( _k, moinsV2_Y)	
         	moinsK_Y1 est Entier512 = multiplication256x256_512( _k, moinsV1_Y)
         		
         	trace("K1*Y2="+moinsK_Y2.VersChaineHexa())		
         	trace(moinsK_Y2.valPoidsFort.VersChaineHexa())		
         	trace("delta="+_moinsDelta.VersChaineHexa())		
         	// calcul de B1 =  K*Y1 / _Delta
         	//	         B2 = -K*Y2 / _DeltaZ
         	/// comme delta = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 ~= 2^256, 
         	//  on approxime la division par un décalage de 256 bits vers la droite.
         	_B1 	 = moinsK_Y2.valPoidsFort
         	_moinsB2 = moinsK_Y1.valPoidsFort
         	
         	//moinsK_Y2_haut est un entier512 = moinsK_Y2
         //	_DeltaLow.multiplieParUnePuissanceDe2(128)
              //moinsK_Y2_haut.multitpliePar2puissance128()
         //     Trace("moinsK_Y2_haut=" + moinsK_Y2_haut.VersChaineHexa())	
         	//moinsK_Y1.multitpliePar2puissance128()
         	// calcul de la division entière : donne un nombre de 128 bits si K est sur 256 bits
         //	reste est Entier256
         	//soit (     b1,reste) = divisionEuclidienne256(   moinsK_Y2_haut.valPoidsFort, _moinsDelta  )
         	//_B1.multiplieParUnePuissanceDe2(128)
         	//'0x1a08ee06c6ba89c9f5498001ad0306fdd4382c84d8d3008c7fd6305c0da8a294'
         	// idem B2
         	//(     _B2,reste) = divisionEuclidienne256(moinsK_Y1.valPoidsFort, _DeltaLow  )
         	//_B2.multiplieParUnePuissanceDe2(128)
         //	trace("b1: "+ b1.VersChaineHexa())
         	trace("_B1: "+ _B1.VersChaineHexa())
         	trace("_B2:-"+ _moinsB2.VersChaineHexa())
         	
         	// v = B1*V1 + B2*V2
         	// B1*V1
         	B1V1X  	    est Entier512	= multiplication256x256_512( _B1,      V1_X      )
         	moinsB1VY1	est Entier512	= multiplication256x256_512( _B1,      moinsV1_Y )
         	// B2*V2
         	moinsB2V2X	est Entier512	= multiplication256x256_512( _moinsB2, V2_X      )
         	B2V2Y	    est Entier512	= multiplication256x256_512( _moinsB2, moinsV2_Y )
         //	dbgAssertion(B1V1X.valPoidsFort.estEgalAZero())
         //	dbgAssertion(moinsB1VY1.valPoidsFort.estEgalAZero())
         //	dbgAssertion(moinsB2V2X.valPoidsFort.estEgalAZero())
         //	dbgAssertion(B2V2Y.valPoidsFort.estEgalAZero())
         	
         	// vx     = b1*v1.x + b2*v2.x
         	VX512	est Entier512	 = soustraction512(  B1V1X,   moinsB2V2X )
         	dbgAssertion(VX512.valPoidsFort.estEgalAZero())
         //	VX	est Entier256		  = corps.soustractionModulo(  B1V1X.valPoidsFaible,   moinsB2V2X.valPoidsFaible )
         	VX	est Entier256		  = VX512.valPoidsFaible
         	Trace(" B1V1X= "  +  B1V1X   .VersChaineHexa())
         	
         	Trace(" B2V2X=-"  +  moinsB2V2X   .VersChaineHexa())
         	Trace(" VX ="  + VX	.VersChaineHexa())
         	
         	// vy     = b1*v1.y + b2*v2.y
         	//B1VY1_256 est Entier256 = corps.négationModulo(moinsB1VY1.valPoidsFaible)
         	VY est Entier256         = corps.soustractionModulo(  B2V2Y.valPoidsFaible,  moinsB1VY1.valPoidsFaible   )
         	//moinsVY est Entier256    = addition(  moinsB1VY1.valPoidsFaible,  moinsB2V2X.valPoidsFaible ) 
         	Trace(" VY ="  +VY.VersChaineHexa())
         	//moinsVX est Entier256    = corps.négationModulo(VX)
         	moinsVY est Entier256    = corps.négationModulo(VY)
         		
         	// k - vx = K - (b2*v2.x - b1*v1.x)
         	KmoinsVX est Entier256 = corps.soustractionModulo( _k, VX)
         	//Trace("K-VX ="  + KmoinsVX.VersChaineHexa())
         	//Trace(" -VY ="  + moinsVY.VersChaineHexa())
         	
         	//_0_256_ est entier256
         	signeX est entier = 1
         	signeY est entier = 1
         	VX_Resultat	est Entier256 = KmoinsVX; // corps.additionModulo(     B1V1X.valPoidsFaible , B2V2X.valPoidsFaible ) 
         	VY_Resultat	est Entier256 = moinsVY; //corps.soustractionModulo( B1V1Y.valPoidsFaible , B2V2Y.valPoidsFaible ) 
         	// si VX_Test<0
         	si VX_Resultat.bit(255)=1 ALORS
         		// x' = -x
         		VX_Resultat = corps.négationModulo( VX_Resultat ) 
         		signeX  = -1
         	FIN
         		// si VX_Test<0
         	SI VY_Resultat.bit(255)=1 ALORS
         		// y' = -y
         		VY_Resultat	= corps.négationModulo( VY_Resultat ) 
         		signeY	= -1
         	FIN	
         	
         	// renvoie le vecteur (Lamda-(b1*v1+b2*v2))
         	renvoyer ( VX_Resultat, VY_Resultat, signeX, signeY )
         fin
         
         soit (k1,k2,signek1,signek2) = _calcVecteurOpimise(K)
         
         // on vérifie que le résultat a bien les propriétés attendues
         k1AvecSigne est entier256 = (signek1 = -1) ?  corps.négationModulo(k1) sinon k1
         k2AvecSigne est entier256 = (signek2 = -1) ?  corps.négationModulo(k2) sinon k2
         _Tmp est Entier256
         _Tmp = _F(k1AvecSigne, k2AvecSigne )
         dbgAssertion( _Tmp.estEgalA(K) ,"nombre pas OK")
         // k1 et k2 doivent êtres "petits"
         dbgAssertion( k1AvecSigne.val3 = 0)
         dbgAssertion( k1AvecSigne.val2 < 0x1000)
         dbgAssertion( k2AvecSigne.val3 = 0)
         dbgAssertion( k2AvecSigne.val2 < 0x1000)
         //sinonK
         //	_Tmp =  corps.négationModulo( _FMoins(k1, k2 ) )
         //fin
         Trace("-------------------------------------------------------------")
         Trace("k1:    =" + k1.VersChaineHexa()) 
         Trace("k2:    =" + k2.VersChaineHexa()) 
         Trace("k1+k2*L=" +_Tmp.VersChaineHexa())
         Trace("K=      " + K.VersChaineHexa())
         
         
         // N = générateur du groupe des points  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         // P = ordre de la courbe               = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         
         // un nombre d'odre 3.
         // ie tel que :  beta^3 = 1 modulo N
         // NB : tout nombre d'ordre 3 est OK.
         
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         // R tel que map(P) = R*P
         // racine du polynome : X^2 + X + 1 = 0 ( modulo P )
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         dbgAssertion(_Lambda.estEgalA(_Racine))
         
         	// (x, y) => (βx, y) 
         	PROCÉDURE INTERNE _map( _p est Point256 ) : Point256
         		pointRésultat est Point256 
         		pointRésultat.x	=  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         		pointRésultat.y	= _p.y
         		RENVOYER pointRésultat
         	FIN
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         // gestion du cas ou les coefficients sont négatifs
         si signek1 = -1 ALORS
         	// P = -P
         	P = CrytoLib.courbeBtc.pointNégation(P)
         FIN
         SI signek2 = -1 ALORS
         	// P = -P
         	mapP = CrytoLib.courbeBtc.pointNégation(mapP)
         FIN
         bSigneOpose est un booléen = signek1<>signek2
         //ChronoDébut()
         // calcul optimisé
         //P1_optim		est Point256	=  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P,       k1   )
         //P2_optim		est Point256	=  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( mapP,    k2  )
         
         //KfoisP_optim	est Point256	= CrytoLib.courbeBtc.pointPlusPoint(P1_optim, P2_optim )  
         //KfoisP_optim	est Point256	= CrytoLib.courbeBtc._multiplicationScalaire2PointJacobi(P, k1, k2, bSigneOpose )  
         //
         //trace(chronofin())
         //Trace("KfoisP_optim=")
         //Trace(KfoisP_optim.x.VersChaineHexa())
         //Trace(KfoisP_optim.y.VersChaineHexa())
         //
         //// calcul standard de "KP"
         //ChronoDébut()
         //KfoisP_defaut  est Point256 =  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P, K )
         //Trace(ChronoFin())
         //Trace("KfoisP_defaut=")
         //Trace(KfoisP_defaut.x.VersChaineHexa())
         //Trace(KfoisP_defaut.y.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K4
    identifier : 0x2e1ad517009b85a6
    internal_properties : BQAAAAUAAAAanFAvcvoIy80Yow4bRB3mY9UtOZjqwhvYSMFl/kOJYJPY4ML2Wq4ESjoEF8A0EuCWRbabRoZ4CxTDkTeKw8Y9yiXfqfY8NGFec9fCDDY12rn0S1VZKnoYAo0PgfPsd7/P1MbFxbZuiym+wUPVrCM93DZGxO3Nn9a/PPXcPf5vSQ5JX9CSbZ77+en5GHVK3NUSmZSBWPztvR3WoZ5PdNjiFggeST1ALH4tdfjp3BQcJQkVEynHaX5Q91tsXLj/VfKkGJkosrZpWDBiubndhZ4eWh0SsAOFzUph9QvsVNGbFP+BpztiNJ3h0XPhHueym2ofdAS3iaijkZNirpaGQwnUt+O/BKIjPSLeB0pbuXkKoUSshn2IaMyukd9LnXX2V9mY81KmUWvmvCjxMcS/PsaL+ecgSlXrYdH9/FF1st+39WCjff9jOGoGTj2Lq/lc2030Tt/6DFpTK31kRhyqLpAdMsFNJB4gQbnLLQRFVtVpjzXoxEBz5eD22pHzWCRP8Zo2V+5F37/yF2WzCBOYpdCcbnKkJWGqVYw+sT7T3m66uPaZhl8xWgZIkIcrJAiIsJnjP4RRZjrekqDsiiKNffgQrQ1XoWDgQ9/y/PsMaOiQgrJkIqHyPvYsha3xGaHfAXmJRN6BNxEPj4pwCNnJljZsI+YhUCwebQJoC3q+AqwEXus+FB3IB8V4PE1qabMyHnKSJy1EirVCPPe+XN/T8NMhiAtm5RTm109oYbzb
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         
         // Test de multiplication par K (nombre "au hasard")
         //K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         K est Entier256
         // cas a pb
         K.val0=0xCD20AFA495B7BF2B	
         K.val1=0xC1605B209D915713	 
         K.val2=0x732947073A8716AF	
         K.val3=0xF5CDDA00DF9C6B90	
         
         //Point = 2*G , pour test
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         ChronoDébut()
         
         KfoisP_optimJ	est Point256_3D	= CrytoLib.courbeBtc.multiplicationScalairePoint_OptimiseJacobi(P,  K )  
         KfoisP_optim	est Point256	= CrytoLib.courbeBtc._JacobiVersPoint( KfoisP_optimJ )
         
         trace(chronofin())
         Trace("KfoisP_optim=")
         Trace(KfoisP_optim.x.VersChaineHexa())
         Trace(KfoisP_optim.y.VersChaineHexa())
         
         // calcul standard de "KP"
         ChronoDébut()
         PJ est Point256_3D
         PJ.VersJacobi(P)
         KfoisP_defaut  est Point256_3D =  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( PJ, K )
         Trace(ChronoFin())
         Trace("KfoisP_defaut=")
         Trace(KfoisP_defaut.x.VersChaineHexa())
         Trace(KfoisP_defaut.y.VersChaineHexa())
         Trace(KfoisP_defaut.z.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_VérifieSignature
    identifier : 0x2e1b496d009cf43f
    internal_properties : BQAAAAUAAADBXQbOT5V+ckbrsiCOWXkbGca2NEyxrCEn7eTtJ/R53mzli6uYKdmoKRhksYJUx5scsAPAzn1tDG1dihJV0oZdQdEKDegYjL7sPBAJmtuoTgLbIhTATcQlUs+ISvMuX5cSMy67eBWuEPgXvgnh/6F84TODERj0qAs50OFaPkvWBaNugq1+/vX9TTNeu+CabcCdCns5srm+ugqDJTc/golY6cu4WEqR0/H9lj9W0dR2rRAx21xQmlTCqDFtlz/n8uMpSk1R6wn0RJmm9VJn5y4JX/EAjXWSuye5JdD9ykRIjQnLAUlDyyit7BqK4c1tEtbSU2wqD17A4Yb/QS+fk7w0o6uBl9MPjhICE+GWG+vPGSaXWDBwMpAWiCsoksFWBWWqLuUtX1cviOiJUUQZJFwdfQcK0tfhWZOHdwJGDu+p7XDzRagQU9nAHNfqBLjmlC+HUbc+K+V2OIfP2ZdB97dzGPRAs830PpN7DRQrTZ1dt7pLAfmThZ4krzUEa4nq6M4261noJ5EwlONHhr1swHlq1+3bjXBgDNbHYocMLxSCLy+2B/g4CBVVhpWOxRr1RLTghVEcHGeDidgjiDJdnbpMW1kzfbyM62fLbXvGKMiiMQhS2Z7G1lI4nEo3pgrefE50z9e4Kj5F1n2U/euuJSO5LEt3QEq5TjQG6E8i1GTKx+UTCYjkpL4QGAFRGijgYrEnQnL6Me4Qon5hwDFQQsr0mrMJsrPhbpPhXWyB9PltiA+JYf1DlWkxBNZVfg==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         
         // signature
         signature est SignatureEcdsa
         signature.R.affecteAvecChaineHexa("381d97bbc2cfbe448bf256bdb5ff9cd6fdbe27726ee4d603a4f92fa541fa7518")
         signature.S.affecteAvecChaineHexa("040e51ef10775569752ce8258dd5c382e1a39ae6530ba1044a58bed5f8ca9d55")
         // clé pub
         CléPublique est Point256 //= CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         CléPublique.x.affecteAvecChaineHexa("5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         CléPublique.y.affecteAvecChaineHexa("b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         // valeur signée
         N est Entier256("12345678")
         
         sERR est chaine
         Trace("Calcul...")
         ChronoDébut()
         bOK est un booléen =  VerifieSignature( N, CléPublique, signature )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST
    identifier : 0x2e294ec300e50462
    internal_properties : BQAAAAUAAADoUUI2BdwK05IPFLWwf0oG3WAZaWahz7sL3TMIcJvqCdcoTvVrhQASwzn/hmQ15nHU3Cike0gK1/4i4percgGcYqh9VOPmSgqtBwsXmmeNgtkpjMh0s6fT7uU0ryZMuL5P5AQPFyiy88QVKLBklhxoWOg0dfrjhnFJr8Kzfvk5m9uwqNvhrGCZwBDabXhayWEcXdwAr+unffiFv1cFYXks1mqwHTZLVaZvivLhx/ZZlw0FV/OclKI10AUjZ7pbI+VPioRE4gUSLBpIWBji7PsaQhJjaylyxTtba/pcco6SFVwQ5lpdC7wS76QSQ+O7+dTQOuVDA9bcfWn2J7kXDdlWQzvf7JBuvOihrCepMXlTR52XEGl3AnmN4QW9RDZNsNLmUAkeQZbOaVukDoRBWZfiAREMh3N0UjqK2vfihKhi3JAd1TFeIkKL+2a7akYz7/yXtz+3hcIVmfKKWnX7cA4ElrSKzmfXM1biPFX3H2IcMKIBuay7vrsTDLJ38S85YxO+6c93kY6ZTxDcOa0633xvr3PBpjghpSFaabBOo295J2aO3714FzAekxK509AahQPSGf9FokfnnZQnlhF4g6Ty0kI0G+3cn0ujVY23+6CmLYWtRMiTgmSa4EZxHW0Ko5VETfFsExOdDKs8Ez0jYCa6w5b9vcplgNkNGNVxszbyR5cagxXAkulscPFDdxkA/44QWD5xLUC17Uh5xdVqH98GE27TdheM
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         //x	est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         //y	est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         
         x	est Entier256("0xc51b1777e1a45b4b3cc29d32cd89153ded2c45d6cadc019207f5aec8b451e9e9")
         y	est Entier256("0x58f798f6ec04fbcb768aae73f4f58ecd55cbf7326d79adf7cf5bf620ed9acffe")
         
         CrytoLib	est ECDSA_BTC
         //corps		est CorpsModulaire dynamique	= CrytoLib.corps
         Trace( x.VersChaineHexa( ))
         Trace( y.VersChaineHexa( ))
         
         P est Point256 = CrytoLib.xVersCléPublique( x , vrai)	
         trace("Résultat : ")
         trace( P.x.VersChaineHexa( ))
         trace( P.y.VersChaineHexa( ))
         P2 est Point256 = CrytoLib.xVersCléPublique( x , faux)	
         Trace("Résultat : ")
         Trace( P2.x.VersChaineHexa( ))
         Trace( P2.y.VersChaineHexa( ))
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR_4
    identifier : 0x2e2b94a2009aeb6c
    internal_properties : BQAAAAUAAAAVbFxMH00oD2g6K8c4GnoApVQm6R7BGZPNV/aFw31jj4hH/wR0X9TFNfMz3LvXVWqHY3ZjIiusm24RbNnYxqtvY880ZUGH+5BgMqfkIbvyFQRi6CSLoaFdPPU2xctk9yxTfcEMUjLLUBAecm7aUgsSpI7kRqdgXv09oaKVTv0ANVsUAaNSRRLc5gC5tNq+t0C1TzHzWx2pZZ+QvmfWhVsuTGF4lH0PWEv0U/FjDQbQxSvkNEg1Pzo1of7rHQPOPWefJ80caRdALdVJBbTASBR3jpigs2CEVXPbNSOFwmz3ty8JI8+XLsHUkzHfq9h0G1CkL2KQ/cyfLrikjydL2Lz/ua3+dLUv8z8WOsSnr6+64J6VPk6KTmlLcQAMp995F/Pz3txOTiEA5oZijG0p9JVNAr0n8hNQl2yzZUSuYeyhNFQ6UJb770HnCpxINjP82bmat50DywzUfb91FDG2ZG5uSbPibC11+awNxAU1ODPRONayCYkI83XnAq7zekkqyEB1HxR0L5KiDWyIrdpWyrtq/k4hCFFQj0jAghd1nEz5wuW7RO+6utAGC3XKIx0jiwsMnA+IIGRjS9v+7eEz2XmVnPOAAU1e+g7gDp1G8g9FQ/ji8j9JD8APXCP4md6M2SpJKzBoST73S+RKXNh/30CBuhxXGp3EoGW/we4G39EIWwvBIWzmuEwrP8X/vD6OGgMF1Qw6DNd33argODuyYkkH3HL4qfngQDcd
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsECC	//( "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         //x		est Entier256("2") 
         //x		est Entier256(2)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         nMoins1Sur6 est Entier256("0x2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa7fffff5E") // p-1/6
         //Trace(x.VersChaineHexa())
         //_9 est Entier256(9)
         //_1sur9 est Entier256 = corps.inverseModulo(_9)
         //Trace("1/9 = " )
         //Trace(_1sur9.VersChaineHexa())
         //// calcul racine cubique de X 
         //_3		est Entier256(9)
         //_1sur3	est Entier256	= corps.inverseModulo(_3)
         
         //racine6eme_x est un Entier256 = corps.puissanceModulo(x, _1sur9)
         //Trace(racine6eme_x.VersChaineHexa())
         //racineCubique_x2 est un Entier256 = corps.puissanceModulo(  x, nMoins1Sur6 )
         //Trace("x^(1/9) ^3 =" )
         //Trace(racineCubique_x2.VersChaineHexa())
         //
         Trace("x =" )
         Trace( x.VersChaineHexa() )
         racineCubique_x est un Entier256 = corps.puissanceModulo(x, nMoins1Sur6)
         Trace("y= x^(1/3) =" )
         trace(racineCubique_x.VersChaineHexa())
         //
         Trace("y^3 =" )
         //yy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,racineCubique_x )
         yyy  est un Entier256 =  corps.cubeModulo(racineCubique_x )
         trace(yyy.VersChaineHexa())
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Table_pré_calculée
    identifier : 0x2e3d0f5700e10776
    internal_properties : BQAAAAUAAABrfVGc2/SkPYumE7/x5ps1a+lxgXk9+dJ6znkIx4jxFtwTCP3O7QFkF6wM0OOjpKAyCeScRDFvzL530OKhQoNHkZBPJmyywW7z4uFYd+IWIl9YvvYA7lj0wbidJEyTjg5L5CW23lYxr/DxvOBb/yPsS3udzYGo17ndQ/a8dj/XJGP/9f37if9uvehE7zviDxp6VmFxb/bLpYJF8Oqes5gECAr6IRPeYMrEd0avNkePDvpsTf4NjYrkMK1+7VXRZjurCeQMnA4XC/7p/AP5OIPpxBJfsE4GkxRVykCBlOvguKjtjp+DhyCsYJlmoty4ZEXmu4Cl3wT8uh6FUpNNwfWAq+R/OdkOkPU7Zu765bwAW8+rTPCB+41ZpMfI73JHohvsA2dh/nZ0JvdrOXO5OaMjj2AWlnBWNhuYd8Dn7hz27dz8CQSzshB8Vb+Qk07lp0+r/iprbsINyUYoKZQPmp6PUmQEUUB2POvNwywOY0oqEeB28b3+VCnmkJV+IBUZx0KWAguMVJpplnql1m7YedU7PMN2cHUle73urj+eEbgGn46MMcAVruZCMJDyggKHw+g5Pm/WktyWFy8XsosDyoVCveSL60d7HL+U4RVtzof5dKF26jF2oGBg3gyqUgtMvSia5gU4iQ0IJG5GEY4mR9+A0YM+iLT5BVsy8COY1PU7wo0CP177TakK467O0iWA8FQAn84BcCwSsZkjlXoznZuuulbHSt/Foi5C7i+521hwjYkyVW91H2g=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         corps est CorpsModulaire_ordreCourbeSepc256k1
         
         // Multiples de (256^N) mod P
         //          0..      0xFF
         //      0x100..     0x1FF
         //     0x10000..  0x100FF
         //   0x1000000..0x10000FF
         // ..
         /// 0w
         pow256 est un entier256() // Multiples de (256^N) 
         	
         pour i = 0 a 31
         	nombre est Entier256 = pow256
         	Trace(nombre.VersChaineHexa())
         	//res est Entier256 = corps.multiplicationModulo( nombre,  )
         	pour n=0 a 255
         		//res est Entier256 = corps.multiplicationModulo_PourContstructeur()
         	
         		// nombre++
         		nombre = additionAvecUn( nombre ) 
         	fin
         	//puissance de 2^8 suivante
         	si pow256.estEgalAZero() alors
         		pow256.affecteAvecEntierPositif(256)
         	sinon
         		pow256.multipliePar256()
         	FIN
         FIN
        type : 18
      -
        type : 161
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BQAAAAUAAABd4biPtdLQOwfUFiqrit8H4xfGqKyz9t6VLxCUnNZRQiLPVs82PZNE+UVdKRzjizyeuKyRur85gNMUfqplpmtNDnQWQla9zo+GH9+1EfUJ6w17Dn/egD/gv+Hhywk8c9unIdzEp7EHgaAqD28w7Agveg4u19PBcKGZtQ==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BQAAAAUAAABqPQh6HC8RxAVkp2SqPYLuZrfVhd+1KX4lx22hIT8uqEpE6yP7Sbc2rmVqdmL816EWzXOkEe9ijOtYwchZKAfpy3B1cNqhpJgsnbUs
 code_elements :
  internal_properties : BQAAAAUAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCEDURE MaFenêtre()
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 2
   -
     code : |1+
      
      
     type : 40
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     code : |1+
      
      
     type : 180
   -
     type : 230
     enabled : false
  procedures :
   -
     name : PGCD_Ex
     procedure_id : 1994461367820771349
     type_code : 14
     code : |1+
      
      PROCEDURE PGCD_Ex( nA entier, nB entier)
      
      dbgAssertion(nB > nA )
      
      r, u, v   sont des entiers
      r_,u_,v_ sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      u  = 1
      v  = 0
      u_ = 0
      v_ = 1
      
      tantque r_ <> 0
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp,vTemp sont des entiers
          rTemp = r;
          uTemp = u;
          vTemp = v;
          
          r =r_
          u =u_
          v =v_ 
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	u_Avant est entier = u_
       	v_Avant est entier = v_
      	u_ = uTemp - quotient * u_
      	v_ = vTemp - quotient * v_
      	//trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " + u_Avant )
      	trace( complete(r_+"",4," ") + " = " + Complète(uTemp+"",4," ") + " + " + quotient + " * " + u_Avant )
      fin
      
     type : 458752
   -
     name : PGCD_ExR
     procedure_id : 1994470541871085041
     type_code : 14
     code : |1+
      // version résursive
      PROCEDURE PGCD_ExR( nA entier, nB entier, u=1, u_ =0 )
      
      //dbgAssertion(nB > nA )
      
      r   sont des entiers
      r_  sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      
      
      si  r_ = 0 ALORS
      	renvoyer ( r, r_ ,  u, u_) 
      
      FIN
      
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp sont des entiers
          rTemp = r;
          uTemp = u;
          r	  = r_
          u     = u_
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	uPourTrace est entier = u_
      	u_ = uTemp - quotient * u_
      	trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " +uPourTrace )
      	// récursion
      	( r, r_ ,  u, u_) = PGCD_ExR( r, r_,u,u_)
      	
      renvoyer  ( r, r_ ,  u, u_)
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAAwjDLmDSZ0H1P68nJIeNfqR9EvRjU/K+sVcM1T6rhVNr+VTV1mZ/rmoweYbFDZUhBGcv8UsxlDxVCOnb2U/SQOvlGWzNby3/w/V+ppSymxv+Vh
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1b7cfed701529005
  internal_properties : BQAAAAUAAAAa2Zm8J9E/zh+/WIrVvz1fER/So3PB0gjQuxc1xKQVWY4ZDm5lfg==
custom_note :
 internal_properties : BQAAAAUAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
rad :
 internal_properties : BQAAAAUAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
