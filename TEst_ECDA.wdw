#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : TEst_ECDA
 major_version : 25
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : TEst_ECDA
 identifier : 0x2b7cfedd00d3a562
 internal_properties : BQAAAAUAAACxHeUIxbZNvvEi196KSYVfgKITg89gyzCvyEIeuuHEH0c1FyBDd7UCXGpUHONBGjWYzNq138gyr2XMYBQH/jCbSb8o08CtbXdmFdbYRb9d39KxuXAGlophEQPGa5Ee/xqqzY08bFXeq50NsCK4yMQMDhpoDFep2crWxtTV4d62rxxmFD3XWU+I5ksQWjS1cWtQawRqmx0aU2tlT/TdULG5ECWCIcf4v99Wcgn13Gtgw1mtluYC42LmfFSwdzud/z7zHGgfKKQbuc2dx0fMr/moPNRj1GmUXDEXaya98fq7OBdOEV9jQPcLkrCnrYmvHbMkJFod5Nh+19tMyiW5e5SYQ6M4nuYk/4cOvrduQk6gFQ97udkAWTQdc9/foDhyGa77HOiRG7QOdvmKYdVi4tIqSlFrzYBIruf0j85FzXUtQwF2RRAEPqQvd+gdoaEquvJQ+uih7XX8s1JKU0yX641bM9eZnuo8fRjoxHWoJPZnZNzNS1Xzc+4gvGEDuuli/sharV8pTQ8yRqyFaHcGJ13zoQeItBRFQ1vDT3j93/uBa7vPELknYBa6FZwt7V4dJ0De25XgVuMBGkaQ0eAiyO6IDL95BVqBaSyTfdJ0yGSDkiw5HPLBH8aosMc2PsYG+/Pz9Pje3oK+2MWAoTJ+bLkLjnMzPnBEpS02nC+pCi6cdQlxevZXx+exobtWrFyE9sohTsytDmQLSydH/jM3SnN1a/Qwg5aWgvfAZXRE3mBFDrSO+naaRlr0C677WwUZUkAGlKWYwq3MCN5UlaeYIoqgRDIBA0857UXLe9loERkGmjTGWSA8d/RSidr6D4shQKIgwfBhQ4SYsj2Qa3Q=
 controls :
  -
    name : priv_pub
    identifier : 0x2b7cfee80119d106
    internal_properties : BQAAAAUAAACHQuEPQKLAj6wl7rmU6qluMSsq+1G5sMQFpR+6P/13LxAmqY9W0Osjpy4A4S2vvpOmzsmowBBY5e1huU31ks79mFha5smcUdtLG8b/meUTXnNqRU5RgAb+6z6Djg40CvVzzKhLKo4iSakh+/21XKJbDLFMx9ADbKFstqNEOODUxkUHe91HDNGjbup9piR5tauAJ215f6hiHx1FhvhZRuqVDLqJi1/3SB3Z8n54hoJmUFUiB8t5KBvR4qLL1y+BpAei934kUCAhgj9fHkC6RDK0zr7TP31SS67PDkQ8bdufMg/TJvGlrdpLw2XlH4UItz/7B7RKO67kx4MSJ1lZniwfWrRhRB20qh4gjzlq0aB2K265aJFiJZ2Uv5yBmAtgw5cabU8wizOXYDAZ5djR7ApPv91uEJXbj1nZKUxiQF3VUZTnOZjiifPqwi1IunRaDp2189Ee13F8LoObFed9W9tX/IzoB3kAtBllF37tLY1dv6LnLcmfqbjOhbNGa4NgZAriX0X6HaNeUi3hGPNa8lmKt9XLny6iOIKxwmO44fKgAfFbnFPXqSJAu3IT9Ekmi72LwOrTIUwrvScxTLN8/nUIQPGNSl9tHNoGnww1rmOUdQ9ep+1FYNmSbQ1WpbUTS+kJqYEaeie5YsHoadS3w55Kz6zmLTGSuz7cl43cK2l1rmP2vT2c/pmsec27U6fBqwSjLAIjBCXOhE7na8BQEbYumgtfEelcG4FRyvTTa43MV99J2YJm6hU/baL3Z4Ly4ORFJsGM1ktBZJrJeyA=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         //ClePrivee est Entier256("75be5c76cde3bcb877a523f618c839cb6ac58269880288734acee9473a180744")
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // 5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b
         xOK est Entier256("0x5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         //xOK est Entier256("0xFD0F6EBE95AAFBED3C431047BB3D9DEA4324B8D6CDBC16D35AE30AC22E9548")
         yOK est Entier256("0xb809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         
         
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
         // b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : FIn1
    identifier : 0x2b8390ec00c21e47
    internal_properties : BQAAAAUAAADPt/DxLo32krAsXyQ87IVy8qTdk65ZhCR9XZUqhYYpoZVEPomYEu0pC1T0EF6d+G29HpRwJnrZMfp3rvgyPtW4zBN6fXm0RmevnDc2aN48lOpEIzg7Mp9GqATxgTOs8MJOldP1MaG6KlGkqk38rQScL0lFpEoCnrcJQi9CGNwFWhOCF/qsCUNoo3shctez2MhlpF3Lq7pcDa+frGoevHaJbdCH27RaWr+lY7UCOrclg5AuzWR8QemcY45fp9wcUGn7tkb+P057BKK1zjYfpwgFOSc8qg6QH+lUefego60LA6yNSAC9FQV0n6W7bB0lXCt4W7PXwsX1AGz3bZQKfQydcUlSX945o4ONo7g3II82EF7GagmtJErMyWwpieJ9R0oNMfQaS/yZIsHh0BNfm1b0ntBBD41At/FETVlvwCwLrF3whI3ITh2kmy2bo+ijMKq0IorXF1b6PLwNpsrpck2mmT3NxNdBFtti81/wvzhVMx0mjAw5aPyCroX9fEunGOd1tuRRlZbe4oTx1Waar4mRIGKajhZtQqwAksUIR+9eqU0rWN0Wl2lJzQ1HdkIo9wudIjKz9msFi1WJU1NBWpRLDJwOBl1+ooz219CHsvl2CI6q1NNBULjPzRE5kA3bkehOhE/RfhtJeEKCIKuZ22ZRa4rhPnmVqkT5talpAlhhEGrhwEspPv9KOcj43Qa9yD+RpNrSiBXLXKR2Kbbdf0yEZbhE
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         ferme()
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_P_P
    identifier : 0x2b8a9bb300c5193a
    internal_properties : BQAAAAUAAABlpFITPPHcl1nkmNvJDP4IxITE1apInTyNijZmqAw2azu+6Zcf+A12DI6jl7t3c4sNJGE6xXZhNjFJw7tDoq42aCcp8PsuN9L0Ju+DC6BHW8UKlDi6cJysELsjMpU7NuRh7wC3FnbRFWROE+oZHHeXFEi8SGvIgs3BgB0bqI+19lmGj3Es2pkcEkDSFIKnb5umzbSoY5th3qb6/706szr1lmEvLR66eV8XKbMysmKQtnGdNwDjRnwxo8Id/FMsg+axpYjrR2N9GIvZXZKMz1BfLtMgY6IZX3zBYANp/wdhTrq9sq1Rac4SNW901uNEYC+06PtSAdLYXozi1Ezrs7qB1OqfYrxP4XcgqBZfSW9Ad30+vVZFE4keSACV3oujDMOh1/KBXSkeOibr6Kh4DxnvpkpLTN85NL0DP72mW9CCTw3mMDqoowYMftXN+lMJkVtminJ4+63BBEGl1K0AIuDlja9rIQEASeGhHylVuLyCKQU4fvPTpXmy0RMV3UA523Tb4koAZ+HtIglhsbcP25js5nayIQRc7UjhChG3wmgowRA00c+9+xvIB2rOHKRdHn1A05MoUI1xVtIevIWtbbY4AeF/xcY2hPFzmFg0JAtEGssIRyKgTVXTNpIW2tqQFkWgfm+ZzCBZ80LjV1HVxrb19lSVQYdbvaMjCrkKoZPPvlAJjDjcnBC8FH5kxVUR2pme3w/DBVWLOm3/C2HnYlwmEVhd063EVOU=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire <- CrytoLib.corpsECC
         
          _1 est un entier256(1)
          
         X   est Fraction256(3) // 0
         Y   est Fraction256(4) // 0
         X.numérateur   = corps.X_to_monX( X.numérateur  )
         Y.numérateur   = corps.X_to_monX( Y.numérateur  )
         X.dénominateur = corps.X_to_monX( _1 )
         Y.dénominateur = corps.X_to_monX( _1 )
         
         moinsX est Fraction256 = corps.négationFractionModulo_mon( X )
         Z est Fraction256 = corps.multiplicationFractionModulo_mon( X, moinsX)
         
         trace(Z.numérateur.VersChaineHexa())
         trace(Z.dénominateur.VersChaineHexa())
         Z.numérateur   = corps.monX_to_X( Z.numérateur )
         Z.dénominateur = corps.monX_to_X( Z.dénominateur )
         trace("--")
         Trace(Z.numérateur.VersChaineHexa())
         Trace(Z.dénominateur.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_mon
    identifier : 0x2b8aa07700c7b785
    internal_properties : BQAAAAUAAAC6HZtMh04hckbRM2LARfmDP4dvYIF7uFFY7ZSZsyl1qk5ZTJIo3WaJLUcGBmL86taws9ihsof+Pa4e7kKyyyGBj5pE0g+0AOn+OXDlm9wPgcGePUeJN1cIQC5mXcyWyR6TlMAQYjANswPm438IDgjJ0BymKS4t2421JLPtqgnxQANoY0W2ML+MMrhwighamZuu+bBMP5dVYgq2b+kuJ45dZkU7yfpmBUObZcNWPobcdumZW9Sf8iCtj8aF0EfwN35BmYz3q//xVBcNBW7Yk2Tv1vf8/8b1GzBl9HN1Q4M9nkppRnmlbRpGKUPEsteQzI/0vIeO1YYEIkheXCAX/z6RfB7Lhnh7fatcNN4L9cuEp3XaYaKbfevsPgavxCGZDsV/9cxHGwvokHQpgt4mTfPpvGDFwtU7LrvBfWe0md58aeM86vBm9fC67EOn6LH3yxV8oKRGIX/rOo9zJhN+EFJfMxX1h6/iY8dfTTNLpjpkM6su2Bm558Nof8FH427XLc5xOJy+pYtfgI/nM3XtWbr2zCSEP/pW/0bnepr28eFL3K8LWpZ6ZsBR/hFn+ztikfCXH5z2yViC9zOihjwvM4gJFjKsPByI4YS6MMlyPScv89I4GEbXm4PZWu4uhI1pRzNceIyLVwUoJFf4cDBEa7Pcc8keyAb8gLDYT2qZ4HjgacE6yQsHgf+ZfWdh+BB6e8C/gLi6nP5Oa56gqERC0/Wh9r02CmQNm6o=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire <- CrytoLib.corpsECC
         
          //_1 est un entier256(1)
          
         X   est Fraction256(12) // 0
         Y   est Fraction256(2) // 0
         mon_X est Fraction256 = corps.X_to_monX( X  )
         mon_Y est Fraction256 = corps.X_to_monX( Y  )
         
         //Z est Fraction256 = corps.multiplicationFractionModulo_mon( X, Y)
         mon_demiX est Fraction256 = corps.divisionFractionModulo_mon( mon_X, mon_Y)
         //mon_demiX.affecteAvecChaineHexa("6")
         mon_demiX =  corps.X_to_monX( mon_demiX  )
         trace(mon_demiX.VersChaineTrace_DBG())
         demiX est Fraction256 = corps.monX_to_X( mon_demiX )
         Trace(demiX.VersChaineTrace_DBG())
         
         mon_36 est Fraction256 = corps.multiplicationFractionModulo_mon( mon_demiX, mon_demiX )
         Trace( corps.monX_to_X(mon_36). VersEntier256(corps).VersChaineHexa())
         
         mon_18 est Fraction256 = corps.additionFractionModulo_mon( mon_X, mon_demiX )
         Trace(mon_18.VersChaineTrace_DBG())
         Trace(mon_18.VersEntier256(corps).VersChaineHexa())
         
         mon_12 est Fraction256 = corps.soustractionFractionModulo_mon( mon_18, mon_demiX )
         Trace(mon_12.VersChaineTrace_DBG())
         Trace(mon_12.VersEntier256(corps).VersChaineHexa())
         mon_12 = corps.soustractionFractionModulo_mon( mon_12, mon_demiX )
         Trace(mon_12.VersChaineTrace_DBG())
         Trace(mon_12.VersEntier256(corps).VersChaineHexa())
         
         //demiX_horsmon est Fraction256 = corps.monX_to_X( demiX )
         //Trace(demiX_horsmon.VersChaineTrace_DBG())
         //trace(demiX_horsmon.VersEntier256(corps).VersChaineHexa())
         //trace(demiX.VersEntier256(corps).VersChaineHexa())
         //moinsDemiX est Fraction256 = corps.négationFractionModulo_mon( moinsDemiX )
         //Z est Fraction256 = corps.additionFractionModulo_mon( X, demiX) OK
         //monZ est Fraction256 = corps.multiplicationFractionModulo_mon( demiX, demiX)
         //Z est Fraction256 = corps.monX_to_X(monZ)
         //Trace(Z.VersChaineTrace_DBG())
         //Zi est Entier256 = Z.VersEntier256(corps)
         //Trace(Zi.VersChaineHexa())
         ////Trace(Z.VersEntier256().versChaineHexa())
         //
         ////trace(Z.numérateur.VersChaineHexa())
         ////trace(Z.dénominateur.VersChaineHexa())
         //
         //Z.numérateur   = corps.monX_to_X( Z.numérateur   )
         //Z.dénominateur = corps.monX_to_X( Z.dénominateur )
         //trace("--")
         //Trace(Z.VersChaineTrace_DBG())
         //Z2 est Entier256 = Z.VersEntier256(corps)
         //Trace(Z2.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_64
    identifier : 0x2b8e1e360145dde5
    internal_properties : BQAAAAUAAAB5hVmOkVIqsbXHU7hbhN2mIxVtOXnRCZorj0OdcCLA9/6953+3UfXm4jLMOAG6HR9n1z/G+X6t4DHKB4Xg0JtDd/g2tT5DkXjCdPjKO2JDp0nz1cCRGKT0AnH/n2W4oYOJID5opT/FDKfjs/VoRzBqpQ3UqJe/EMGhTfXGZwLe6mfr/bgX2DPkRjPIzF+QiblkIrre03HtMuTB+WvoksPRSnxkV3sN8jShP5e8n8Ame1WanM/hScnKtP5aT5KYiDJ0/zzx3SMCL8UTk83Getmm528x29GGc69QHM/lKA9Fbi7dT691+Ua1Vb32HRkQ9I3RzLYH/+v6C+71jzFnpA88WT+HdO/Sa8JtRDbuzz+TybBmACVIKOxOYnZ8bvBMgy8kyAFzIVWVXrLL18yPLlTdzZP2hm0LEz19VWgYHk/Pl+oBwwx8b0+2HBfWYHyiTF93eY/+9xEMXnmR18GpjysnXAjkP/mAIIXpu4KH40cl/0ITWXcJx4gORfMeBQfs4MZuh13+/cP8gB3JBN9Kki/UkSf/79AIxA43yPCh8s6YeFZYAZqylgWVRANIE6jHbmJuF8EiFpn6ZLD4jTP4cPtSiIJ+XUIKQ5PP+MFKnwJpiABTDFbWl3YxC7zrmKYEagD2hY1UCOj2Fhi+1iXxbtyOFRhl7hByCY5mAViCzOJOJFE4fo/yHSXqOJl2NwPK2LBAjYXaopWyTEcuzE9jQAPR6gkFZHWB+jCJWKM8
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         PROCÉDURE interne _multiplication64x64_128( nombreA entier sans signe SUR 8 octet, nombreB Entier sans signe sur 8 octet  ) : Entier256
         
         	//@TEST
         	Résultat  est Entier256 
         	nA est un numérique   (38,0) = nombreA
         	nB est un numérique   (38,0) = nombreB
         	n64 est un numérique  (38,0) = 0x100000000
         	n64 = n64 * n64
         	nAB est un numérique  (38,0)  = nA
         	nAB = nAB *  nombreB
         	sRes est chaine =  NumériqueVersChaîne(nAB,"32X")
         	nMax64 est un entier sur 8 octets sans signe  = 0xFFFFFFFFFFFFFFFF
         	nMax64_num est un numérique (38,0) = nMax64
         	//buf est un buffer sur 16
         	Transfert(&Résultat.val0,&nAB,8)
         	Transfert(&Résultat.val1,&nAB+8,8)
         	//Résultat.val0 =  ETBinaire(nMax64, nAB ) //arithmetique._2_Puissance64) //, 	arithmetique._2_Puissance64 )
         	dbgAssertion( Résultat.val0 = HexaVersEntier(droite(sRes,16)) )
         	//si taille(sRes)>16 alors
         	dbgAssertion( Résultat.val1 = HexaVersEntier(gauche(sRes,Taille(sRes)- 16) ))
         	//fin
         
         	renvoyer Résultat //(Résultat.val0, Résultat.val1)
         fin
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est un entier sur 8 octets sans signe = 1 //0xFFFFFFFFFFFFFFFF   //0xE6B52D16CF375361
         V2 est un entier sur 8 octets sans signe = 0xFFFFFFFFFFFFFFFE // 0xFFFFFFFFFFFFFFFF 
         
         ResOK est Entier256(  "0xcfea0d3dc68974efebb6f377ccd60ac1" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = _multiplication64x64_128( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Génration_Table_Point_2_N_mon
    identifier : 0x2b8f620400c6b0a3
    internal_properties : BQAAAAUAAAAyD9iLcOju/gViWzO/p0dkgGhnxGb+Nv+9EFGu1K12BDO5XahhoncVXCkDlxjEfjRf0awJCHTzyUQaat4NSmbMch50j6RhecNX1/KCLYguu4D/Y93wo6OWj6yCuwgncs7avBhKtd6I4a83tvBnkwW8CtwlgwFJlBNFiqJ/ombGDEnWoF1D6iUrsyUaGO2Cbn0SzVNR5NAXOswZH+gEWO4EhKn9GR4nzqBiu7QHMPa3BndCARQH2B9XC5pFHndYE1khvp64K4RHGOEdryZJM31f/R47b89M6xNQcTLGmYKmY/dd4qgwDj7LrdM5TKTieISI15mQG8Shv2LVeupm68/sRPJiLVcxbvkc/jZkyKjTZ9d087LTrb8JDf46LYG1Kj4E+Js4WhTVXCw8u6WsQfea1t9s2/KG5aV7nnDrZyZEqulLdZX3vCNs/gLIh9U5cWLSlQkhGj6OpqGOO8YY8ACCF+AWtqDZCiFNJgC+DO46urGnZbzOAi4O3VDkxtQf72/ryTVF5pqWUCcw6kadH2x/PLVNNrkfTHDbG4fDv7TST9HSjzEDRVe1Vjqu3qqFlKr10nrgdz4W0NB2OEocYP1hkwI0VEoy4Y0rZuHaWmTg3zEIgqw7VzUfu3mdpWPVAC4SIW1de8XO+xWTm8AsC7aKoJi/r/9siF3Dt0/1oL7JWQM/6x6zLXHJT98jOUnf27W4+NIQd78Ba9kw93oI6dkIuSMBx2lmlplz1hSkI4Yy8ECBz2hoMPXDHu5iB7STbhbHAw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire dynamique <- CrytoLib.corpsECC
         ecc   est CourbeElliptique_secp256k1 dynamique <- CrytoLib.courbeBtc
         
         //GN est PointFraction256 //= CrytoLib.courbeBtc.pointGen
         //_1 est Entier256
         //_1.affecteAvecEntierPositif(1)
         //mon_résultat   est PointFraction256 // 0
         //mon_résultat.x.dénominateur = corps.X_to_monX( _1 )
         //mon_résultat.y.dénominateur = corps.X_to_monX( _1 )
         POUR i = 0 a 255
         	valeurKPow2I   est PointFraction256  =  ecc.TabPointPow2PreCalculé[i+1]
         	// vers mon 
         	mon_résultatvaleurKPow2I   est PointFraction256 
         	mon_résultatvaleurKPow2I.x   = corps.X_to_monX( valeurKPow2I.x )
         	mon_résultatvaleurKPow2I.y   = corps.X_to_monX( valeurKPow2I.y )
         
         	trace("  " + mon_résultatvaleurKPow2I.x.VersEntier256(corps).VersChaineHexa() + " " +	
         		  	     mon_résultatvaleurKPow2I.y.VersEntier256(corps).VersChaineHexa())		
         	Multitâche(-1)
         FIN
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_SigneNombre
    identifier : 0x2b9198d600a6d698
    internal_properties : BQAAAAUAAADnGOQOFPQ/Af8+7N9dz2mlmR0aTtLlc5j1fVn7rq24nZaFtDW5Iwi5amY7+whpm9zQ1ZIYujneNGwodw5rZRqw6MsOXt2nOv2vrFK6KS1s840fSvrXnPO77V7+uSUADwnLJ76pGgxFOMcysOvKoFNwprd1kReHinyuMj7zSNMFeU7sx/M0HLSSwbzaKzp+NPkx2H3RUkGdv6WT3YMWG8+73MTRcRf4c3QYJUBuno52bnF3Hw6ssxkG566h3gdODzMHuZnT6poHKJkvY0BU7ZOIy62uj10k+e/W4U5fKAUi0fn0xcT5RwcO+5xHucGT9SGVY2FFuxLuxFNdvxHkUlYiTZi+YRPYvxS5sztWk28LQghdNPQwhAi+WIocIIDR5/KZLv43XcB50xzxkdDpdybADtFD1tVyiTLfu9ZcWsj7JpvVxnpC2EfDiB+qtlQnqCLIjQxMAaQo6ZcblSXxgIt2rWiliRMFvpKbWfTR09ZzVLnVzPt7Yg4V51nEd/E5spcRd8Rg6Q4yJ5e/Dolyn40BDPsSK+SjyIUfPOGQtiBTF8e7JcFtQDzv9cj1TKXx21TAskX5IfXo34Pqe9UcJ5UyoVbB2C+AVB/to7ezPSS5aT0MWx2mE5HVkWH8JzP6waLYHiwjfYwHsM49Hl5CvgNud9HM+tNFW4IVJON+9BnmO/tIK5spiaUuQyAyhLGgUB9EuQTM1P+o8Xsu0uf96Tn2cnpAtLWoYMdkoFU188IaEVnMlnTA
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature= CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         retour
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         sERR est chaine
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_65
    identifier : 0x2b9a01bd00828070
    internal_properties : BQAAAAUAAABFMRBYpJHuU/jkwHRmFuQc4Fm6Owg807wJOAQD6DZu1SFBeznherG1r33RCJaK39UtfkME9fOVYlvryTdnlHovQiDJj5iv+1bdz7C20Weu1WOAteSgWFLQUT5qJZhu5tA9/4AP+95ocsMEDnRg+lnDs75GdQvO24ntmFmKM8tYF/rP9488lsXD6OsaY0svY+8yHrz6xwMOzmxdeAIDHPD2dBdOMU/t9FfPD4SdrlE8X6Z7t7L2lTqle1yX1qe50jopD6NbkXn70zgf6vjbsnn/MnZWaXeTSpbCuaHV728hzPziaINN6Ql9FUIAlt0FuDrvcCGeRo7C1UHaFg0Os26b38XDj2mwNWky53sKnkQfS6adbgbZoAiRnycoOwUW59nGlu1OgTsDmX1Npvxv3lBBZRR7vBM1th4moMSf0OFvDQoURAeXFOtnH2u63ekM8TewQ0rKOrTcNPIyhUbaPk6HPsZoupDupOgq5UWdJIcNu1dHSQiBl/spMUXsxECDg7ja6Fu9eS2T5KSxY2U80WCkJKmb5+FqFq2x7//rpDqkfXOEwuDo23hgZvqVaaEvVVQS/8hK3KwYjjzrukYy8lZokhUj0PpUPGHoMN8hh9utYxfGwNCpZa3SkHTceEEiWVEjA2s/80VNGR8FQRjCeirCEX4dUeWD9DXR2Qs+5aFx0WWu3Cxl5pbwltbXR1iEdrpsLYPSdLYVj/KQ7DIwcpy+nCqZdM62R5W5xW1Thgq9FjjM
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est Entier256( "0xFFFFFFFFFFFFFFFFFFFFFFFFFF" )
         V2 est  Entier256 ( "0xFAEAAC7C6663B93D3D6A0D489E" )
         
         ResOK est Entier256(  "0xfaeaac7c6663b93d3d6a0d489d05155383999c46c2c295f2b762" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = multiplication128x128_256( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEst_Div
    identifier : 0x2b9d499901f6ea31
    internal_properties : BQAAAAUAAABso08qnfDXgGTfRXj2Q4PNBfW1xo99pmdO21INDcvzyFhEIN2edbN1qcOEVChKWmRWyYh5/B18PRZ27EAgefnHJQDcIL1p14vg+wR1iIi0FkmV+SJOIAiND7Xd8cauVa67VbHLtmCz24Y2Pavu69lJinJCO6xl9HRdOwBzfV+TmlAav93HqfHIoFn0ZGFs0HKoMs8i8X+2jksUkRod+Bb0AR4s2elHxkzo0kXAjLSdjMt32wVn/6rg/K9yX6/WyyssFK9/fEM9dLXLpVLBwt55UX4tD/uX+5Pch6VDouHziet8d9RBM7kkn0QT3kEMDasykPdXwC/zfqLdbzMffoKrAK5EpuvnpeVPG4OAe+YUIqZWtyHgwfdn4CU+MZa33UhNDYfguZPVGPwhmIL6lYljGDwLjB3TFkX/KmT3O4v8ncu7czLySfB5zUxxHWEYWFE8W1v9SWWJY01RkWZ0+Ppdx9o3a6spuZ8xHyCEz88ADc04yDmFB9NEp4iQRO8eh5uYTwtOrESmKoduQi7G+MoNDwa2NnLwnVbGieMGaTnFxId3Ue/XXHuYc8DGTsIufKG/nIDiDyYUGdWU9ox/h8SrvJIsrCKq42qw1nuA+1V/QZp4+uTIkILIia1rB1gKJg4fhNcE1MBl1UZn8f/b3D4HJnzj43sPpVmrgi/cA8WzvNSWD620pBupYWvRUKgev+BDBDgqrN4iQ1p8mJxix/G5gtHW+nS7Tdw=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         	PROCÉDURE INTERNE _VerifieAdivB( AFormaHexA est chaine, BFormaHexa est une chaîne, QuotientFormaHexa est chaine, ResteFormaHexa est chaine)
         	nombreA est Entier256(AFormaHexA)
         	nombreB est Entier256(BFormaHexa)
         	Q_Etalon est Entier256(QuotientFormaHexa)
         	R_Etalon est Entier256(ResteFormaHexa)
         	Q,R sont Entier256
         	(Q,R )  = divisionEuclidienne256( nombreA, nombreB )
         	SI PAS Q.estEgalA(Q_Etalon) ALORS
         		trace(Faux, Q.VersChaineHexa() + RC + Q_Etalon.VersChaineHexa() )
         	FIN
         	SI PAS R.estEgalA(R_Etalon) ALORS
         		Trace(Faux, R.VersChaineHexa() + RC + R_Etalon.VersChaineHexa() )
         	FIN
         	FIN  
         
         
         _VerifieAdivB("0x23456788fffdcba9877", "0xFFFFFFFFFFF", "0x23456789", "0" )  
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : PGFD
    identifier : 0x2b9d55b302462d21
    internal_properties : BQAAAAUAAACBRfpg5IQxRSlzwl/7E7hjQzGEUC6TQG5vHVzciDlAIhKqq2V79fHQxNXPcfVMf+ym3aXPTTESPGOIHa2tIeDHhZ7rrtXk56zenih7vVUjkP/hcUwYF/JStbUBV0YI1LeQoKHMJzOvgUbsv13KhS9kifLyQwAcaJv75jd6RlvPzCV9qN71sg92JrRI5m9B0HmtTqYRncBuUe8bIADPcd5zA8fgA8HdTyozGkfucv3tb06W6vZN4gth0Y64DEsOOJpV3XrOxtX9/H0VnVz4+cmwi7F7DF0V3/9pSF4GORxJGWIHB1tdSL4saeIRm0EN+AtCY2GaPybo2lCoVmYRWiHnc0jULt4/jyy25A+HPOFctaWfBpQ7h3foeLC7JTYENdRSSAiGAgO3jw6+F4gM8hlBI72kKmDrpHIt5YMZgWZMO2oQqNhT18zyU+f2IVlDAKt5YvAhqOnDiMd2Wiy2pw5FID2MG+bHjeSrhvd0c5iEa8TxgbmYN4nZRWvzroV/40s5tjBgEy7Gy9WPd0CE+Q4jMq8d5ENgv60W1PwVdGVUDREPeQI1F+q2+vKQASlQ78b3HcOmFTXbfUq8qGOyCZfIZrJMA97DdHj3cPu9/IUSpEr6pg2UL5muWMk15MFmcUiOYDWdIrU3FsCW1vsp2QBpK/Z3yv0/SGLHeZe5mx0SWFrKNcIAm5IfdlcJgqPWIZae5f8Zt9LW0T1fBv00FKHmC+Z6
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         nombreA est Entier256("0x23456788fffdcba9877")
         nombreB est Entier256("0xFFFFFFFFFFF")
         
         // Test PGDS
         _pgdg, u, v est Entier256
         (_pgdg,u,v) = PGCD_Etendu(nombreA, nombreB)
         
         trace(_pgdg.VersChaineHexa())
         trace(u.VersChaineHexa())
         trace(v.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : inverseModulo
    identifier : 0x2ba08bf4027a10b8
    internal_properties : BQAAAAUAAAA5fjVcq44Ydb1nQqgiE/Du8Q0LD/s8iP+2pL3OHgUQEdgcTyjoQydFWeX2G4Dea57cwKoOYkQrmevbqQTZ5Fgx9tQxS8qBMmYq2YuKtUvDa3s3FqMiYesyLujtP6BZJ1WBEMBt4r0hR3UMhHYymKt+UCngKQoVe6TNit/LzOHZb5bry7mDy6S9hg+jUoyaVKOVYaB1e0vV3KY3Zx9bcBJzN110FFJoenGUwf4PrHx+oHDP5rOKCvzFGBOr9krFaxZ0bq8J1Mtwi8MthLmr8V48Fnilc5bPfzpCoq3Hlp+G97uqszVK4HLKZy7QwJxH18hp1YV8D+6M8GGrvbdWVn66eOwcwdQwDVyW3Y7Ua8y2xMWTIFidJtWCUXum52swrMkMQ9bO6vOaG/D/llMrYbwZTRp1VIGgS/8h7h6AHz8CaBdR6tS9USuu7M0IEDlTvomPwnu5xQQouO8qvEESi/+IHiD8ur+fo4PxEQ8P/rCInIGd5YUQmePufC8VYMNDowBOvCg4X6BgIFThOUKiP3KWpQ2VHjtU/1lz2gDpPdQn9Z+ryZAd/LAbt7QapBy44l5Aq2m+AsJ7l7yxD1odvpRcSd/wHmtlwTLJgnRbAt8eQc/Ulu1RyNnVipZ01Z0VzHQwJGDLjoGC7+DosbJG3kXnJw8x+L/q7lCHjHyZ5UiRNTul5cCe9NvTsCf41T9CUQgIihgW2CUmgZvHcToVm5GbJ31n+m/S5u4/MDg=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gCorps est CorpsModulaire( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         //P2 est Entier256("1" + Répète("0",28+28)) 
         //P2_Mod est Entier256 = gCorps.multiplicationModulo(P2,P2)
         //trace( P2_Mod.VersChaineHexa())
         
         
         //x est Entier256("2") 
         //x est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b915") 
         //x est Entier256("497c0fb9646881ce25a2fc68e89a129135e8715423e73fce0759ecca87d30009") 
         x est Entier256("ea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         
         inverseDex est Entier256
         y_2 est Entier256
         ChronoDébut()
         inverseDex = gCorps.inverseModulo(x)
         Trace( "Temps (ms) : " + ChronoFin())
         //y_2 = gCorps.puissanceModulo( x, gCorps.PMoins2 )
         trace(inverseDex.VersChaineHexa())
         y_2 = gCorps.multiplicationModulo(x, inverseDex)
         dbgAssertion(y_2.estEgalA1(), y_2.VersChaineHexa())
         //trace(y_2.VersChaineHexa())
         
         quotient est Entier256
         reste est Entier256
         ( quotient, reste ) = divisionEuclidienne256( x, gCorps.P )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_PGCD
    identifier : 0x2badc0020158377f
    internal_properties : BQAAAAUAAAAmeSUTqiE4sDAt3/75wBm7zSNJd2cnXCNSeAPfbr3SJbT04xLKjQmELP4JaJmbCC+/1tuhNDomK4yDgw8GKgwzk8fbOS6084EIXmX9+0+anodoFvWAgZ4OuZTQdPfVTcmozfmhpEizhMIxITcdJmjtSKlX00tZsMU6dM1MwVaJfr2HnZKkfQr2XtDr42xp/bF5gQD4ky27fuizaUlHi4kzvLv1UTRqMk+MoI2GILdeOvMJdyuSAMTp+q85xldie0EKxGRzipBaG+5Bk+jLKFjUxW30cWh9AfirLJa61mdKqNMBBhVkgpK/DkIHLuiBoI24x0oITVuM7cWY4ArFJxAKKPC8DOI8Bh3ig+C9eVBIrdRgyFAj0fGOpRNIsCVWGGbLakV3fCOmTF089dAAgB/uuh/EqsT7UEdA0t6u00dyyKvrjTIJSRbYBf6gpgdo6TYe0y1sKKthYO5wAckUcVgG57JGVXze5YcUKABr5oHWuo2xHeVO32G05lYoNWjOH2P39YsAiKXrrIieKquLYkBXRKO/S0fy+W7UdQ5N0TN8mZuEdT6rnm7bQRpST8f31deHga/O1YPkje02lBJ0pxVd0IOnlyP8GE+w6M8CmThZXj2QVV6LaqHMI7d3Sk0q0FwcajDPVtcrHsPDPFtQUCdHYk751tBved0AJZWgnIGmGBjSgPFP6cc9Bpleo0NWvWSQmhA2cNT3UnAw1JOu5kzjPXJM5X9gcNYuLyc=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         
         //PGCD_Ex(23,120)
         PGCD_ExR(40,70)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TET
    identifier : 0x2c228a9a00fa64e4
    internal_properties : BQAAAAUAAACx8Zwc5JuDX1ctr+P5Do28Z78/s+quSALX51LC6qV5TsNwcgA5th/L9Rnpvigx2OgGWGJB96Zbtfzz4Gel1eSaHC9dGFIOtRdCeZ6uB4MYoOr8aG1JKTOPfu2gPEqKBo4AgQre4BVP7Us/LmWAsncxsUgFFjiCLNGdBr9iX3EDXSWOYKVNTV48qqkNWPO8FmBqu3s4sXwsN9GNJa46SDs1iq190F1h4NxLGKeTKcbkKRPdHQBYQzCYH4Ry+h57GM65fNcB7I/8y5TVSaQ3JiGlEpMpQVDYpSg4eU8OJvSmjcZ95k/qbIV7J3k4SXcDFjhR5IS0QGm0oU/T/21EaKvzJb3GwS/D7bSb+oxZoiGR5Ayq5Z5y72MaU5Xmif3+/lISy1nu6csj0a078GoDWlK/o8qnkF8JGpasLrJZWt6T0/Dvu7o4U/xomHTLu4B7DY/vJ8tNoQ3DElzhdwDP+/clFiYpqTvBt9hcPYoSbr6bdeDwlB3pM9m7RkISugqpbKP/nydS6Pi4x0bsNvpZ92dpzqRiWoSGHfGNI2V9AzXR0bea+hbmFUDCz8WFj7BqJiCfDjCQrzYX92MosEmuzsWI4BPtB9j0SFjozn7MSZgjdlxUk6ZQ2wkgQEENG+UVHYA9NwWqVJZ7R8TGesBWq1lvw9ZynFii+XVHb/zD6ZZ09oKc0DUZr7c5eVd5xi6eD1X27E611Hw/k1NPunIkbNs4lp4=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         Signature est SignatureEcdsa
         Signature.R.affecteAvecChaineHexa("13cfb50edf248662ca8d64195cf48b26d90f4ebc1998966d0d9ead4275c20dad")
         Signature.S.affecteAvecChaineHexa("6c2134191f22d1f5fea6848fd23524297fc88c0fb296cd7e955f01370fcda63f")
         
         
         CléPublique est Point256 // = CrytoLib.ECDSA_DériveCléPubliqueDepuisCléPrivée( CléPrivée )
         CléPublique.x.affecteAvecChaineHexa("61b0c48518491955c022d99b0c73b43d947990ae361eced90d5e0d22ce3ab4b7")
         CléPublique.y.affecteAvecChaineHexa("8aa93591f1a2818ffc6e7d575bdc1312055e188616dca470aaefd5bba9b9625e")
         
         N est un entier256
         N.affecteAvecChaineHexa("f49c9d1c8a96157ce04d5651ce201778aba934c3ff245f9c64727ecb2f6fe0ad")
         
         sERR est chaine
         bOK est un booléen =  ECDSA_Bitcoin.VerifieSignature( N, CléPublique, Signature, sERR )
         trace(bOK)
         trace(sERR)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : priv_pub1
    identifier : 0x2dc68581035feaad
    internal_properties : BQAAAAUAAAApb6oqB0qRIC8kY6aXcRZz2zSnDtl466sZPqIEsn/84Eot8fhfQbYWFXsbE9Il/NrF0Te2mJo3/Dt/jpJUoW2/9ytSD/1E+vENRCWxWWHbHvMtAIK6bkWlaIffntGQ6mCrhgrucXEgTI2uQAa2ZN48NXQu0IM6xq5bp40ntyHWwfZwIp3H5BEo5hHgjJYcRZQWDJqs8WyvggyRRzTtrg0ZQn/+OyRgKPXuCQuvkgULrE7BTovepQwY80D1vaUGz6v+VdHnmpWyedl52e04nb4SBFOv+tAUYxlsW3tnMFJWURKkj8ydyo3wFKtFHid3Ejz36ZRy0qF4gDNYlaAQWw/Pc+L0NuLaxDzOQ3hM6Trsf52N3Bh6UmU5qO22axXAcbaR/pl+I8lFyIFQ1xV4cDIwNxeom60y/Ir4T6hJopwECL4z+wy1c7cFB+wwwXcevLSOhAVhq8r7fuvT0hfNpBRhW1jm8DG2U4vV72gkl6OZ+t+MciNZfolRv2aOzFLGNJ/MDzzoH96NECZkR6d0HG+TL/23F9i5LqffKpnr0SIE7U6dFOAdHUvP0dgWWnj9EQB5x5aYEV4PlWtPiyexxm74RQehzic6jTqVIlrM2P9JyNtCVDAUZ1JDr4QluWSiYqrhAfrkCTwxKtaFLHI8diI+45lumhvV3CoUj3uUqF8L6MsZuYM4W3WHMZzq6jBr+sExLvyLphYjBwI2smLYeaMdtP8TwXnCGe9zR/xarmndyUaYS3o+p1XQSrbp65UBl0Fj9TGtouIFRFDjTRsgZUkIYiIsBPat
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("0x914f06164094ab80f14de57c15a5dead827a473c005837a5c137167db965a203")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // TEST si OK
         xOK est Entier256("0xc51b1777e1a45b4b3cc29d32cd89153ded2c45d6cadc019207f5aec8b451e9e9")
         yOK est Entier256("0x58f798f6ec04fbcb768aae73f4f58ecd55cbf7326d79adf7cf5bf620ed9acffe")
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_mult_2
    identifier : 0x2dc8390b03833679
    internal_properties : BQAAAAUAAADaeguQU/eyngMHQDsMxb41A5NAeiVZHohUuDbr94FokjBp5y5r+ocXrteVJYBkO0qEu99dG1RN+6F6CfOaa9Z7MU6/7kDtG80kzLaFQgl37ZMZwNtuPNCc8kSqOVByRVzV48DXvdPbLyii6u0FFmrdV1sILLqDKLsy65NhrGsXytgOtMsSiEuw8cKqYHZ8kqlEXEt1BKyiZ2neegRnAHVkadGCv2ynYDVVZ/c9mO4IksFZ5JfaMWkS0qk+J8A+YQJW1LbMDjEmStrrgI5Kzj5qVOCQq5Q6xZD0qv6zrmK4Dp3HNFHy8ZaICEFAMVN85IDYspzyI/zJ+BfR119vXcPm0CmtyCLkFDhjyt6jqeCJF/XDhRAqBKXUu4g0tV1Uzhnq/NYYYp34MO2vzc26GKMH6/s/a4wZliMwF7iRj9mUA8qHGv2lvVaOG71+g0ta2xvXB9TRQh/5bDYnS3ACW5op6uAH2IqMmy8YAT4OELOAMcDHBBpq01mybEscGHS4WdTA+9apmF/lOIh9TlgN9pDkRekqdGXgvzosRHeLT7ksPYF5UfRSH+m0yiIlT6Aovo2/Tqtg0ieKnXFtWBewcS+qxZ0adJbZDzwhCr5ijjtwkEVNU9KWr+An0ilyVCQtezAW6HQ6umFm2xPFRFHoHO9u+Cz8q+G2j1cSVn/NGFugyvNqMaKmcCqiP9l8MMtsVFdI8M0jX1ZckUzosWup0zfOJKIodfTjIU3uAftNuQ==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gCorps est CorpsMudulaire_sepc256k1 //( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         //x est Entier256("80000000000000000A00000000000000000000000000B00000000000003") 
         //x est Entier256("483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faa001") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         //soit y = x
         //y est Entier256("1222") 
         xy est entier256
         xy2 est entier256
         xy_TEST est entier256
         
         // TEST
         //sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\DebugDLL\LibInt256.dll"
         sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\ReleaseDLL\LibInt256.dll"
         dbgAssertion(fFichierExiste(sDLL))
         ChargeDLL(sDLL)
         si ErreurDétectée ALORS
         	erreur()
         	retour
         FIN
         hModule est un entier système = API("kernel32","GetModuleHandleA","LibInt256.dll")
         pAddr est un entier système = API("kernel32","GetProcAddress",hModule,"multiplicationMudulo_sepc256k1")
         dbgAssertion(pAddr<>0)
         
         ChronoDébut()
         POUR i = 1 a 10 000
         	//API(sDLL,"multiplicationMudulo_sepc256k1", &x, &y, &xy)
         	API(pAddr, &x, &y, &xy)
         	//Trace(xy.VersChaineHexa())
         	//x = xy
         fin
         soit dureeAlgo3 = ChronoFin()
         Trace(xy.VersChaineHexa()+";"+dureeAlgo3..EnMillisecondes/10+"ms")
         //retour
         
         
         
         // nouvel algo
         ChronoDébut()
         pour i = 1 a 1000
         	 xy2 <- gCorps.multiplicationModulo(x, y)
         fin
         si pas xy2.estEgalA(xy) ALORS
         	trace("*****ERR*****")
         FIN
         soit dureeAlgo1 = ChronoFin()
         
         // ancien
         ChronoDébut()
         POUR i = 1 À 1000
         	xy_TEST <- gCorps.multiplicationModulo_OLD(x, y)
         fin
         soit dureeAlgo2 = ChronoFin()
         
         
         //trace(x.VersChaineHexa())
         //trace(y.VersChaineHexa())
         trace(xy2.VersChaineHexa()+";"+dureeAlgo1..EnMillisecondes+"ms")
         trace(xy_TEST.VersChaineHexa()+";"+dureeAlgo2..EnMillisecondes+"ms")
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Image1
    identifier : 0x2e10ace804c9b359
    internal_properties : BQAAAAUAAAAbKxAbDl94msaWLz6cacVrtretprcYQkyHJLee7uCCW1qEq9dm3ukNcNtdYYfx8hEI6IigahB6AvE0I8fPMd4T2+ABVOyhFfT/atAj98oBdjSNsO7FzhdkiyEhUGC2CNVIhZqJLbPGLbvczDxw5m7rryJY4mHbRpSI6aoJGWNVNGh0wSNHdl636Fg7WeixzEXWGpmoUxIKEoIhxfH3XbA+O2wkHYdBClVfCl0zbsb8A1ucu3ZJLsNVKpT4DvKa5Pzp2Ayu1vLPHFTXe18KzeRakk1bZzhd2rjE54OonyEw0WMfpP9dhPFVKaGWNcWJvJAl9F3CZehiDbZCLUE/F1omYJ8HBrLEgrR8ayNw81oQdBfrjuNX7yLi7azzjoJ+jVz1EKG9Z6CoYBEhcmfWcZzqohLa2T67xTB3YnIhL0wPy5s+SXRxr+sI4J5jAWnxCFKL1EqbQ5U82xtElIGFLY1rExi9wIMkD+egtrTx7qJVHesv4iMEBx9DDjoa1sljOEILK0JLT/s1Kb0ZIheNazO3piIR6932cGSdL0Ic89YbANaRwE/IO7oFwTfJUfraFvd7eSx92NIUJmaeEAVqLjS9XgT7xsX/4QLsZoazTxP0XYyiEYEoGg7Eq2MlTNiKCeKuiJ5NIkA4YXUl8j8cUj0mldTktJtVaCbFV3FK8XwfYnCRf6c+kggQAfXU18tV4X7xXLb/xfBRZMmuynXSUzLNO285qy313G7rg4UVvxZn+YdjNxaGX0WF4tzBPXzkhdrRlcTZlC3Hdr520wggihXel7GylzcX6+NrZNgNLxPraxODhxdr2QkzMF257Oeo1Gxkvw/gALIPZBVGcFmNMSet+3CgK1rqNbaQTsgNPe83TO6waTw3eTNZMw==
    type : 8
    code_elements :
     type_code : 8
     p_codes : []
  -
    name : ECDSA_SigneNombre_ECDSA_VerifieiSignature
    identifier : 0x2c02cf800181802d
    internal_properties : BQAAAAUAAABgveWKkI9s6fixUXU3BpuV2pUjWEzgNUogWe9BZ65cbA3uqC35TB4CP4XKs583khYZf5LJTbqRSJiQOn9filEtSsgCq4nFI1yS1imzJewVvlfDZfp8xIN5WttBb9eW82Jhe9u8O5refop+ML9C+STGbjTV9jYViOfux1spg6O+e/swVBBI/8J42TeFxvFq0/HaANwz+5Cy9eqwrfPV8NxAfPWk0OeyisKqlZSq3EpmPZ0YlqqPAcrzBekyHXvtfEadi+Wb8povwlDiwmCzjbbeDJHpMONfk8qFeMriBaDCmoItY6SYwcCveUC3KSJ6Y1d4Hfg+q6oo2vZ0J+LbFrSYhwOPTkk8PvJ8B2K2/RfWS+VF4R7vLcWXahqfZpRPaw5HHqmc918vULVQtzTUzMOS4DUwUiQfBEEir60xzej2vLf4qI79Af7LJsuif6PXwJCmHo5nMjX7hYKsXo68bxJ2qaOyH15lY4ecvH/ukToG7gehy00Q6wEKqAfNdK9x/Q4QUJSODfK+dJDRdQjY9wTw20O9fBdkv5abUlgYi3i/12K51eaNZQDr/azEP4NamQEiAQWWRZUP3Lds/NMWE+Gpe0ry7/apihVP5i0B5H0uXVuy0CkcZ8Xvp0PhJn9mZWdFCQCutarZxugxT6V0Vlf1sLkKN9YTX5HZtxatm6QNsncSj4SQ4X1ZOuRrmfbfaNtaxuDH7UvLNvXwG9iDv62LC6u788VZU6eIeB3kMYq++WsQVnHCm/fqyWQ6cjht1hNIBrmudW/hJKJB2Q==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         //CléPrivée est Entier256("3")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature = CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         sERR est chaine
         ChronoDébut()
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR
    identifier : 0x2e11a4eb00e97d0e
    internal_properties : BQAAAAUAAACl+qKQN1+gwrKhHVxJIlt3i891DYKKqxg/IZdKT2F6O6jOCW4GoetAsBy5WB9TyB37MCkN9FrHCy3BPsuU6PW6yyZIccQ6qVG6lJP9rwJG+snB1Nemx9zU0yJuot3z63+Wn/fLQgZxQnSXP/1bNL4r3mPtpQuoDLNkKB8+QfSH0mu3FYhqoybAYGbt/nZtxHebtWjiBR/HJNLnEx/nJf+7+qdBB1ZsdpVWlGdozIE82nVRb6UgjiSPNBN/+BO4cWFAaMS9fCq+HTANkWpn9vJIT+XMuwaDqQYpjGCA9o1wuG15mkfOVE7NWOZJ7NhzcmEyt3pSD9WYwzd85hwxST4i0lhcgmSm4s8gQzJPxY4WldpUtOoFHiS9zKIpkdazRQEUEZ7MKRSlS0RTnmmZ5ah1O/YVP0ncH5I/kW9//FR380Da5m+GWiXjIK3BH4jlIi1HmkZpFXQYj5F7DsY5IjHNqFHf6ilHLEqb0w0AYzqX6UbwxuILeMiT+eFVIh03vH6QiBB5AVLOh2/9yxQ834VKEQo4eNzzyEGDEPOsS6Xc6FBlVAme7b+gerOp1n4iaCS2MvodrD9+p/tUgix+vT+7fhE1Ga366iEWniUUmzZbrDu2c3ClAGsWaVmLHhl0Tt6WZKKzRiMPwAiTEkyoeCOBDXWPAqFIQKA3/IpptWKHr+GZ3Tb0PhKIXSDTPNSn6pdVx8HZmxVGobPjaQCjz6XqEu3BRtjV61OrrKQ=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	//( "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141" )
         
         
         //x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         x		est Entier256("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e") 
         //x		est Entier256(3)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         //nSur3 est Entier256("0x55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0") 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // n/4 - 1
         //nPlus1Sur4   est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // (n+1)/4 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d904F") 
         //n_8   est Entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c828") // n/8
         //n_16  est Entier256("0x0fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414'") // n/16
         
         // calcul racine cubique de X 
         Trace(x.VersChaineHexa())
         racineCaree_x est un Entier256 = _RacineCaree_SHANK(x)
         Trace("y = racine(x) =" )
         trace(racineCaree_x.VersChaineHexa())
         //
         Trace("y^2 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCaree_x,racineCaree_x )
         trace(yy.VersChaineHexa())
         ////Trace("y^3 =" )
         //yyyy est un Entier256 =  corps.multiplicationModulo(yy, racineCubique_x )
         //Trace(yyyy.VersChaineHexa())
         
         //divisionEuclidienne256()
         //inverseModulo
         
         
         
         procédure interne _RacineCaree_SHANK( nombre entier256  ) : entier256
         	
         	// p = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         	trace(corps.P.VersChaineHexa())
         	// p-1 = 2^s * t
         	// p−1 = 2^6 * x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	// s = 6
         	// t = 0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	t			est entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905")		// = (p-1) / 64
         	tplus1Sur2	est entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c83")	// = (t+1)/2
         	
         	// au "hasard". ne dois pas être un résidu quadratique
         	M			est entier256("0x40bf3e95c2d24abb0dc4a579b08c0d3f52ef113a8484f33e83de2d1fef487b48")	
         	
         	
         	B  est entier256 =  corps.puissanceModulo( nombre, t)
         	_X est entier256 =  corps.puissanceModulo( nombre, tplus1Sur2)
         	Y  est entier256 =  corps.puissanceModulo( M, t)
         	R  est entier    =  5 // s-1
         	
         	//@TEst
         	_32 est Entier256(32)
         	_yy est un entier256 = corps.puissanceModulo( Y, _32)
         	trace(_yy.VersChaineHexa())
         	
         	tantque R>=1
         		
         	  // calcul de B^(2^(R-1))
         	   _2PuissanceRMoins1 est entier sans signe sur 8 octets = Puissance(2, R-1)
         	   trace(_2PuissanceRMoins1)
         	   _2PuissanceRMoins1_256 est entier256(_2PuissanceRMoins1)
         	   B2R1 est entier256 =  corps.puissanceModulo( B, _2PuissanceRMoins1_256)	
         	   
         	   //@Test
         		_2PuissanceR	est entier256( _2PuissanceRMoins1*2 )
         //		B2R				est entier256	=  corps.puissanceModulo( B, _2PuissanceR)	
         		B2R				est entier256	=  corps.carremodulo( B2R1 )	
         		trace("R="+R+":"+_2PuissanceR.val0+":"+B2R.VersChaineHexa() )
         		Multitâche(-1)
         		dbgAssertion(B2R.estEgalA1())
         		
         	   
         	   // si c'est 1 
         	   si B2R1.estEgalA1() ALORS
            	
         	   		// Y = Y^2
         	   		Y =  corps.carréModulo(Y)
         	  sinon
         	  	    // B = B*Y^2
         	   		B = corps.multiplicationModulo( B,  corps.carréModulo(Y) )
         	   		// X= XY 
         	   		_X  = corps.multiplicationModulo( _X, Y )
         	   		// Y =Y^2
         	   		Y =  corps.carréModulo(Y)
         	   		
         	   fin
         	   R--
         	FIN
         	
         	renvoyer _X
         FIN
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP
    identifier : 0x2e12d85900ed5c65
    internal_properties : BQAAAAUAAAArTwdYp4FLAnpA0myzDLiJemm7IDXApzXwwXJ5Jf2wOf8PIFrAY0Z/yc9HECAhiJsVCsR/Jh8sQ6bMCIF9y4I/WT00K0ePADmUdaX1xzdzbXWgZkpM/5GmCXP0WEc3QJRlY5l+ux1hiPCNH1ypL4bs7e2R47tuPef9nQeAkVR80Kndv/JxgtGGkAEq9rlK6m/g6Nq6gWNNBj6PpYUs1gFnpN7GA8V7bnBzjTsa6wzs8WP4An+fGymqYkCWGZKAgjwqhS69I2mWr7cB468mAreE1Y3D52ssT4eamm+7iC8z3OTjYdMbOyZt00d+Ww3UuqubTmgrnTkuGwgrI1NLmLFeR9WJiHEgb25bDmZUg+vhp1YU8hkuClE1B6Mpj9991vwDH87UrPouie9YlE1OH0sO/Nrbp0B4BBySOrElAey+gGXcnNnDIBy1GQTTEePLmzBGqJjDXvJpHTICkE4EJJKIP3dVTPiJTaDK9EP0NpRkuI3Wlkgs7LE5ulD3iiLBkzu1Cv5rhHwRh56CCeCpg8IpBFIoNKdxmbXsnysCASIwmMbsFYrOsp0tVAsMs/SbHpIuSxOy6pg0GNGceV/iCMNTMLaYgL+5HnhYcnzHAx3lruftHsXvpdWtARcEiRezMCB+gR3RzyGwOqdQFmJDYGTsoPUznKi6D6Ro49bddJZ0rjzbX7rtUu8gnC3PAM0P3fD2bVVt3k8dTQSCq1xIO1O+OCcholGtkIbTEu3q
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         
         // nombre d'odre 3.
         // ie tel que  beta^3 = 1 mod 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //beta  	est Entier256("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         // ie tel que  beta^3 = 1 mod 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         
         // Racine carrée de 3:
         //racineDe3      est Entier256("0x3538be51af024152640d9ba6e4fa9c5ce6ed7102d28e789bcc8921c18a34cf78")
         //// Racine carrée de -3:
         racineDeMoins3 est Entier256("a6c75a9980b861c14a4c38051024c8b4245c45d44102ccf1be052cf836477ae5")
         //// racine de X^2 + X + 1 = 0 :
         //// (1 - racineDeMoins3) / 2:
         //// 0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf
         _moins1 est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
         _1 est Entier256(1)
         _2 est Entier256(2)
         //_1_MoinsRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3)
         _moins1_PlusRacineCaréeDe3 est Entier256 = corps.additionModulo(_moins1, racineDeMoins3 )
         //_moins1_PlusRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3 )
         //trace( "-1-sqrt(-3)   = " + _1_MoinsRacineCaréeDe3.VersChaineHexa())
         _L est Entier256 = corps.divisionModulo( _moins1_PlusRacineCaréeDe3 ,  _2 )
         trace( "-1-sqrt(-3)/2 = " + _L.VersChaineHexa())
         //Trace( corps.multiplicationModulo( _L, _2).VersChaineHexa() )
         
         // racine de X^2 + X + 1 = 0 ( modulo xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 )
         //_Racine est Entier256("ac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_Racine est Entier256= _L //("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf")
         x est Entier256 = corps.additionModulo( corps.carréModulo(_Racine), _Racine )
         x =  corps.additionModulo(x, _1)
         dbgAssertion(x.estEgalAZero())
         //trace("X^2 + X + 1     = " + x.VersChaineHexa())
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // _Racine^2 marche ausi ?
         // _Racine = CrytoLib.corpsECC.multiplicationModulo(_Racine,_Racine)
         
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         trace("Map(P) : " )
         trace(mapP.x.VersChaineHexa())
         trace(mapP.y.VersChaineHexa())
         //moinsX est Entier256 = CrytoLib.corpsECC.négationModulo( mapP.x )
         //Trace(moinsX.VersChaineHexa())
         KP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( P, _Racine )
         Trace(" K*P : k = "+ _Racine.VersChaineHexa()  )
         Trace(KP.x.VersChaineHexa())
         Trace(KP.y.VersChaineHexa())
         
         
         // (x, y) => (βx, y) 
         procédure interne _map( _p est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x =  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         	pointRésultat.y = _p.y
         	renvoyer pointRésultat
         FIN
         
         PROCÉDURE INTERNE _map2( _p est Point256 ) : Point256
         	RENVOYER _map(_map( _p))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR_3
    identifier : 0x2e142a0400e15cc3
    internal_properties : BQAAAAUAAAA9hDwUxyzOlX1h7vwgduMhsLnO53/UhJL1LSrBBbU5O0RxV9QXGY0CGSKOac93HD0weV0YPrvelR4JWWlqcHojQjS0ffxy3M3fnCpkkt9rTxsZCtMuBqtlav8+YL7iN/b1la4rY7JkAwqTH1vJZLaLT9sTQncjj+toBAObQPOctgPnRO9qOK95Vt2EqL3urseah25YRXOvmn4XCm04KZ/6mtRk9SWlyuPjjs5erYTBZcu4Av8eHrkWbJN5mbiITLgBIHlPlfa/RFAsvaVEzb66uuxj97Gov7lg/C8cz97zX3LK87G5hH8nRPIjPnf/t82pkgucZ/278V+c8VnRiO/QyiFve19GwgPrLgcat9eMt8r5emr/0mxggP/nKwwAdO1HSNh4mfwJGGYgWqEtkM1lPr+Zu4GYj+t1hiNXIF3mHxnFpmGkaMNc5iRZi9CukfOmP27psT5iit1s3MrpjxRdZXBVZmG/8GfNwouYbzsG91HFVFqvgKxkfdQZYnGinfp1T9wRpfKarK1g/dLOjhIySEtKzLTDVCRLe9FU54L7RiHkY0w/s3+Djpz4Gwt7MzawuNfqohr/E1Fmtd331RW+UThVvoLrPSu/Dx7VWViqoFEdvYsqcvUTjhX6i8BaQ+jteUbk/fqT90ZqVjz8t4zd/q4tZD9MiInnK4iju59Oo/Qcj2b4NmbPu9HFOvZ2X13y/j0Zd1XiHkkYb8CHfIjnQdMZCWlwaN/1
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsECC	//( "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         //x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         x		est Entier256("2") 
         //x		est Entier256(3)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         nSur3 est Entier256("0x55555555555555555555555555555555555555555555555555555554fffffeba") 
         
         // calcul racine cubique de X 
         Trace(x.VersChaineHexa())
         racineCubique_x est un Entier256 = corps.puissanceModulo(x, nSur3)
         Trace("y = racine3(x) =" )
         trace(racineCubique_x.VersChaineHexa())
         //
         Trace("y^3 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,racineCubique_x )
         yyy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,yy )
         trace(yyy.VersChaineHexa())
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP2
    identifier : 0x2e155cf800e36084
    internal_properties : BQAAAAUAAABklqzRJA/73sCalrVGn0oLdPx2mmisFF08ND9TSNWJ4IO4PGzI1v7TEa0TDcAJWuxYlmjPnqeaKeD5Lja7m9SsLD8PwlfJBFVeExkdPs5k5j4UVH5ikaUuC2FgVgf3FmIPdY/SGStzHJY3BVDnk2zat7BcCh3iY4W1HXSNkYHv8ofcIeBQ0VhIGFCpfgUwHbjYKdAOE+H9SswZQcPoYgMZ2mTsn7NVukSBz7f8t/ieS42KnJ8haalSrBYSd6KIKHqEpzSJFRsaf8WDc+3eEqH2T4+Be8GGk6dYZPfdOA9Fpr5VB3cdcV71Fd2GzWE4XF0J3MaXz8tqo/Yd14n31P/k+Zf/jJd6o3Kd9EZeBycb+XgW4EWoSCBi/tro+kSYPyP43BVn9fGZcp7fI1iziuBhEUcqygG3N9FZ2SR0chuLy24lV/BwO5MKKLsSLADemDMrvSNCKy3AkqXVo819W+cbcHxYQx3sNPmF304zV+OBo/Z3HTtds+yC8RfK8UtYbFrSu4Ey4Z/Q5DnNAIs+DqsYNUsTw1REiKITFpfelEiOZFghKxa2E+3ikSiUlXgGqFxB/dNUXM5gIDo2RH4jp9Q0Qent2bI0DRGvseM6mPiCEThmfXDQzGA2mBbNIM5s+S8fGgzM6ODDZStxtfqKVeufhINY/x1tmsFVSDsjYc1hAXy3ZZzjZOoxSzxVpPR5t4mLZFTzw3wLBwqhk/wULxamAWz4XaIcCwNca7Yh
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         _P est Entier256("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F")
         
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         //P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // Test que 2 P = map(P) - map(map(P)) ?
         
         // on doit avoir _map(P) = _Racine * P
         mapP    est Point256 = _mapFrobenius(P)
         dbgAssertion(  CrytoLib.courbeBtc.pointEstSurLaCourbe(mapP))
         mapP_2  est Point256 = _mapFrobeniusCarré(P)
         moinsMapP_2  est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP_2)
         moinsMapP    est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP)
         
         _2_MoinsP est entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f")
         _T_fois_mapP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( mapP_2 , _2_MoinsP )
         
         _P_  est Point256 =  CrytoLib.courbeBtc.pointMoinsPoint( mapP_2, _T_fois_mapP )
         
         // ---1
         trace("  Map(P) - Map(Map(P))   : " )
         trace(_P_.x.VersChaineHexa())
         trace(_P_.y.VersChaineHexa())
         ///---2
         //_2 est Entier256(2)
         _1 est Entier256(1)
         
         
         
         _1P  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePointGenérateur( _1 )
         Trace(" P :"  )
         Trace(_1P.x.VersChaineHexa())
         Trace(_1P.y.VersChaineHexa())
         
         
         // (x, y) => (x^2, y^2) 
         procédure interne _mapFrobenius( _Pt est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x = CrytoLib.corpsECC.puissanceModulo(  _Pt.x, _P )
         	pointRésultat.y = CrytoLib.corpsECC.puissanceModulo(  _Pt.y, _P )
         	renvoyer pointRésultat
         FIN
         
         // (x, y) => (x^4, y^4) 
         PROCÉDURE INTERNE _mapFrobeniusCarré( _Pt est Point256 ) : Point256
         	RENVOYER _mapFrobenius(_mapFrobenius(_Pt))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K2
    identifier : 0x2e1826970129ec26
    internal_properties : BQAAAAUAAAAydTEutgA3uRna3vfSoyzmlgb8RrVEdh1kEsDdy4+0B1Zm7cTbPhNOnhADqjNNeuGJRA0/BgxbqTvREEm09mNKVd6sDz+sSxnrYW+3nA2kp6X7UP3Yxub082Mi4gp+YNqqpuSEAgi0n5nwjBSeoXTIivMnlAVvh0nVydvsT8oABaviMe/ZBxMPyzg2gUd0O9z9QG26kpjpSNLVl9PRKPQ4cwsvmMM3MXHQZz6yWVgnV9dOFopvqk978zc3YsFXfzUDdWWPgmeKWdFEok8eFV92W6RxgArGuirOrZaVRR6aYg50OblJkAnwnVUoZdeby0jzEvm5qkgPQKzlbYWemOk5a/czFWfB8fT9mEmk3t0SryVVMxQHP0NY653YJCFMIoz9mhsLIGH4nL2oH8y0xkkkRP8SPjDJEv+4NrAa0UxbGzwklv9UT6ADIhWrCobjZMNMH9/Hqxhzau4sHGuUEwjyVTTK6o5+zLkSXjQSevnrOISnSSRNP+Pc5FQ9FJ9nRumTk2iEMgudnEnUAMf/EoXzQZkaeeCjbmJCjxn6s3lEcKQiS9hXqXvy17wnytpZCH8gAKrcozzOJRI4fZnqKYsxzvH3Recx7vGiUGJpjL8i6t6RZy3jduwmYrekYT+geprap/jPblcKw0eex+k92Xh0evgs88p1c0/Ou/v6hrcgRm5QCnc1elfRojEio8f2Jdystsj6fGtwRb+3i4QvRffIKF1PylxzfeI6OzM=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         
         nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         // trouve x,t,r tels que
         // s*N - t*_Racine = r et r < nMax128Bit
         soit (s,t,r,i) = PGCD_Etendu_StopMax(N, _Lambda, nMax128Bit)
         
         // vérifie que  S*A + T*B = R 
         _SA		est Entier512	= multiplication256x256_512(s,N)
         _TB		est Entier512	= multiplication256x256_512(t,_Lambda)
         _Tmp	est Entier256 
         // r = SA + TB  : 
         bSPositif est un booléen = estpair(i)
         SI bSPositif ALORS
         	//  avec T négatif  =>
         	//  R = SA - TB 
         	_Tmp = soustraction( _SA.valPoidsFaible, _TB.valPoidsFaible  ) 
         SINON
         	//  avec S négatif  =>
         	//  R = - SA + TB 		
         	_Tmp = soustraction( _TB.valPoidsFaible , _SA.valPoidsFaible ) 
         FIN
         trace(_Tmp.VersChaineHexa())
         
         
         Trace("************Trouve :")
         trace("s:"+s.VersChaineHexa())
         trace(t.VersChaineHexa())
         trace(r.VersChaineHexa())
         
         // R-1:
         _0_256 est Entier256
         soit (s0,t0,r0,i0) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i-1)
         dbgAssertion((i0=i-1))
         // R+2
         soit (s2,t2,r2,i2) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i+1)
         dbgAssertion((i2=i+1))
         
         Trace("************ -1  :")
         Trace("s0:"+s0.VersChaineHexa())
         Trace("t0:"+t0.VersChaineHexa())
         Trace("r0:"+r0.VersChaineHexa())
         
         Trace("************ +1  :")
         Trace(s2.VersChaineHexa())
         Trace(t2.VersChaineHexa())
         Trace(r2.VersChaineHexa())
         
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         // vecteurs tels que  X + Y*_Lamda = 0 modulo N
         V1_X est Entier256  = r2
         V1_Y est Entier256  = t2
         V2_X est Entier256	= r
         V2_Y est Entier256	= t//corps.négationModulo(t)
         //_Tmp est entier256
         _Tmp = _F(V1_X, V1_Y )
         Trace(_Tmp.VersChaineHexa())
         _Tmp = _F(V2_X, V2_Y )
         Trace(_Tmp.VersChaineHexa())
         Trace("****** ")
         Trace("X1 (v1.x) = " +V1_X.VersChaineHexa())
         Trace("X2 (v2.x) = " +V2_X.VersChaineHexa())
         Trace("Y1 (v1.x) = " +V1_Y.VersChaineHexa())
         Trace("Y2 (v2.x) = " +V2_Y.VersChaineHexa())
         
         X1Y2 est un entier512 = multiplication256x256_512(V1_X,V2_Y)
         X2Y1 est un entier512 = multiplication256x256_512(V2_X,V1_Y)
         _Delta est Entier256 = soustraction( X2Y1.valPoidsFaible, X1Y2.valPoidsFaible )  
         Trace("_Delta = " + _Delta.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         
         //  = K * Y1 / Delta
         //   =K * Y2 / Delta
         _B1 est Entier256("0x085428ac856e542bb711d2bb9e408611")
         
         K_Y2 est Entier512 = multiplication256x256_512(K,V2_Y)
         
         
         
         _DeltaLow est entier256 = _Delta
         K_Y2.multitpliePar2puissance128()
         _DeltaLow.diviseParUnePuissanceDe2(128)
         reste est Entier256
         trace(K_Y2.valPoidsFort.VersChaineHexa())
         trace(_DeltaLow.VersChaineHexa())
         
         (_B1,reste) = divisionEuclidienne256(K_Y2.valPoidsFort, _DeltaLow  )
         trace("_B1:" + _B1.VersChaineHexa())
          
         
         _B2 est Entier256("0x2b6a121d1ef84b440996421265b4e26d")
         K_Y1 est Entier512 = multiplication256x256_512(K,V1_Y)
         K_Y1.multitpliePar2puissance128()
         (_B2,reste) = divisionEuclidienne256(K_Y1.valPoidsFort, _DeltaLow  )
         Trace("_B2:" + _B2.VersChaineHexa())
         
         
         
         // v = b1*V1 + b*V2
         VX1 est Entier512 = multiplication256x256_512( _B1, V1_X )
         VX2 est Entier512 = multiplication256x256_512( _B2, V2_X )
         
         YY1	est Entier512	= multiplication256x256_512( _B1, V1_Y )
         VY2	est Entier512	= multiplication256x256_512( _B2, V2_Y )
         
         VX est Entier256 = soustraction( VX2.valPoidsFaible, VX1.valPoidsFaible )
         trace(VX.VersChaineHexa())
         K_VX est Entier256 = soustraction( K, VX)
         
         Trace("K-VX=" + K_VX.VersChaineHexa())
         
         VY est Entier256 = soustraction( VY2.valPoidsFaible, YY1.valPoidsFaible )
         Trace("VY=  " +VY.VersChaineHexa())
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K3
    identifier : 0x2e19a33400edabb1
    internal_properties : BQAAAAUAAAAIT70/Cc+OyZKmC9GXeqDKivK6i33fGLPan6OBu2zGewPewe//SBPrVSdoMWU0kyeL00Nc8YWpouk/6spyIIDdxn11YVG8hSAntpEvsC5Z+2ZPRK+26FZdxtPQ+O5RhlBq7NaOHoZYx6HcY1XC26Mv+elD+N1uxmkj7GnW8zVYKqDK3Lerg9e82ZIWABa7H79S0XvCVrBXAiGz0K06azfadRpnF1ThLvQlAp5RSSNTg3NGhoOSwhniHNRrjfmcuhyGGtI5attPVUdOf93hQkjry7m896BWDoDLBwGbsPYma68xQzFj5FNWcoP7fXR5CA+Wzphcd2r+xIvlDWl0DwftK/WUHowojgtdrF/o6Ik/b8IiW1kE9aOx3ZWUH2VzTyndrOIl8ca8C0zx3YcvmJZzwqbPuF9/5Q8UE4GKwbosRUfXpWFDsOz8bFtwvmAiToyeulwftNSuviOfu82rTF9+iKuTWN9VlNpo1k666WzL7OYZwSAgWBo/AkTKYNNC2G0GjQnRGn54OxZ+WAiIlgRiABBq1+NF5G5mnztjjD6+3xgfgS910+B0P7JtRT2QGni0AbG/hfagc7yzcYDqCpF2lKAK2YQEvonE4u3xCHpOqbLeDDIFEwxHENRVz4qWMEO6GJU0OEyZp3RFyZ8LmIzTCF45LSPvcbPzWgv4R+F/iLz96ExAePyYMFpA2cGZuIHgoduHQRFbdpXXX40TE7XYY8I3+Yrfafg=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         _0_256 est Entier256
         nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         // trouve x,t,r tels que
         // s*N - t*_Racine = r et r < nMax128Bit
         soit (s1,t1,r1,i) = PGCD_Etendu_StopMax(N, _Lambda, nMax128Bit)
         
         soit (s_,t_,r_,i_) = PGCD_Etendu_StopMax(N, _Lambda, _0_256, i)
         dbgAssertion(s1.estEgalA(s_))
         dbgAssertion(t1.estEgalA(t_))
         dbgAssertion(r1.estEgalA(r_))
         dbgAssertion(i_ = i)
         
         _Tmp	est Entier256 
         
         Trace("************Trouve :")
         //trace("s:"+s.VersChaineHexa())
         Trace("r1:"+r1.VersChaineHexa())
         trace("t1:"+t1.VersChaineHexa())
         
         
         // R-1:
         
         soit (s0,t0,r0,i0) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i-1)
         dbgAssertion((i0=i-1))
         dbgAssertion(pas s0.estEgalAZero())
         // R+2
         soit (s2,t2,r2,i2) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i+1)
         dbgAssertion((i2=i+1))
         dbgAssertion(PAS s2.estEgalAZero())
         
         Trace("************ -1  :")
         //Trace("s0:"+s0.VersChaineHexa())
         Trace("r0:"+r0.VersChaineHexa())
         Trace("t0:"+t0.VersChaineHexa())
         
         Trace("************ +1  :")
         //Trace(s2.VersChaineHexa())
         Trace("r2:"+r2.VersChaineHexa())
         Trace("t2:"+t2.VersChaineHexa())
         
         
         // renvoie x + L*y mod N
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         // renvoie x - L*y mod N
         PROCÉDURE INTERNE _FMoins( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.soustractionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	RENVOYER res
         FIN
         
         
         // vecteurs tels que  X + Y*_Lamda = 0 modulo N
         V1_X      est Entier256  = r1
         moinsV1_Y est Entier256  = t1
         V2_X      est Entier256	 = r2
         V2_Y      est Entier256	 = t2 
         //_Tmp est entier256
         _Tmp = _FMoins(V1_X, moinsV1_Y )
         dbgAssertion( _Tmp.estEgalAZero())
         _Tmp = _F(V2_X, V2_Y )
         dbgAssertion( _Tmp.estEgalAZero())
         //Trace("****** ")
         Trace("X1 (v1.x) = " +V1_X.VersChaineHexa())
         Trace("X2 (v2.x) = " +V2_X.VersChaineHexa())
         Trace("Y1 (v1.x) =-" +moinsV1_Y.VersChaineHexa())
         Trace("Y2 (v2.x) = " +V2_Y.VersChaineHexa())
         
         X1Y2 est un entier512 = multiplication256x256_512(V1_X,V2_Y) 
         dbgAssertion(X1Y2.valPoidsFort.estEgalAZero())
         moinsX2Y1 est un entier512 = multiplication256x256_512(V2_X,moinsV1_Y)
         dbgAssertion(moinsX2Y1.valPoidsFort.estEgalAZero())
         // Delta = x1y2 - x2y1
         _Delta est Entier256 
         //si X1Y2.valPoidsFaible.estSupérieurOuEgalA(  X1Y2.valPoidsFaible ) alors
         //	_Delta = addition( moinsX2Y1.valPoidsFaible, X1Y2.valPoidsFaible )  
         //sinon
         	//_Delta = soustraction(  X1Y2.valPoidsFaible, X2Y1.valPoidsFaible )  
         	//_Delta = negation(addition( X2Y1.valPoidsFaible, moinsX1Y2.valPoidsFaible  ))
         trace(X1Y2.valPoidsFaible.VersChaineHexa())	
         trace(moinsX2Y1.valPoidsFaible.VersChaineHexa())	
         _Delta = addition(X1Y2.valPoidsFaible, moinsX2Y1.valPoidsFaible   )
         //fin
         _moinsDelta est Entier256  = negation(_Delta)
         //_Delta est Entier256 = corps.soustractionModulo( corps.multiplicationModulo(V1_X,V2_Y), corps.multiplicationModulo(V2_X,V1_Y) )
         Trace("_Delta = " + _moinsDelta.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         
         // renvoie V1,V2 tels que
         // V1 + V2*R = K ( modulo N)
         // avec V1 et V2 "petits" = sur 128 bits ou a peut-prêt
         procédure interne _calcVecteurOpimise( _k est Entier256 )  : (Entier256,Entier256) 
         
         
         	// coefficients tels que "(K,0) - B1*V1 + B2*V2" soit sur 128 bits
          	_B1 est Entier256
         	_B2 est Entier256
         
         	K_Y2      est Entier512 = multiplication256x256_512( _k, V2_Y)	
         	moinsK_Y1 est Entier512 = multiplication256x256_512( _k, moinsV1_Y)
         		
         	// calcul de B1 =  K*Y1 / _Delta
         	//	         B2 = -K*Y2 / _Delta
         	_DeltaLow est entier256 = _moinsDelta
         //	_DeltaLow.multiplieParUnePuissanceDe2(128)
         	     K_Y2.multitpliePar2puissance128()
         	moinsK_Y1.multitpliePar2puissance128()
         	// calcul de la division entière : donne un nombre de 128 bits si K est sur 256 bits
         	reste est Entier256
         	(     _B1,reste) = divisionEuclidienne256(     K_Y2.valPoidsFort, _DeltaLow  )
         	_B1.multiplieParUnePuissanceDe2(128)
         	// idem B2
         	(     _B2,reste) = divisionEuclidienne256(moinsK_Y1.valPoidsFort, _DeltaLow  )
         	_B2.multiplieParUnePuissanceDe2(128)
         	trace("_B1:"+ _B1.VersChaineHexa())
         	trace("_B2:"+ _B2.VersChaineHexa())
         	
         	// v = B1*V1 + B2*V2
         	// B1*V1
         	B1V1X	est Entier512	= multiplication256x256_512( _B1, V1_X )
         	B1V1Y	est Entier512	= multiplication256x256_512( _B1, moinsV1_Y )
         	// B2*V2
         	B2V2X	est Entier512	= multiplication256x256_512( _B2, V2_X )
         	B2V2Y	est Entier512	= multiplication256x256_512( _B2, V2_Y )
         	dbgAssertion(B1V1X.valPoidsFort.estEgalAZero())
         	dbgAssertion(B1V1Y.valPoidsFort.estEgalAZero())
         	dbgAssertion(B2V2X.valPoidsFort.estEgalAZero())
         	dbgAssertion(B2V2Y.valPoidsFort.estEgalAZero())
         	
         	// vx     = b2*v2.x - b1*v1.x
         	moinsVX	est Entier256	 = soustraction(  B1V1X.valPoidsFaible,  B2V2X.valPoidsFaible )
         	// vy     = b1*v2.y - b2*v1.y
         	VY      est Entier256    = soustraction(  B1V1Y.valPoidsFaible,  B2V2Y.valPoidsFaible )
         	moinsVY est Entier256    = corps.négationModulo(VY)
         		
         	// k - vx = K - (b2*v2.x - b1*v1.x)
         	KmoinsVX est Entier256 = addition( _k,moinsVX)
         	Trace("K-VX ="  + KmoinsVX.VersChaineHexa())
         	Trace(" -VY ="  + moinsVY.VersChaineHexa())
         	
         	//_0_256_ est entier256
         	//VX_Test	est Entier256 = VX; // corps.additionModulo(     B1V1X.valPoidsFaible , B2V2X.valPoidsFaible ) 
         	//VY_Test	est Entier256 = VY; //corps.soustractionModulo( B1V1Y.valPoidsFaible , B2V2Y.valPoidsFaible ) 
         	
         	// renvoie le vecteur (Lamda-(b1*v1+b2*v2))
         	renvoyer ( KmoinsVX, moinsVY )
         fin
         
         soit (k1,k2) = _calcVecteurOpimise(K)
         
         _Tmp = _F(k1, k2 )
         Trace("k1+k2*L=" +_Tmp.VersChaineHexa())
         //_Tmp = _FMoins(k1, k2 )
         //Trace(_Tmp.VersChaineHexa())
         Trace("K=      " +K.VersChaineHexa())
         
         // P = ordre de la courbe = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         // un nombre d'odre 3.
         // ie tel que :  beta^3 = 1 modulo P
         // NB : tout nombre d'ordre 3 est OK.
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         // R tel que map(P) = R*P
         // racine du polynome : X^2 + X + 1 = 0 ( modulo P )
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         dbgAssertion(_Lambda.estEgalA(_Racine))
         
         	// (x, y) => (βx, y) 
         	PROCÉDURE INTERNE _map( _p est Point256 ) : Point256
         		pointRésultat est Point256 
         		pointRésultat.x	=  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         		pointRésultat.y	= _p.y
         		RENVOYER pointRésultat
         	FIN
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         Trace("Map(P) : " )
         Trace(mapP.x.VersChaineHexa())
         Trace(mapP.y.VersChaineHexa())
         //moinsX est Entier256 = CrytoLib.corpsECC.négationModulo( mapP.x )
         //Trace(moinsX.VersChaineHexa())
         //_Racine_FoisP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( P, _Racine )
         //Trace(" K*P : k = "+ _Racine.VersChaineHexa()  )
         //Trace(_Racine_FoisP.x.VersChaineHexa())
         //Trace(_Racine_FoisP.y.VersChaineHexa())
         
         // calcul optimisé
         P1_optim		est Point256	=  CrytoLib.courbeBtc.MultiplicationScalairePoint( P,       k1   )
         P2_optim		est Point256	=  CrytoLib.courbeBtc.MultiplicationScalairePoint( mapP,    k2  )
         
         KfoisP_optim	est Point256	= CrytoLib.courbeBtc.pointPlusPoint(P1_optim, P2_optim )  
         Trace("KfoisP_optim=")
         Trace(KfoisP_optim.x.VersChaineHexa())
         Trace(KfoisP_optim.y.VersChaineHexa())
         
         // calcul standard de "KP"
         KfoisP_defaut  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( P, K )
         Trace("KfoisP_defaut=")
         Trace(KfoisP_defaut.x.VersChaineHexa())
         Trace(KfoisP_defaut.y.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BQAAAAUAAABd4biPtdLQOwfUFiqrit8H4xfGqKyz9t6VLxCUnNZRQiLPVs82PZNE+UVdKRzjizyeuKyRur85gNMUfqplpmtNDnQWQla9zo+GH9+1EfUJ6w17Dn/egD/gv+Hhywk8c9unIdzEp7EHgaAqD28w7Agveg4u19PBcKGZtQ==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BQAAAAUAAABqPQh6HC8RxAVkp2SqPYLuZrfVhd+1KX4lx22hIT8uqEpE6yP7Sbc2rmVqdmL816EWzXOkEe9ijOtYwchZKAfpy3B1cNqhpJgsnbUs
 code_elements :
  internal_properties : BQAAAAUAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCEDURE MaFenêtre()
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 2
   -
     code : |1+
      
      
     type : 40
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     code : |1+
      
      
     type : 180
   -
     type : 230
     enabled : false
  procedures :
   -
     name : PGCD_Ex
     procedure_id : 1994461367820771349
     type_code : 14
     code : |1+
      
      PROCEDURE PGCD_Ex( nA entier, nB entier)
      
      dbgAssertion(nB > nA )
      
      r, u, v   sont des entiers
      r_,u_,v_ sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      u  = 1
      v  = 0
      u_ = 0
      v_ = 1
      
      tantque r_ <> 0
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp,vTemp sont des entiers
          rTemp = r;
          uTemp = u;
          vTemp = v;
          
          r =r_
          u =u_
          v =v_ 
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	u_Avant est entier = u_
       	v_Avant est entier = v_
      	u_ = uTemp - quotient * u_
      	v_ = vTemp - quotient * v_
      	//trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " + u_Avant )
      	trace( complete(r_+"",4," ") + " = " + Complète(uTemp+"",4," ") + " + " + quotient + " * " + u_Avant )
      fin
      
     type : 458752
   -
     name : PGCD_ExR
     procedure_id : 1994470541871085041
     type_code : 14
     code : |1+
      // version résursive
      PROCEDURE PGCD_ExR( nA entier, nB entier, u=1, u_ =0 )
      
      //dbgAssertion(nB > nA )
      
      r   sont des entiers
      r_  sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      
      
      si  r_ = 0 ALORS
      	renvoyer ( r, r_ ,  u, u_) 
      
      FIN
      
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp sont des entiers
          rTemp = r;
          uTemp = u;
          r	  = r_
          u     = u_
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	uPourTrace est entier = u_
      	u_ = uTemp - quotient * u_
      	trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " +uPourTrace )
      	// récursion
      	( r, r_ ,  u, u_) = PGCD_ExR( r, r_,u,u_)
      	
      renvoyer  ( r, r_ ,  u, u_)
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAAwjDLmDSZ0H1P68nJIeNfqR9EvRjU/K+sVcM1T6rhVNr+VTV1mZ/rmoweYbFDZUhBGcv8UsxlDxVCOnb2U/SQOvlGWzNby3/w/V+ppSymxv+Vh
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1b7cfed701529005
  internal_properties : BQAAAAUAAAAa2Zm8J9E/zh+/WIrVvz1fER/So3PB0gjQuxc1xKQVWY4ZDm5lfg==
custom_note :
 internal_properties : BQAAAAUAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
rad :
 internal_properties : BQAAAAUAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
