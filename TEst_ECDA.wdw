#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : TEst_ECDA
 major_version : 25
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : TEst_ECDA
 identifier : 0x2b7cfedd00d3a562
 internal_properties : BQAAAAUAAACxHeUIxbZNvvEi196KSYVfgKITg89gyzCvyEIeuuHEH0c1FyBDd7UCXGpUHONBGjWYzNq138gyr2XMYBQH/jCbSb8o08CtbXdmFdbYRb9d39KxuXAGlophEQPGa5Ee/xqqzY08bFXeq50NsCK4yMQMDhpoDFep2crWxtTV4d62rxxmFD3XWU+I5ksQWjS1cWtQawRqmx0aU2tlT/TdULG5ECWCIcf4v99Wcgn13Gtgw1mtluYC42LmfFSwdzud/z7zHGgfKKQbuc2dx0fMr/moPNRj1GmUXDEXaya98fq7OBdOEV9jQPcLkrCnrYmvHbMkJFod5Nh+19tMyiW5e5SYQ6M4nuYk/4cOvrduQk6gFQ97udkAWTQdc9/foDhyGa77HOiRG7QOdvmKYdVi4tIqSlFrzYBIruf0j85FzXUtQwF2RRAEPqQvd+gdoaEquvJQ+uih7XX8s1JKU0yX641bM9eZnuo8fRjoxHWoJPZnZNzNS1Xzc+4gvGEDuuli/sharV8pTQ8yRqyFaHcGJ13zoQeItBRFQ1vDT3j93/uBa7vPELknYBa6FZwt7V4dJ0De25XgVuMBGkaQ0eAiyO6IDL95BVqBaSyTfdJ0yGSDkiw5HPLBH8aosMc2PsYG+/Pz9Pje3oK+2MWAoTJ+bLkLjnMzPnBEpS02nC+pCi6cdQlxevZXx+exobtWrFyE9sohTsytDmQLSydH/jM3SnN1a/Qwg5aWgvfAZXRE3mBFDrSO+naaRlr0C677WwUZUkAGlKWYwq3MCN5UlaeYIoqgRDIBA0857UXLe9loERkGmjTGWSA8d/RSidr6D4shQKIgwfBhQ4SYsj2Qa3Q=
 controls :
  -
    name : priv_pub
    identifier : 0x2b7cfee80119d106
    internal_properties : BQAAAAUAAACJvP/pvrziKQbzKHvWLFOg++WQlYdD6hZX+/GUiZfRibJIj6H0clWFydRSC+dRiC0AMO+6JurCv6+nc4efjFAXgjLwIA9Wix2NQYA5W69tKCU0Yyi3miiQvXRFyCgerN+N7g7tyCi88yOP1dcf9nS9PjvaITblhgv+xC3WStL+mK/ZCb+t9mtN4FB3mQ4TbZ/xSWNP2TxKA+kPruARjiJdREJxI8f/QKVRepbQjpruFJW6k8t5KBuR4qLLl2/BZAcit/5kEOBhgn8fXkA6RDJ0jj4TP33SS27PDkR8rRtfso+TJjFlbZrLgyWln4UIN3+7h3RKOy7kB4MSpxkZXuwfWvRhhF306p7gT/nq0SB26y65KJHipR3UPxwBWMsgAxcaLc/wy/P3wNC5xfjxTKqv3z1OMLW7b7n5ySyC4D31sbRHGbgC6dPKYs0o2pQ6Ln1VU7E+99FcDqO79YcdO/s3HOxIp5lglHkFt16NTW19n0LHjWk/iRiupVMmC6PAhGqCvyWavQO+Mk0B+JN60nlqVzUrP84CmGLRLhecSZp4GalThHv/AXoYw4r7jOE+8+WTCNDRY0p59QmBDpSjn8xhOuv30MXHcrAocV6b1E2iB6HoOVvruj94B5fg05s9oUPjg+ug4LlXgCOKi+qNHcRske6g4498oST2cdeKmRs78CUwZ4NaON9yMzcVOU0rwR5dZsThWo80amDJTSb+Q4R4RL2JZ4f+uR8z7JZxyS+iqbGbq7A0JEv111wxLUg8HqaH4AsyPC0vUrTTdS4=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         //ClePrivee est Entier256("75be5c76cde3bcb877a523f618c839cb6ac58269880288734acee9473a180744")
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // 5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b
         xOK est Entier256("0x5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         //xOK est Entier256("0xFD0F6EBE95AAFBED3C431047BB3D9DEA4324B8D6CDBC16D35AE30AC22E9548")
         yOK est Entier256("0xb809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         
         
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
         // b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : FIn1
    identifier : 0x2b8390ec00c21e47
    internal_properties : BQAAAAUAAADPt/DxLo32krAsXyQ87IVy8qTdk65ZhCR9XZUqhYYpoZVEPomYEu0pC1T0EF6d+G29HpRwJnrZMfp3rvgyPtW4zBN6fXm0RmevnDc2aN48lOpEIzg7Mp9GqATxgTOs8MJOldP1MaG6KlGkqk38rQScL0lFpEoCnrcJQi9CGNwFWhOCF/qsCUNoo3shctez2MhlpF3Lq7pcDa+frGoevHaJbdCH27RaWr+lY7UCOrclg5AuzWR8QemcY45fp9wcUGn7tkb+P057BKK1zjYfpwgFOSc8qg6QH+lUefego60LA6yNSAC9FQV0n6W7bB0lXCt4W7PXwsX1AGz3bZQKfQydcUlSX945o4ONo7g3II82EF7GagmtJErMyWwpieJ9R0oNMfQaS/yZIsHh0BNfm1b0ntBBD41At/FETVlvwCwLrF3whI3ITh2kmy2bo+ijMKq0IorXF1b6PLwNpsrpck2mmT3NxNdBFtti81/wvzhVMx0mjAw5aPyCroX9fEunGOd1tuRRlZbe4oTx1Waar4mRIGKajhZtQqwAksUIR+9eqU0rWN0Wl2lJzQ1HdkIo9wudIjKz9msFi1WJU1NBWpRLDJwOBl1+ooz219CHsvl2CI6q1NNBULjPzRE5kA3bkehOhE/RfhtJeEKCIKuZ22ZRa4rhPnmVqkT5talpAlhhEGrhwEspPv9KOcj43Qa9yD+RpNrSiBXLXKR2Kbbdf0yEZbhE
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         ferme()
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_64
    identifier : 0x2b8e1e360145dde5
    internal_properties : BQAAAAUAAACOgZ0bSvcyUlKvOdgf7gMZo2k/2VObGO+mlGXie5o3fMM70rMrFoSDg+8S26Y4IQreeRYmbUOUdky88+oXWQIrAkvZ+ha7enZYtq42EGa8tFnbIPooBj9iTMSX/o0JG4m8WOUJXCtXiuuCHy0zcB2yipdQzIOXBaWgBaUs78ptmFnpG9LwcSQeajSbjPSutVV/I5CKTU9fXBrvi4+fHU9DAjdB56bkxiVm5PewjOF0qnVJ5x1YTvx3vMtXKJsgUbnI2HQ9TKLOnXC9gQInVvp4f63Us46zgX4RFEiQ7uVwsGWZqtc+7E5tSIYpBAhT2sHyD7Lad+Uwuz8Ufoy54X6aumhsAtROYu+Ak1KXBV7eJXrMjKI9+ggpsO6lfWoPKTUQnRoYFWDZ9/iferWt8ayZ1xIhy6WoA+4zzduroLCLZ9ymMvsyZglPpFl9W0wxpuFTpmKl4SDMS3WHCuIdTkVBRH37FqVzcIbP32mM95Y77YIsgr4nBHzPPe0BHhEjQBJsRFw1XZ7ys6O5B9Bgu6lOrbZkVAivrB1HrnXMXr8CUuLv9v/sD93GpKXr9KwUNrZgsUPU+HRTbQ5zccQ3iEIuoTe8YBQ6hO3EBfTvHrPCJZdUXD9L5/xk/VAA10ijlMzANXQN9t3UD1MqleWBYzZ2PMRii+ITJX8uXxnmKgFmqMSENAthBcvLWGf+7ZUKQfhIKlh2OBw/GkAMVP/SvnTb0SaccaNgaM7Wh48=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         PROCÉDURE interne _multiplication64x64_128( nombreA entier sans signe SUR 8 octet, nombreB Entier sans signe sur 8 octet  ) : Entier256
         
         	//@TEST
         	Résultat  est Entier256 
         	nA est un numérique   (38,0) = nombreA
         	nB est un numérique   (38,0) = nombreB
         	n64 est un numérique  (38,0) = 0x100000000
         	n64 = n64 * n64
         	nAB est un numérique  (38,0)  = nA
         	nAB = nAB *  nombreB
         	sRes est chaine =  NumériqueVersChaîne(nAB,"32X")
         	nMax64 est un entier sur 8 octets sans signe  = 0xFFFFFFFFFFFFFFFF
         	nMax64_num est un numérique (38,0) = nMax64
         	//buf est un buffer sur 16
         	Transfert(&Résultat.val0,&nAB,8)
         	Transfert(&Résultat.val1,&nAB+8,8)
         	//Résultat.val0 =  ETBinaire(nMax64, nAB ) //arithmetique._2_Puissance64) //, 	arithmetique._2_Puissance64 )
         	dbgAssertion( Résultat.val0 = HexaVersEntier(droite(sRes,16)) )
         	//si taille(sRes)>16 alors
         	dbgAssertion( Résultat.val1 = HexaVersEntier(gauche(sRes,Taille(sRes)- 16) ))
         	//fin
         
         	renvoyer Résultat //(Résultat.val0, Résultat.val1)
         fin
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est un entier sur 8 octets sans signe = 1 //0xFFFFFFFFFFFFFFFF   //0xE6B52D16CF375361
         V2 est un entier sur 8 octets sans signe = 0xFFFFFFFFFFFFFFFE // 0xFFFFFFFFFFFFFFFF 
         
         ResOK est Entier256(  "0xcfea0d3dc68974efebb6f377ccd60ac1" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = _multiplication64x64_128( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Génration_Table_Point_2_N_mon
    identifier : 0x2b8f620400c6b0a3
    internal_properties : BQAAAAUAAAB1eBy6xgWphgH4IVpIyUiYp7AWVt7SyGmZLBeWBYeTMSIms0aBJoC5ENCCYpzUcd30JF+1zxqwXfl7PqoI34TokUs5i4CoJj8MjxDejyxWKs9nClSb924YSsGLKXdMmezLzFCA5sM01JPcxhZaYf3ZaU+i0HXkm6SVESV/utohwCZt2L5ZPjUi4oTGpMjpker+7n9ZkmMnEC6vDAETEPYJE0wbNsMoP2gQ00SpSPr7Uv3q2qUPGCc8uOwa3f27nDynpN/9hT8dlcLvhlWURP/kFg2wDRhXEe4qoynBFwTXOQcqYxaXTi4L+Lng47iR1VAr5lkyQqSkC6ELT9HORXaH262XHOPvHxg2TTgsthAmjAzVn+8cS2LOoEBpa9Lw0c2+JUFFohDnlaGh7+CgsjVGGVIwyHri21ji8wxAzS3MyJzaH7xz5DULBSU+DH0mM9a7KJPolFBq+TbRFfE854oGuO9IRXThMFb0n3yjHinmSH7sLyHK2swnBOXO8YxkQfOuYMlyGqqEt7Jn6I+XqAq/+1ijs6/FGBdQwqyN1/HMs7Sl45wJe7+aFbdAFSbO9BzirhnmoldI02MyPfE3ioALTuVmb7cZeZQ+bA+aYsouCdTaluLlaqcohzI1FvN/iUuk69ie7ZeyIcsxvMjCETBSkjd7vuUgVA5SvJ4Sml6Huob7CO9WHZqhL9XvU8AVxGTUMs0HY/X7JNwjYODHUKFjfZ98izGGyNgQIFWQwZKJm/wjgXCDzscAQS14aEso2Gjp
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire dynamique <- CrytoLib.corpsECC
         ecc   est CourbeElliptique_secp256k1 dynamique <- CrytoLib.courbeBtc
         
         //GN est PointFraction256 //= CrytoLib.courbeBtc.pointGen
         //_1 est Entier256
         //_1.affecteAvecEntierPositif(1)
         //mon_résultat   est PointFraction256 // 0
         //mon_résultat.x.dénominateur = corps.X_to_monX( _1 )
         //mon_résultat.y.dénominateur = corps.X_to_monX( _1 )
         POUR i = 0 a 255
         	valeurKPow2I   est PointFraction256  =  ecc.TabPointPow2PreCalculé[i+1]
         	// vers mon 
         	mon_résultatvaleurKPow2I   est PointFraction256 
         	mon_résultatvaleurKPow2I.x   = corps.X_to_monX( valeurKPow2I.x )
         	mon_résultatvaleurKPow2I.y   = corps.X_to_monX( valeurKPow2I.y )
         
         	trace("  " + mon_résultatvaleurKPow2I.x.VersEntier256(corps).VersChaineHexa() + " " +	
         		  	     mon_résultatvaleurKPow2I.y.VersEntier256(corps).VersChaineHexa())		
         	Multitâche(-1)
         FIN
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_SigneNombre
    identifier : 0x2b9198d600a6d698
    internal_properties : BQAAAAUAAACl3iqUhgR576y5zgepUIN50j6MvMuqgSyNG2SGWYdaJ+l/lPccMIL9T9Ew01g30gnYeXRQKkmWmAgqy0I7JONKHv1V7t6ZhsNAxLYyo8CsU/L3RaoHTt9Ph2Sy23INaH8uSTenP+678DVJxoG5XG+02jt5lSPzjviqrtrHNN+WVs4Q4cPEbIRiMeyq+6ouJMnBqG1hIpHtz+HrvbfWq58bTKSxcTcY4zSo5aD+7s4WXrFHzx6cAzn2554RXmde//NXGXnTSjr3qGmv49DkjZOY631eP43Uub9WkR5/aLVSsUl0haT5h1duq5xHKbGTFbFVE/G1i+KOdLONb9HEgubiPbheAbN4L1TJ8xvGo89LMgjtZARA1KiumFok2FhJL6oBFubPhfjBq2QZucjhb24Y9rkr7r1q8apHw3700mCjPqNdrhLKEI+bEKfSTgxf8PrwtRQESVxQgT+j/d1JeJPuFVDtwXudRipjYfzJy857bKE9VDNjOnaNL8EMr8lRmu/5XwyYsUZa31/HduGqd7U51EOag4z7sN2neLXMlmBTt0c7RSHtIJxPFYiVTIUxGzTAslOv+ySgB6MawwVU503q6RaJiN/wNJ8YVlxZ/4jRwVjDA4PVCCOYBzHEhQNiYVjurGtEkRh7t/U2D6OmJllMQIw6ks2pXiRnPonuEMmu04NYIZHzwG9+S1gZZkIJYYEJjE+FdH804aBy90AIPDACf1VJ3jhx/xUEYnNK51JKh/sGVDYC
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature= CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         retour
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         sERR est chaine
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_65
    identifier : 0x2b9a01bd00828070
    internal_properties : BQAAAAUAAAC4mbScLuHaVsvMXVeFLY8QiL6LYJVdGBzQ6OXB0eTv1kg/IGlfsfQT6gQY7Lajgu59jjrql30GQrabA1qyqsTxh2An5g5dqAZylZYdXNETZCPk6L3er2e3rYNPUt7Td8LK+9f35rtajln8lOvO2eXzT8DAS330wYj6lwyvigl2aFvoxy8LWZT4+0rGuiOBDFc3T9TW++nGvDmdSH7VGK9O+VOI0XKFmOxrHwQ4cT0+o5SqRfV8eNmq2gO+lb/j1jFbXWIIJgffel4Wq5FksBAIgZICWSanjkFrEiio9re5dbTD8mmFIyvejDOW6wNSqDEod2z3Abvzl8RBRh9sM4+GjHDTTN6GWoT3KsTfCjQWTZmIXHyF3Jr5Fz642iehbaFlYcsfB9kvuHiK2O197fDH5J9lg7WP7vEBFST4tFrV3aevZJSpBqcAPCjIqHHPVZl/qsiLzmwat5lhhdGcIZpxC1Hq9fjKtnPnCK0Q8LZnvzbc3aWN5z3oBGBM82Y6q15vwVv+gze/SQ0qOb4mPG6MHXjNeOF21LbC2p0cJtt0nwBFxru63VQ9T91nstUuD/zHQhx5BMCiQ6ZmwenTChCsWlGg1vq6hHW2NS6HRo8Q9GmeUY5SSh34f3wKJhlaSRGmFh8iFVcemrSws5FVgWWyqd1JdNlUmP56zi+kXvGe8qBARVQZTr75AWyATPT93P4bWccaAenNvgZgRI/emJVU6flx2RpZ93fJLB1kjJ5Vp7o=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est Entier256( "0xFFFFFFFFFFFFFFFFFFFFFFFFFF" )
         V2 est  Entier256 ( "0xFAEAAC7C6663B93D3D6A0D489E" )
         
         ResOK est Entier256(  "0xfaeaac7c6663b93d3d6a0d489d05155383999c46c2c295f2b762" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = multiplication128x128_256( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEst_Div
    identifier : 0x2b9d499901f6ea31
    internal_properties : BQAAAAUAAAAQSmyPsoLD1TRyZkbCeGLRELwCkpBygueutIjC7jIBzDt6/DpGal8sbF8/zCwvFwKylCHj8ip16ZHhYaSevUWMFp4z6WY/936G7bGCDL3F7V/2iCp/QiFKmQmWgZY+49ejJ/DT8eIGuQ4Bipx2Z2yAP/bIRIUWn6modzDtT++hcJbBX0vE5UK0y08bYtRevYmwwhwKpCwtsyQUc1LtMkKtd4PdWkcA3AsvfK9/GFyt8kJ0eBZtmu0l/MxnQvb8R0MwCZax5If6gfzRA3NyrRQ3ecHi43CML9VxVvJfE+QIsm1TpeMHxwFD2zfZW560eE6SSD+fZfZo3VBmShWKMeVUf1OIGs8fOjMsIlfqWfPuUQKKHYtWgeKsglYOLcj+VunB5C8VleUIN9A0CmyiplhIkLvJeTvnSbCRf5bBuyijHD2QTRO6X/861Tf3WwWjC67yXMmyBXO8OgNYC9BI3zsG4+mB3NP/OmYjRHDAMTCD+lXtIAwXRwJ5hxewkMEXwnSAZjffPuhFdTUbFBCq+Z8qs6eGMeTobjWcDB2o4QJeBflQm3Cf0iY/3dcAQO7hhYLrmcTxSDFi37Z0QR2uo/67M37VvsU1XdjlLqjXdL/LE0MW6bpFXR485DtAFsVuhpLcNvzMy/9154/9oGRWOCal11Jkr5ZG9z9mjI5RTpEL0ndmnmmXp+0/PPfaawUoaRTskHO01YuUGUfcg1W1M9tdHV/q4vZKiQ==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         	PROCÉDURE INTERNE _VerifieAdivB( AFormaHexA est chaine, BFormaHexa est une chaîne, QuotientFormaHexa est chaine, ResteFormaHexa est chaine)
         	nombreA est Entier256(AFormaHexA)
         	nombreB est Entier256(BFormaHexa)
         	Q_Etalon est Entier256(QuotientFormaHexa)
         	R_Etalon est Entier256(ResteFormaHexa)
         	Q,R sont Entier256
         	(Q,R )  = divisionEuclidienne256( nombreA, nombreB )
         	SI PAS Q.estEgalA(Q_Etalon) ALORS
         		trace(Faux, Q.VersChaineHexa() + RC + Q_Etalon.VersChaineHexa() )
         	FIN
         	SI PAS R.estEgalA(R_Etalon) ALORS
         		Trace(Faux, R.VersChaineHexa() + RC + R_Etalon.VersChaineHexa() )
         	FIN
         	FIN  
         
         
         _VerifieAdivB("0x23456788fffdcba9877", "0xFFFFFFFFFFF", "0x23456789", "0" )  
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : PGFD
    identifier : 0x2b9d55b302462d21
    internal_properties : BQAAAAUAAADfp+w6lt77h2O5DJW9pfqtcXtOSjB1WogJS7YKWmuafGCcfV8Fb1vqdgvhhx/WIZY8/8/BtzMcNm2GV9N3Gyp5szgNME/2oaYg3Gq5f4dtwq0LE276sRw8RxvT7fiSVjEWIhu2saUhC8B6WQtkdwrmsbuyc8AMaAuj9h+6rus/NLX9wHZd2vfONny4bm85WAlFtobhPfAOwafbCLBn4W57k4f4WymFt9JzohcmIpWVb8bOahYtEjsxqZ7wjDOuiOIlXTLGzn0VdE29nYSYgXGgc5nrvK017x9hGBY2QSxJ4RLHT6OlQHYkeerR87HV8DvqezHKz0a4ypjY3lbpCkHvczgMBqZnZ6Q23H+P3LlE9Q0T8njHM+M0HMxvkZK4+ZA2rKQa/h/TO5I6uxRY5i3Nh2HwHvwXEK5RwYcFvUpQR34kpLz/c5gul7PqPYUnNGfNJqzlRAWv1PuCTtgSy1IRFOF4bxKDiRC/cpuQTyxoxxgVvf3EwxXlWfdnylGzFwddCtz0/wrSF1k7m2zgDSK/RkOJKJ/M6wnaEIDRMLmIOSUThbaBw2bi7m5kHVWUM4Ir0EyDY+eJq6RGIuk4kw1C4DTOgVxN+v5JAg2jmuewxmyk2FtaYddsGgv32v9YB+Io+l/j6O9tzIqg4PEn2wZz1RgRoCvJ3vipm0nP8bf4QqScB/DWzcDNIIEjqInwD4DorzFXdRwcl/eZwDtqzm8w9chU
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         nombreA est Entier256("0x23456788fffdcba9877")
         nombreB est Entier256("0xFFFFFFFFFFF")
         
         // Test PGDS
         _pgdg, u, v est Entier256
         (_pgdg,u,v) = PGCD_Etendu(nombreA, nombreB)
         
         trace(_pgdg.VersChaineHexa())
         trace(u.VersChaineHexa())
         trace(v.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : inverseModulo
    identifier : 0x2ba08bf4027a10b8
    internal_properties : BQAAAAUAAAA7fDciHSAKZzPxNGLUVbogM0N9tQ32kvm0prcwKPcCY8IaSQ5C9fEvx1/IfbooxUiuFvxEJI5t25ltY04bvpL7sIK74ezrDAhAQx0cP8Vd5f21mGl0y0VMvBJ3kUozOf9brgqjpPer2YOGBvC0Ei3AQi/iFxQXRRyqjtlNzFMfexAHL4NpYUArDFNJqMBMjsc72YQDobmR/pjfacUP9kiXsYGEluiGpg9eYcSxPHIIuEoTvo2g6GB/oqsNDO5Dfd5mMqe/+inkyUGRlodHE0BUvHhJBaDJPyRswpvtsjUoD5W+x8uUWvowhVrSEqTRiaA7KbHGNUSwym9f42XivGhKBlScW+J+gU4ESQgGox78sIvjEFYrEapjrsAZilYvd9bztF3xfVLrbDmIdVKqFAPSqFss10wXxPhuS8nT2kZFXT4CcX/YqIQHbXZ/x3AOTUrSL/ZwHB99kWzDA3hJTvK9EcUf4Y4qCOReQuY+XUu/tVDK4PyvZKgrURh851rWXg2ByRt/Xkv1tRECmMFRYpnv1FpgJSon7EIsAyeIgJvmNkLM0JsA04l03JkNj7fvPXvXtE3ECMR5lb6zAaijOBLey1l6hPGfB/iDzM4B6PkEq1leKFvnco8L/Bj2SwuHUv66rvqhpKuolVqS63gMGIOhYcFjNn00NBZZ3s5PU/pnDxX/T1b0XkG5qiHiI01URwICjBoU3t/cN00JM3hLVV/lkefZCF0sPERBMjo=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gCorps est CorpsModulaire( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         //P2 est Entier256("1" + Répète("0",28+28)) 
         //P2_Mod est Entier256 = gCorps.multiplicationModulo(P2,P2)
         //trace( P2_Mod.VersChaineHexa())
         
         
         //x est Entier256("2") 
         //x est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b915") 
         //x est Entier256("497c0fb9646881ce25a2fc68e89a129135e8715423e73fce0759ecca87d30009") 
         x est Entier256("ea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         
         inverseDex est Entier256
         y_2 est Entier256
         ChronoDébut()
         inverseDex = gCorps.inverseModulo(x)
         Trace( "Temps (ms) : " + ChronoFin())
         //y_2 = gCorps.puissanceModulo( x, gCorps.PMoins2 )
         trace(inverseDex.VersChaineHexa())
         y_2 = gCorps.multiplicationModulo(x, inverseDex)
         dbgAssertion(y_2.estEgalA1(), y_2.VersChaineHexa())
         //trace(y_2.VersChaineHexa())
         
         quotient est Entier256
         reste est Entier256
         ( quotient, reste ) = divisionEuclidienne256( x, gCorps.P )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_PGCD
    identifier : 0x2badc0020158377f
    internal_properties : BQAAAAUAAAAZYBg2Y/U9kJujDNJfvdu/S6gUdzluPvzwAM+Jvgex08Q7Qr8XO36lxIDk8X5WomPUt7cSgPCEy8K5QdMusjhvwtaLbdIHJlCN9tD41QEtHcvGRP/gikU7E2pMHjZK1Tx6skaJ+pHbIOG+uBLNbEr2s6E6sFA0Uf81hIcCMEk5OOMtjoJsJlDDaviIZqy8Hpci7zKs3a8f0o5L2hEwvY/uQky4CT1J8nuTkgaKPfhhUZO4DituglnG7PcZ/aDsHNzxeMX77cqvrBi4rTGcMQbmGixXYwmEx+nYaCewNyIzk8JCd3X5GA9XtMYzimdLp5GZsjcIr2ljcW/wGUWR/K/sMnmLx3eS2vMzmk/ez/vkW9rhzuYp8EZOhsmxZYbWYvd1sopKyzpbDsx6JIvfPlNvLGFj5WvuuZkr4J0hqoNsgZ+niJOW9vUSHO6jRUrkrw10YcjjuzycqONubmxLvWq3wyqX2PM1ajWDrGXqsblEMW//XtQR5vYyo26j9LuIeyxrmVYzd6BswpOivwRAfOD8tp3ULjb5XmKRWa/gUPN+UsXOYG1msc9h1IAXrroFTfST/fywH/f5MQEn2AEYdOSpWgFsH9KDvObU3zVjSiTj5TrpCHPRsEht2nVW/To+uwAxGKXwOwxa8J3/ayWlXr84Vd80ssVmLheT8wDa460A8Qcw3ilrvBmo3gK8zQ1fz66qTr0VRxKU9NO9heIZG0LqNc8Ft99ERDsR
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         
         //PGCD_Ex(23,120)
         PGCD_ExR(40,70)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TET
    identifier : 0x2c228a9a00fa64e4
    internal_properties : BQAAAAUAAADjo9jGAvua0OJA6Qi6Wt8anLQtf6p/aP77ZZmOZDRvJXe1BPRuUIaLkSq2suxDgjuP2OIqDABDC1DlCLLQhIf+Fo3wabwbsFkdwpF8kaD9aFtjD3ZyCwCOXWeVoaa4ID1EMrMamRN5Ze5e839mZYdW+TdC78AkdJ8rCqNS1tuLNBUBkKJNOkMy/vDOps+hcHmNjibxHaCuES97oMDvEb4zI8fg40E9z6ozOodu0p2Nb26W6paNgsthEW54DKtu2Jr13bquxvW9vH213dzY2Wmwa/H77F01X//paN7GGbzpGcJHh3sd6L4sacKRWyGtWMti46F6v4ZomhBIFibxOkHnE0iUTh6fzyw2hM9HnMF8tcXP1mRrV0dYiOAL9cZ0ZYQCOBiW8hPHvx7u59gcIknxE+10+pC7tCI9FVOpEVZ861pAeKiD59yiI5fGcanzMNupUoCxmPnTOFcm6jxG1771EO1c6xaXnRS7dodEA0h023QhUQnIxxmJ1ZuDvpWvE/vp5gAwQ/7W+6V/RxBUKX6Tot/ttPOwz10sWg5vzoeq33Ody/zfqThEAPCaAytCnWi5UiJB2Gzc7MGd8x49jBrLS3dTbmFGMecu0VbYl4gBF7dLUYifIJDXcV2RTIm8o/wi/EvJ5u8tTEpiJGsZN5J9P8Kt5sFBXuhBTfVBIwsc7JamE6a8NShFFA2z9B1o92b+sa3NgxwU/xdzNJWMsgNE6cRY
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         Signature est SignatureEcdsa
         Signature.R.affecteAvecChaineHexa("13cfb50edf248662ca8d64195cf48b26d90f4ebc1998966d0d9ead4275c20dad")
         Signature.S.affecteAvecChaineHexa("6c2134191f22d1f5fea6848fd23524297fc88c0fb296cd7e955f01370fcda63f")
         
         
         CléPublique est Point256 // = CrytoLib.ECDSA_DériveCléPubliqueDepuisCléPrivée( CléPrivée )
         CléPublique.x.affecteAvecChaineHexa("61b0c48518491955c022d99b0c73b43d947990ae361eced90d5e0d22ce3ab4b7")
         CléPublique.y.affecteAvecChaineHexa("8aa93591f1a2818ffc6e7d575bdc1312055e188616dca470aaefd5bba9b9625e")
         
         N est un entier256
         N.affecteAvecChaineHexa("f49c9d1c8a96157ce04d5651ce201778aba934c3ff245f9c64727ecb2f6fe0ad")
         
         sERR est chaine
         bOK est un booléen =  ECDSA_Bitcoin.VerifieSignature( N, CléPublique, Signature, sERR )
         trace(bOK)
         trace(sERR)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : priv_pub1
    identifier : 0x2dc68581035feaad
    internal_properties : BQAAAAUAAAApb6oqB0qRIC8kY6aXcRZz2zSnDtl466sZPqIEsn/84Eot8fhfQbYWFXsbE9Il/NrF0Te2mJo3/Dt/jpJUoW2/9ytSD/1E+vENRCWxWWHbHvMtAIK6bkWlaIffntGQ6mCrhgrucXEgTI2uQAa2ZN48NXQu0IM6xq5bp40ntyHWwfZwIp3H5BEo5hE9GdrgqegyUIb4vbArRngNY2AxQsG0Usl8LfxKIPHsrwvXEl8/6MhL3A1wJ8BQWl6xjX1qnxciqdmHAkFm8QUl7c04cR72OFfP+oAI98lgr9f3mCYejcYwJ7w9bgl4yC+pnocr8gDj/ZQiQpUc8NecGYg4F3d7H5aUTuruaBxa39wEUX4sMyEBbDj69glZJKkqG430aYJ9mnkWiz2hqLVkG+ciwqzuCWHimW+0xtQKmYIbpGYOTpA9jfq3RYFPQR7ia6HQHhJYzl/vRWTdUFWNXMGv7g5nLbpIPvPg3QVfOdLm8UVbODF+fAF7wMsDYZCojjTgXgWueRb+QYA3OgCOEdH+vglhAR9RpZqT2EGh1ANVIcFFZPUinz2WmiAiennn6amKqJnyqPWhtuVXbTNPq8+x/p7wjc/xZnea7YolCmHM2P9JyNtCVDAUZ1JDr4QluWSiYqrhAfrkCTwxKtaFLHI8diI+45lumhvV3CoUj3uUqF8L6MsZuYM4W3WHMZzq6jBr+sExLvyLphYjBwI2smLYeaMdtP8TwXnCGe9zR/xarmndyUaYS3o+p1XQSrbp65UBl0Fj9TGtouIFRFDjTRsgZUkIYiIsBPat
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("0x914f06164094ab80f14de57c15a5dead827a473c005837a5c137167db965a203")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // TEST si OK
         xOK est Entier256("0xc51b1777e1a45b4b3cc29d32cd89153ded2c45d6cadc019207f5aec8b451e9e9")
         yOK est Entier256("0x58f798f6ec04fbcb768aae73f4f58ecd55cbf7326d79adf7cf5bf620ed9acffe")
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_mult_2
    identifier : 0x2dc8390b03833679
    internal_properties : BQAAAAUAAAAePsesH7P+Sh8DRDd4EeqR7y807mmd0tx4rCJ/W9WcZgQdg4oHVhOzSqP5AdxQt6Zwx9NRD1hR/6Vudceeb+p/NUJL+lzpZ8kgyKqRruWTSW/VhJ8i8BRQtnjm3QQGSVDZ5wzjWa+XeyXUCAEZypITc9X0blqhJIC2381NmLMjdqSmjK+OvMdwteJGvWLoTodxxCgznHY+J508IABTaF3W3Xdq2RQJ/OHRpfFh/FLkDHFDWA02h8E+mnNUO6Ri5cgOlk5+6r+6vnJd8lrOUv5kmC6AJfTs4aC4CExvkjKI5AUhSJeir6aMDAcC8Xsc4MYsyCDIw355nLtPhUd3WZPUaONVMvqKBER3KHSLoTDp4dk5zcKqWgY53JcbzkgbAcz/SVMdgcRppRYG1MopS3ZijORQ1BfUA4hlXn9mtqyrEuO4Jw5wyJO/SBT9ZNbB4hIsDD16lQquNf9+AokFusXcf90kndFjLOD5rIn3+5obTL2UBaf56nK3cU7nRUszVOf1EIMaC0KCuRnM1RGApVMX3sK3+QRHUL+BK2WrlJpN3mgvo4K8EacWCODz7SqaXDsNXIekPtxFbCBald4d4iynABDlk4otW4h91opegjd8nHFxD5bSa6RrFu22CJDR35T61Gg2vmVi1x/RUE3sGOtq9CDov92yg0sGWnPRZO8UvsdGFU4K1JYOq3WY3L+YoCO0ZLk3S6KgVQBcJf8Fd4uiGJ4scQiX3YkqzTcJfQ==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gCorps est CorpsModulaire_sepc256k1 //( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         //x est Entier256("80000000000000000A00000000000000000000000000B00000000000003") 
         //x est Entier256("483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faa001") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         //soit y = x
         //y est Entier256("1222") 
         xy est entier256
         xy2 est entier256
         //xy_TEST est entier256
         
         // TEST
         //sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\DebugDLL\LibInt256.dll"
         sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\ReleaseDLL\LibInt256.dll"
         dbgAssertion(fFichierExiste(sDLL))
         ChargeDLL(sDLL)
         si ErreurDétectée ALORS
         	erreur()
         	retour
         FIN
         hModule est un entier système = API("kernel32","GetModuleHandleA","LibInt256.dll")
         pAddr est un entier système = API("kernel32","GetProcAddress",hModule,"multiplicationMudulo_sepc256k1")
         dbgAssertion(pAddr<>0)
         
         ChronoDébut()
         POUR i = 1 a 10 000
         	//API(sDLL,"multiplicationMudulo_sepc256k1", &x, &y, &xy)
         	API(pAddr, &x, &y, &xy)
         	//Trace(xy.VersChaineHexa())
         	//x = xy
         fin
         soit dureeAlgo3 = ChronoFin()
         Trace(xy.VersChaineHexa()+";"+dureeAlgo3..EnMillisecondes/10+"ms")
         //retour
         
         
         
         // nouvel algo
         ChronoDébut()
         pour i = 1 a 1000
         	 xy2 <- gCorps.multiplicationModulo(x, y)
         fin
         si pas xy2.estEgalA(xy) ALORS
         	trace("*****ERR*****")
         FIN
         soit dureeAlgo1 = ChronoFin()
         
         // ancien
         //ChronoDébut()
         //POUR i = 1 À 1000
         //	xy_TEST <- gCorps.multiplicationModulo_OLD(x, y)
         //fin
         //soit dureeAlgo2 = ChronoFin()
         
         
         //trace(x.VersChaineHexa())
         //trace(y.VersChaineHexa())
         trace(xy2.VersChaineHexa()+";"+dureeAlgo1..EnMillisecondes+"ms")
         //trace(xy_TEST.VersChaineHexa()+";"+dureeAlgo2..EnMillisecondes+"ms")
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Image1
    identifier : 0x2e10ace804c9b359
    internal_properties : BQAAAAUAAABHRyxHauuMBkJyyyr4ldl/qutBigtMbuCLWJtCIrR+97YwRwOyKk0JfNdZfVNtdpXcfLy0LuRW5tW4p0tDxUqfR3y90JgN+VBLVuwv8wYVWkiRJELZ4rOIP1V1hNRKJCGEwabVWZ8qCRcIGPis8hL/szbMRkX/Yji8Pd7NrRch0HRg3c9jQjJjxEQ3NdRNcClq3t1s5+ZmdmalWXVr0Ty6p+igiQPNjtHbhtlPerKAB0/wnwo9wk/JvggM4iYuUGh1NJjaIg7zOGDjV/u2KUhuVhGPKyxB1rzIm1fcQ3VcvQ+7QNs5oJWR5Y1CkaEl8EQZ6DFmCWzOYXq2saWTZzpuyN/XrnrUUoTs8xOIuxqAhDfjtvOXJ8qaBdz7DjLW9XT9ACFVz/C4IEE50j8O8VyqYoqiuR6zvUgv0gqxrxRnY7Pu6Ww5H8uY0GajOSWFlGa3gObfD/nwFxegYM2RIfm/P9T5lI/Ik2P8kpDNSmZhEcebngdASzO/iqaGotVnxHYnx+4Pi4/JtSmVPjNZ/19r8i79fzlatDBJm864V3KH7CJlLNM0lx7p5et95VZ+6suvNVBZ/PYwwsI6vFG++uDpagj32rHLtVYwOuoX63cIcaC+Ne28jnqwR8+R2KymdU46HCoxThwcRWkp9jMIRsGqGVBoMB/J5KJB0/3Gdfib3sx1W1uKTsxURYl4a6dp1XLFqAorqdQ9UOWKFiGGj36ZZxNVj0mRcIL/l6kpi1qbrds/GzJ6o4FBrujd2dCwsYZ9OWC9sMlbioKK5zwcjgnS6w0WM6ubd2/n4ESZs59n5+/nY8un5R3HhOE9YBOc2HBou3MM1OY7EMGy7CVRfVNZBwTMf/YWWVp0YtwxGQMbsHI8/ajbnV8F7w==
    type : 8
    code_elements :
     type_code : 8
     p_codes : []
  -
    name : ECDSA_SigneNombre_ECDSA_VérifieSignature
    identifier : 0x2c02cf800181802d
    internal_properties : BQAAAAUAAADgYTScGJgF8DYzadhpEfs1ww4OEUME1H4h6247gGiOpdz1SAjc2oAYKExhY8IQcBk7C9D3TeuA/zMvGGqBH8kyfXW/cxtVyldI+K22YDFoQTsLKSYEFYY0rnURXvQYjPBBq+1/AlNKz14LtvbGtbcDA0WIqjMw3SCVu3Ba8G/IrYuElCDQq9SgYptoVhnqNHldDvwSEacAkBayuXUqN3iTPeQhO/Rq7NYGgagsOyV9MT4AjMeahkqVPM7WXfOo5JfA8OpJ8INIBD+7FtcOlnb0OHGU/+1addpycavanI+D4B4AJd9tc7/0y9Wj7hr5sQHVgcMKtIKZZylT+lTx7SQlFLpRCO5n4nOuuamSeza8NuKavsP097buABnNWpEomrt8F19UibdqD9luFb23Ge+Oz6uZOPFmlKY6NSXGhEXAKnSsYXYsCKgSfOvCXGbmDKyjwoeXG2DJ8kiMkO/nQBhYzJ9/fZU80w4KyJuhbhucgI6xvIejML9jnG2ntcIyzS5/9mdQJtEwyT51H5EfpEJi6B/OXMjv31E+T9FxHoMdYcs7/iwiHm5umXbG/ujxyycvxdJCOtq121Mi2HL7Lh3FSOadUfn2cGBgJnECv2BS8cLgQ+2pMDO8cVO3K3JFTx3Gg62CEPnlddybJ/zxuaMRRV/z2VlWF7DxoFbnZ/4s4x1BWEK2T6LY7IexOD0XmoktyiWzqzYfc3Ma82tYvZuAbZTlHdUU5xCr62oKIUlLwnnuZEYGPQsYhtq8j0NGIuq+T6jgo/RfxCQ7wnpzVA==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         //CléPrivée est Entier256("3")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature = CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         Trace("Clé publique : ")
         Trace(CléPublique.x.VersChaineHexa())
         Trace(CléPublique.y.VersChaineHexa())
         
         sERR est chaine
         ChronoDébut()
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR
    identifier : 0x2e11a4eb00e97d0e
    internal_properties : BQAAAAUAAAD3CPTmmfHKLJAD/75THIWJ9fUv6+y0TfqNE2lMQWN0FYpsa8xgQ8VCth67WhlVkl/FXoO7hoTZHUtj2OX2iheUrcQqX6akUyugxm3vufR4/MvH1tWgwd7OyQRQtMf17TlITYnxlPgDFFqjx8FJiqCJZ2QWgeAoRCFEI25sQs+fLqbZxbchfvqO7c81YsB42jew0bgyla+31JIng4+HNU97ajdBJ1ZM1jVGhKeo/KFcirWxn7VwHpR/1BOPSNPo4aGweMSdfIoeXeBdsSqX1vJ4j2V8yxZTmRYprBAwFp1g2H0J2sfONK5tiJZJbMhTUlESl6qin2WIs9dctkxRWS4CIogcgkRmIi+w07KPde72xdpUZBrV5tz1ZBqhOa7b3QkMCYaUkXwdw5yrFtExTcAdUy7dp5GE9+p3SWcHdNwv2xiyzhfuwl0buGW5pwBt2jUf0i5RPTwQBwkTZg7Rqum14AkHMtHv5ILTq0XoG2LvEb5obgrTIKBrsTnN6tV/NKbowNgByZrmn4eVQ7wU5z3SKQIgIGSboJnb5I4v0u34NlhGhvVi6Gm1XTL/ynzFnhqBICzl/G9ZXi1zWggSBZd9mlP/z/u0oFdYUFfaoTBhtiWYbXajAmkUa1uNHB9+RNDoNoxZrIVtnip1dCJG2kGjLxcp+L9qbk7hVlSn61yNseOb3zQKIPDm/4K1EuKp6JGvmRN3+fck/93dUx6B4YvMdE+jZL4vQSl9/nY=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	//( "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141" )
         
         
         //x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         x		est Entier256("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e") 
         //x		est Entier256(3)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         //nSur3 est Entier256("0x55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0") 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // n/4 - 1
         //nPlus1Sur4   est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // (n+1)/4 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d904F") 
         //n_8   est Entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c828") // n/8
         //n_16  est Entier256("0x0fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414'") // n/16
         
         // calcul racine cubique de X 
         Trace(x.VersChaineHexa())
         racineCaree_x est un Entier256 = _RacineCaree_SHANK(x)
         Trace("y = racine(x) =" )
         trace(racineCaree_x.VersChaineHexa())
         //
         Trace("y^2 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCaree_x,racineCaree_x )
         trace(yy.VersChaineHexa())
         ////Trace("y^3 =" )
         //yyyy est un Entier256 =  corps.multiplicationModulo(yy, racineCubique_x )
         //Trace(yyyy.VersChaineHexa())
         
         //divisionEuclidienne256()
         //inverseModulo
         
         
         
         procédure interne _RacineCaree_SHANK( nombre entier256  ) : entier256
         	
         	// p = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         	trace(corps.P.VersChaineHexa())
         	// p-1 = 2^s * t
         	// p−1 = 2^6 * x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	// s = 6
         	// t = 0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	t			est entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905")		// = (p-1) / 64
         	tplus1Sur2	est entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c83")	// = (t+1)/2
         	
         	// au "hasard". ne dois pas être un résidu quadratique
         	M			est entier256("0x40bf3e95c2d24abb0dc4a579b08c0d3f52ef113a8484f33e83de2d1fef487b48")	
         	
         	
         	B  est entier256 =  corps.puissanceModulo( nombre, t)
         	_X est entier256 =  corps.puissanceModulo( nombre, tplus1Sur2)
         	Y  est entier256 =  corps.puissanceModulo( M, t)
         	R  est entier    =  5 // s-1
         	
         	//@TEst
         	_32 est Entier256(32)
         	_yy est un entier256 = corps.puissanceModulo( Y, _32)
         	trace(_yy.VersChaineHexa())
         	
         	tantque R>=1
         		
         	  // calcul de B^(2^(R-1))
         	   _2PuissanceRMoins1 est entier sans signe sur 8 octets = Puissance(2, R-1)
         	   trace(_2PuissanceRMoins1)
         	   _2PuissanceRMoins1_256 est entier256(_2PuissanceRMoins1)
         	   B2R1 est entier256 =  corps.puissanceModulo( B, _2PuissanceRMoins1_256)	
         	   
         	   //@Test
         		_2PuissanceR	est entier256( _2PuissanceRMoins1*2 )
         //		B2R				est entier256	=  corps.puissanceModulo( B, _2PuissanceR)	
         		B2R				est entier256	=  corps.carremodulo( B2R1 )	
         		trace("R="+R+":"+_2PuissanceR.val0+":"+B2R.VersChaineHexa() )
         		Multitâche(-1)
         		dbgAssertion(B2R.estEgalA1())
         		
         	   
         	   // si c'est 1 
         	   si B2R1.estEgalA1() ALORS
            	
         	   		// Y = Y^2
         	   		Y =  corps.carréModulo(Y)
         	  sinon
         	  	    // B = B*Y^2
         	   		B = corps.multiplicationModulo( B,  corps.carréModulo(Y) )
         	   		// X= XY 
         	   		_X  = corps.multiplicationModulo( _X, Y )
         	   		// Y =Y^2
         	   		Y =  corps.carréModulo(Y)
         	   		
         	   fin
         	   R--
         	FIN
         	
         	renvoyer _X
         FIN
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP
    identifier : 0x2e12d85900ed5c65
    internal_properties : BQAAAAUAAAAxTQFGuYdJOGC6IFJB+jYX8O8NpqfWVcNeGyBXE4umLw19Uoh6ObyFJ5G97o5H1nG74J4lqO2iwSROhg/7SQBNz5vWOWk9nk/qpzv7Za2pO0MOYGiWhd/E13VKfnWFhprLsZs85bs/1v4PjyApxTAu4/z0tLTyF9mJCShBpfXT9vsYfez8ndT0JGR1ujFMxwj8xcBSI23tpnjN9W/8VgOZxlAEQxOBMjh90zsoGwT+uzGmLGsRxVEm0MIOg25cSCL4K3zN9d9ao3GX76EiBsmO82sx15FqO5MU6FMp3BNFVsIRh3u9/WaJmSn6MaV8BJWdkF4Tt7faH1Jxc2XzEC8UdeNf6H9Gwy7h4KLKm1N74Zx6QKmIpCJkdBhqrHJKgeGmfjdhQ2urdJwdlXqRrMqPz8FMNL/xGcNP1+aOqNVd4XTfmdr+tb3EFjFczkYYytnRhxV80QeCNAMTVVcDJZGJPn5SpdM2flM7JcilpbWzUQRhF92zZR60vyUMQ0GiptBonWPcf3n67rd7oqV0SPXmkyWdpUqWYowJZGkwukT60FQVl5qSfyFGtTyoaXQKvHDFCedQEJKom7+TFa8W1CP9mGS24hknUNr+mAJpjfP/hO277NfZ8xd/1w16Y0mRwraE/+P7ka9CTLUudMz13uZyJnOxHio4gRaeqSyH3jzOBJKxpeS3iBnKSpu9Et8dz+bMuysHMD0Pv4oYMdbCseXMJhUXvEurkojREOv0
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         
         // nombre d'odre 3.
         // ie tel que  beta^3 = 1 mod 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //beta  	est Entier256("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         // ie tel que  beta^3 = 1 mod 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         
         // Racine carrée de 3:
         //racineDe3      est Entier256("0x3538be51af024152640d9ba6e4fa9c5ce6ed7102d28e789bcc8921c18a34cf78")
         //// Racine carrée de -3:
         racineDeMoins3 est Entier256("a6c75a9980b861c14a4c38051024c8b4245c45d44102ccf1be052cf836477ae5")
         //// racine de X^2 + X + 1 = 0 :
         //// (1 - racineDeMoins3) / 2:
         //// 0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf
         _moins1 est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
         _1 est Entier256(1)
         _2 est Entier256(2)
         //_1_MoinsRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3)
         _moins1_PlusRacineCaréeDe3 est Entier256 = corps.additionModulo(_moins1, racineDeMoins3 )
         //_moins1_PlusRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3 )
         //trace( "-1-sqrt(-3)   = " + _1_MoinsRacineCaréeDe3.VersChaineHexa())
         _L est Entier256 = corps.divisionModulo( _moins1_PlusRacineCaréeDe3 ,  _2 )
         trace( "-1-sqrt(-3)/2 = " + _L.VersChaineHexa())
         //Trace( corps.multiplicationModulo( _L, _2).VersChaineHexa() )
         
         // racine de X^2 + X + 1 = 0 ( modulo xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 )
         //_Racine est Entier256("ac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_Racine est Entier256= _L //("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf")
         x est Entier256 = corps.additionModulo( corps.carréModulo(_Racine), _Racine )
         x =  corps.additionModulo(x, _1)
         dbgAssertion(x.estEgalAZero())
         //trace("X^2 + X + 1     = " + x.VersChaineHexa())
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // _Racine^2 marche ausi ?
         // _Racine = CrytoLib.corpsECC.multiplicationModulo(_Racine,_Racine)
         
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         trace("Map(P) : " )
         trace(mapP.x.VersChaineHexa())
         trace(mapP.y.VersChaineHexa())
         //moinsX est Entier256 = CrytoLib.corpsECC.négationModulo( mapP.x )
         //Trace(moinsX.VersChaineHexa())
         KP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( P, _Racine )
         Trace(" K*P : k = "+ _Racine.VersChaineHexa()  )
         Trace(KP.x.VersChaineHexa())
         Trace(KP.y.VersChaineHexa())
         
         
         // (x, y) => (βx, y) 
         procédure interne _map( _p est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x =  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         	pointRésultat.y = _p.y
         	renvoyer pointRésultat
         FIN
         
         PROCÉDURE INTERNE _map2( _p est Point256 ) : Point256
         	RENVOYER _map(_map( _p))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR_3
    identifier : 0x2e142a0400e15cc3
    internal_properties : BQAAAAUAAACl2e0SBc07Vm48NpeiO6CxTh4UPgvLB5QdRe8WjBHP/il+6qAGwBrP66vXm/wVNIaiCNK3NHnO9fKPwgjT44qCVtmhGjm+2mmmX7i9Inc12xM5Lv0bNzQgFGtf9gigE3VfQEL0q1lyRsb8LkpK1Yw/pDHVmT3sk40T/8WGq0tm3uOuG4gG1xjYci4BYEUKyapWR/YGeZet8poDGflwGlEvkGrmL2WXVvxf4Z9+xxBEmf90+pN/52EOvkSyBb58Isz+cWYBi/VGo9OFz6uCFq+0SYnTOwvIp9MWXiPXDCMjDFAneU+jZ95Rh/OCf2kwUsu3+qC3bXV+v6xXbxfHTGGWi9HpdEGUL+ovylIQTz8BB/KowtXubksfpeHr4Y0vqIrhGbjm0tywK0Vebnd0Sb28KnTVmWYSFi54uANXv17ITnPOFrsBqoZ/V7rNM8HtjeYM4uIl/NRbLwgAgkCKrgw+VZn/fh7jf0IoAgUWHC4+lvtgiGL61uvjaL6p3HgbPWHLLBBF8o6jCZzAe7K/DbRfGpSKvg3Da6fqqTJVRbkT78UuuuEfKki/MIevguWWNKA8eeEEhMZGygeQl0CA3JqklnIGJzcFcVeZ4wdj5dmj3H6acAuuJgeTP/4BdBo+opAeenZoWvbOHpowsAHLlDQmfbiLzoK44YZsH84CAlzC2MVQpPeM+yXKWhtIe60AOAiIbW3uopXOSE0k1nNNZlupwm3/WPs7LsQdrHdg
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsECC	//( "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         //x		est Entier256("2") 
         //x		est Entier256(2)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         //nSur3 est Entier256("0x55555555555555555555555555555555555555555555555555555554fffffeba") 
         Trace(x.VersChaineHexa())
         _9 est Entier256(9)
         _1sur9 est Entier256 = corps.inverseModulo(_9)
         Trace("1/9 = " )
         Trace(_1sur9.VersChaineHexa())
         // calcul racine cubique de X 
         _3		est Entier256(9)
         _1sur3	est Entier256	= corps.inverseModulo(_3)
         
         racine6eme_x est un Entier256 = corps.puissanceModulo(x, _1sur9)
         Trace(racine6eme_x.VersChaineHexa())
         racineCubique_x2 est un Entier256 = corps.cubeModulo( racine6eme_x)
         Trace("x^(1/9) ^3 =" )
         Trace(racineCubique_x2.VersChaineHexa())
         //
         racineCubique_x est un Entier256 = corps.puissanceModulo(x, _1sur3)
         Trace("x^(1/3) =" )
         trace(racineCubique_x.VersChaineHexa())
         //
         Trace("y^3 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,racineCubique_x )
         yyy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,yy )
         trace(yyy.VersChaineHexa())
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP2
    identifier : 0x2e155cf800e36084
    internal_properties : BQAAAAUAAADOePLjsrlVAHJIKGdQiVzdtjaspIb+xu+OCpGteic7El1aEo5u6CAtmyv9/1L73HYKqP5RbJG0G4qX+NBVZQ5WBinV3HVr5jcAqaM/eAgmIPAespiYq78INReyCEnBWGQBd43UL91VRijNr3qZfR4EydIy3KML9QGz77SvHZW9EJk+a1gWx+gIYh6RkNXge1I2D3p2WZc9UgpDmZlASpF/INoGj7Untuzf8Q/uh1CUGb80iqPfJ/GuTmRyJY5sIpyOoSbhm8VmUzP1H7uCVn/USQljS2vIt7MmfkMXPHPjfCDXWW8zN74BZ6Py78mQAsv3OvAHTbVO35w3r7fXPIGm2wEp9DHErzqPmoKAbx8xh/Lo0qXuTjMXrQlTiRUHQCKJsUBOWhQ4o82GFr+cIVXU0iwdwU4q3gYAAMufx7Zg5htmHqPJ4k63n2J1ewmlRV4U+oqNpGzjh1Doikgy5kQ2XRHHxmYbxzpQKg1+pAb2zsP4EOrCTpMbUOZRBGAzFflT5NgN+sZrAQToI/qnhcx3ggxSZpU7U5+SFYY5YQ9D3xW+ytFvWvjvYDffHAGdLSf65sqn0Vf2tozY5pwB+Xpea5MHP1hOIyexs+U4nsK4y3IYr0725obccjDX3oyuP/FBxKaiBoJhgzVLn9CgL5HBpq1y1Us/aA/n2k3R10fvk+4h3xJ5jhDXLV53eoLL5btdtiahES65teTLTTpKGSy4Mx4qq1CumZEuvRiH
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         _P est Entier256("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F")
         
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         //P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // Test que 2 P = map(P) - map(map(P)) ?
         
         // on doit avoir _map(P) = _Racine * P
         mapP    est Point256 = _mapFrobenius(P)
         dbgAssertion(  CrytoLib.courbeBtc.pointEstSurLaCourbe(mapP))
         mapP_2  est Point256 = _mapFrobeniusCarré(P)
         moinsMapP_2  est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP_2)
         moinsMapP    est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP)
         
         _2_MoinsP est entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f")
         _T_fois_mapP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( mapP_2 , _2_MoinsP )
         
         _P_  est Point256 =  CrytoLib.courbeBtc.pointMoinsPoint( mapP_2, _T_fois_mapP )
         
         // ---1
         trace("  Map(P) - Map(Map(P))   : " )
         trace(_P_.x.VersChaineHexa())
         trace(_P_.y.VersChaineHexa())
         ///---2
         //_2 est Entier256(2)
         _1 est Entier256(1)
         
         
         
         _1P  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePointGenérateur( _1 )
         Trace(" P :"  )
         Trace(_1P.x.VersChaineHexa())
         Trace(_1P.y.VersChaineHexa())
         
         
         // (x, y) => (x^2, y^2) 
         procédure interne _mapFrobenius( _Pt est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x = CrytoLib.corpsECC.puissanceModulo(  _Pt.x, _P )
         	pointRésultat.y = CrytoLib.corpsECC.puissanceModulo(  _Pt.y, _P )
         	renvoyer pointRésultat
         FIN
         
         // (x, y) => (x^4, y^4) 
         PROCÉDURE INTERNE _mapFrobeniusCarré( _Pt est Point256 ) : Point256
         	RENVOYER _mapFrobenius(_mapFrobenius(_Pt))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K2
    identifier : 0x2e1826970129ec26
    internal_properties : BQAAAAUAAAAiZSEehjAHSalKbmfik9z2hrZsNoV0hm00QhCNm7+kF0YWHfRr7qMe7sBTWgP96nG5NP0vlryrOUtBIPmEppMaBQ4c/w9cWyl7EX9nbRG0gXGZUoVsYrxUp63a3nAOdIBOPHp4Kq/MB12m+MBmlSBvfFVlWOMkZ4QjvHHJC9/qK0vYn43csDPxWMaawzMqrAzdyOWyuujhsLp936N5cNQQKyt/yOO/sTGAp16qSXjvZ8cm3lKnWldz659/ctlfr/1b9VX/Eh+6qVHk4hfuhYeWC3wZKIIG0pKGVR7FHeaaejY06SlpONnwzdWYrUcLo6gjupFREpgXuDRN1dU2UDnh80ejJXcpEcTNWJlsvn3KP3Xtm+w/2+cEH4nUYJX4hoDZ5uc3/H38mEFEq3hoAp34sGueSjwllgusInwW1UhfPwiAYlsAG6R/VtHXJor/CJd4S/sDp4THRoK4mFc4Txy2YaBWZko6gGUWKmBOvoVvHIDDtaDJqzeoqJBJwHOzuv3P/8RwXjfRSA0gnGMj7qkHTRWGldyvgm62+/UmRtTPVU27b6TJmlVIOQp3JmYoU0NO9wcOd6OXaKtbWq+Yk+FLJCmDEZPcs6pjncHMv3rxmwk+jrQitQ3D3xx7dFp3Ksrqt4i/fkf6M/fO97nNKagkioi8Y1rl4z/+ayuKFgdQdj6g2ieFKgcBkiESs9fG1Qx8hhgqTFtgtS8ne5Q/Vec4uO3fumxjbdIqKyM=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         
         nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         // trouve x,t,r tels que
         // s*N - t*_Racine = r et r < nMax128Bit
         soit (s,t,r,i) = PGCD_Etendu_StopMax(N, _Lambda, nMax128Bit)
         
         // vérifie que  S*A + T*B = R 
         _SA		est Entier512	= multiplication256x256_512(s,N)
         _TB		est Entier512	= multiplication256x256_512(t,_Lambda)
         _Tmp	est Entier256 
         // r = SA + TB  : 
         bSPositif est un booléen = estpair(i)
         SI bSPositif ALORS
         	//  avec T négatif  =>
         	//  R = SA - TB 
         	_Tmp = soustraction( _SA.valPoidsFaible, _TB.valPoidsFaible  ) 
         SINON
         	//  avec S négatif  =>
         	//  R = - SA + TB 		
         	_Tmp = soustraction( _TB.valPoidsFaible , _SA.valPoidsFaible ) 
         FIN
         trace(_Tmp.VersChaineHexa())
         
         
         Trace("************Trouve :")
         trace("s:"+s.VersChaineHexa())
         trace(t.VersChaineHexa())
         trace(r.VersChaineHexa())
         
         // R-1:
         _0_256 est Entier256
         soit (s0,t0,r0,i0) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i-1)
         dbgAssertion((i0=i-1))
         // R+2
         soit (s2,t2,r2,i2) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i+1)
         dbgAssertion((i2=i+1))
         
         Trace("************ -1  :")
         Trace("s0:"+s0.VersChaineHexa())
         Trace("t0:"+t0.VersChaineHexa())
         Trace("r0:"+r0.VersChaineHexa())
         
         Trace("************ +1  :")
         Trace(s2.VersChaineHexa())
         Trace(t2.VersChaineHexa())
         Trace(r2.VersChaineHexa())
         
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         // vecteurs tels que  X + Y*_Lamda = 0 modulo N
         V1_X est Entier256  = r2
         V1_Y est Entier256  = t2
         V2_X est Entier256	= r
         V2_Y est Entier256	= t//corps.négationModulo(t)
         //_Tmp est entier256
         _Tmp = _F(V1_X, V1_Y )
         Trace(_Tmp.VersChaineHexa())
         _Tmp = _F(V2_X, V2_Y )
         Trace(_Tmp.VersChaineHexa())
         Trace("****** ")
         Trace("X1 (v1.x) = " +V1_X.VersChaineHexa())
         Trace("X2 (v2.x) = " +V2_X.VersChaineHexa())
         Trace("Y1 (v1.x) = " +V1_Y.VersChaineHexa())
         Trace("Y2 (v2.x) = " +V2_Y.VersChaineHexa())
         
         X1Y2 est un entier512 = multiplication256x256_512(V1_X,V2_Y)
         X2Y1 est un entier512 = multiplication256x256_512(V2_X,V1_Y)
         _Delta est Entier256 = soustraction( X2Y1.valPoidsFaible, X1Y2.valPoidsFaible )  
         Trace("_Delta = " + _Delta.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         
         //  = K * Y1 / Delta
         //   =K * Y2 / Delta
         _B1 est Entier256("0x085428ac856e542bb711d2bb9e408611")
         
         K_Y2 est Entier512 = multiplication256x256_512(K,V2_Y)
         
         
         
         _DeltaLow est entier256 = _Delta
         K_Y2.multitpliePar2puissance128()
         _DeltaLow.diviseParUnePuissanceDe2(128)
         reste est Entier256
         trace(K_Y2.valPoidsFort.VersChaineHexa())
         trace(_DeltaLow.VersChaineHexa())
         
         (_B1,reste) = divisionEuclidienne256(K_Y2.valPoidsFort, _DeltaLow  )
         trace("_B1:" + _B1.VersChaineHexa())
          
         
         _B2 est Entier256("0x2b6a121d1ef84b440996421265b4e26d")
         K_Y1 est Entier512 = multiplication256x256_512(K,V1_Y)
         K_Y1.multitpliePar2puissance128()
         (_B2,reste) = divisionEuclidienne256(K_Y1.valPoidsFort, _DeltaLow  )
         Trace("_B2:" + _B2.VersChaineHexa())
         
         
         
         // v = b1*V1 + b*V2
         VX1 est Entier512 = multiplication256x256_512( _B1, V1_X )
         VX2 est Entier512 = multiplication256x256_512( _B2, V2_X )
         
         YY1	est Entier512	= multiplication256x256_512( _B1, V1_Y )
         VY2	est Entier512	= multiplication256x256_512( _B2, V2_Y )
         
         VX est Entier256 = soustraction( VX2.valPoidsFaible, VX1.valPoidsFaible )
         trace(VX.VersChaineHexa())
         K_VX est Entier256 = soustraction( K, VX)
         
         Trace("K-VX=" + K_VX.VersChaineHexa())
         
         VY est Entier256 = soustraction( VY2.valPoidsFaible, YY1.valPoidsFaible )
         Trace("VY=  " +VY.VersChaineHexa())
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K3
    identifier : 0x2e19a33400edabb1
    internal_properties : BQAAAAUAAAAU6wmbtWO61a6iBy0zjgSejva+n3HrDEfugycV70gSx1+KHZtrPP9nwTNUPWE4lzuP10dQ5WENFj1jvm7WfDwJcglRfW1QsSwjsp3bvCJ9z0ozmNOaVKpR6rd0bHLNAozG+MJKyiLirSN4CwHeki40O9bQDtUV3ZQ7CqyNIcf+kzlwA3HLCLkWoBLmtVZnG5+ChV8GekS77tVPEHlO/yOapQ6TE9DtaiBRfrYF1Y/HSztaCqeG1mXOCFDDCQ3IPsS2Zkblnh/r6ZtaLxkdXtwzm234Szxi8gR3s+m3BMpi47c9z11PqI8qxqfT+XhlBIem6myIMx4qEIe5PXXgY9Odizko4oAsgr+RgLf85AVzn9qWPz1+s5nbb3fyMbd1VQ9n/kh/kxxa1QaLYzlpIoxh1LBFMlFNu2FeXbdcA0yS2/EBO+u1ptqGhiW2eLoc9NKojPrx/urMUL15iT+lVv2kslVpYlnrQjSqaOTsix55ysgDxzoCTljR9PZ4su1cnpPw/8+L3KS2nahAnoLicILYmqoo+U0zivD4EflpmfWRr6Z77GYUBzrfLUBbK854iib/ieq4mj7b5IDY3xr87F8y8kSupcj4qvVwXml9nNbqxa7SeEbxb2AbJLhJ05aaNEe+JKkgTHDFUyCxpfuvxNifdMKVQR/rdbf3Xg/8Q+Vz/DBpXNi0zEhkzKYcBTUVxI3steeLTQ1feul78zH/B7ncZ87LVS5zBRQ=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_0_256 est Entier256
         //nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         CalculeCoefConstantEuclide( _Lambda )
         retour
         
         // renvoie x + L*y mod N
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         // cas a pb
         //K.val0	=0x8C9709EE2C00DB85
         //K.val1	=0xED340B2E31901BFD 
         //K.val2	=0x5DCE66E6049C6A08
         //K.val3	=0x7B5AAE134D8FDABF
         // cas a pb 2
         K.val0	=0xCD20AFA495B7BF2B	
         K.val1	=0xC1605B209D915713	 
         K.val2	=0x732947073A8716AF	
         K.val3	=0xF5CDDA00DF9C6B90	
         
         
         // renvoie V1,V2,signeV1,signeV2 tels que
         // V1 + V2*R = K ( modulo N)
         // avec V1 et V2 "petits" = sur ~128 bits 
         // signeV1 et signeV2 valent +1 ou -1
         procédure interne _calcVecteurOpimise( _k est Entier256 )  : (Entier256,Entier256, entier,entier)  
         
         	// constantes calculée par utilPourOptim.CalculeCoefConstantEuclide() :
         	_moinsDelta est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141") // X2*Y1 -X1*Y2
         	V1_X        est Entier256("0x03086d221a7d46bcde86c90e49284eb15")
         	moinsV1_Y   est Entier256("0x0e4437ed6010e88286f547fa90abfe4c3")
         	V2_X        est Entier256("0x00e5e9bd2461792dd1aca54cdd1d8b2a6")
         	moinsV2_Y   est Entier256("0x58a1bcb25ae2b9cc084678edad30447a7")
         	
         	// B2,B2 : coefficients tels que "(K,0) - (B1*V1 + B2*V2)" soit sur ~128 bits
          	_B1      est Entier256 // ex : "0x276e6bcbe7ba30a0b216a78e91107e13"
         	_moinsB2 est Entier256 // ex : "0x0658d53831aae2574117afb315cc83da"
         	
         	moinsK_Y2 est Entier512 = multiplication256x256_512( _k, moinsV2_Y)	
         	moinsK_Y1 est Entier512 = multiplication256x256_512( _k, moinsV1_Y)
         		
         	trace("K1*Y2="+moinsK_Y2.VersChaineHexa())		
         	trace(moinsK_Y2.valPoidsFort.VersChaineHexa())		
         	trace("delta="+_moinsDelta.VersChaineHexa())		
         	// calcul de B1 =  K*Y1 / _Delta
         	//	         B2 = -K*Y2 / _DeltaZ
         	/// comme delta = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 ~= 2^256, 
         	//  on approxime la division par un décalage de 256 bits vers la droite.
         	_B1 	 = moinsK_Y2.valPoidsFort
         	_moinsB2 = moinsK_Y1.valPoidsFort
         	
         	//moinsK_Y2_haut est un entier512 = moinsK_Y2
         //	_DeltaLow.multiplieParUnePuissanceDe2(128)
              //moinsK_Y2_haut.multitpliePar2puissance128()
         //     Trace("moinsK_Y2_haut=" + moinsK_Y2_haut.VersChaineHexa())	
         	//moinsK_Y1.multitpliePar2puissance128()
         	// calcul de la division entière : donne un nombre de 128 bits si K est sur 256 bits
         //	reste est Entier256
         	//soit (     b1,reste) = divisionEuclidienne256(   moinsK_Y2_haut.valPoidsFort, _moinsDelta  )
         	//_B1.multiplieParUnePuissanceDe2(128)
         	//'0x1a08ee06c6ba89c9f5498001ad0306fdd4382c84d8d3008c7fd6305c0da8a294'
         	// idem B2
         	//(     _B2,reste) = divisionEuclidienne256(moinsK_Y1.valPoidsFort, _DeltaLow  )
         	//_B2.multiplieParUnePuissanceDe2(128)
         //	trace("b1: "+ b1.VersChaineHexa())
         	trace("_B1: "+ _B1.VersChaineHexa())
         	trace("_B2:-"+ _moinsB2.VersChaineHexa())
         	
         	// v = B1*V1 + B2*V2
         	// B1*V1
         	B1V1X  	    est Entier512	= multiplication256x256_512( _B1,      V1_X      )
         	moinsB1VY1	est Entier512	= multiplication256x256_512( _B1,      moinsV1_Y )
         	// B2*V2
         	moinsB2V2X	est Entier512	= multiplication256x256_512( _moinsB2, V2_X      )
         	B2V2Y	    est Entier512	= multiplication256x256_512( _moinsB2, moinsV2_Y )
         //	dbgAssertion(B1V1X.valPoidsFort.estEgalAZero())
         //	dbgAssertion(moinsB1VY1.valPoidsFort.estEgalAZero())
         //	dbgAssertion(moinsB2V2X.valPoidsFort.estEgalAZero())
         //	dbgAssertion(B2V2Y.valPoidsFort.estEgalAZero())
         	
         	// vx     = b1*v1.x + b2*v2.x
         	VX512	est Entier512	 = soustraction512(  B1V1X,   moinsB2V2X )
         	dbgAssertion(VX512.valPoidsFort.estEgalAZero())
         //	VX	est Entier256		  = corps.soustractionModulo(  B1V1X.valPoidsFaible,   moinsB2V2X.valPoidsFaible )
         	VX	est Entier256		  = VX512.valPoidsFaible
         	Trace(" B1V1X= "  +  B1V1X   .VersChaineHexa())
         	
         	Trace(" B2V2X=-"  +  moinsB2V2X   .VersChaineHexa())
         	Trace(" VX ="  + VX	.VersChaineHexa())
         	
         	// vy     = b1*v1.y + b2*v2.y
         	//B1VY1_256 est Entier256 = corps.négationModulo(moinsB1VY1.valPoidsFaible)
         	VY est Entier256         = corps.soustractionModulo(  B2V2Y.valPoidsFaible,  moinsB1VY1.valPoidsFaible   )
         	//moinsVY est Entier256    = addition(  moinsB1VY1.valPoidsFaible,  moinsB2V2X.valPoidsFaible ) 
         	Trace(" VY ="  +VY.VersChaineHexa())
         	//moinsVX est Entier256    = corps.négationModulo(VX)
         	moinsVY est Entier256    = corps.négationModulo(VY)
         		
         	// k - vx = K - (b2*v2.x - b1*v1.x)
         	KmoinsVX est Entier256 = corps.soustractionModulo( _k, VX)
         	//Trace("K-VX ="  + KmoinsVX.VersChaineHexa())
         	//Trace(" -VY ="  + moinsVY.VersChaineHexa())
         	
         	//_0_256_ est entier256
         	signeX est entier = 1
         	signeY est entier = 1
         	VX_Resultat	est Entier256 = KmoinsVX; // corps.additionModulo(     B1V1X.valPoidsFaible , B2V2X.valPoidsFaible ) 
         	VY_Resultat	est Entier256 = moinsVY; //corps.soustractionModulo( B1V1Y.valPoidsFaible , B2V2Y.valPoidsFaible ) 
         	// si VX_Test<0
         	si VX_Resultat.bit(255)=1 ALORS
         		// x' = -x
         		VX_Resultat = corps.négationModulo( VX_Resultat ) 
         		signeX  = -1
         	FIN
         		// si VX_Test<0
         	SI VY_Resultat.bit(255)=1 ALORS
         		// y' = -y
         		VY_Resultat	= corps.négationModulo( VY_Resultat ) 
         		signeY	= -1
         	FIN	
         	
         	// renvoie le vecteur (Lamda-(b1*v1+b2*v2))
         	renvoyer ( VX_Resultat, VY_Resultat, signeX, signeY )
         fin
         
         soit (k1,k2,signek1,signek2) = _calcVecteurOpimise(K)
         
         // on vérifie que le résultat a bien les propriétés attendues
         k1AvecSigne est entier256 = (signek1 = -1) ?  corps.négationModulo(k1) sinon k1
         k2AvecSigne est entier256 = (signek2 = -1) ?  corps.négationModulo(k2) sinon k2
         _Tmp est Entier256
         _Tmp = _F(k1AvecSigne, k2AvecSigne )
         dbgAssertion( _Tmp.estEgalA(K) ,"nombre pas OK")
         // k1 et k2 doivent êtres "petits"
         dbgAssertion( k1AvecSigne.val3 = 0)
         dbgAssertion( k1AvecSigne.val2 < 0x1000)
         dbgAssertion( k2AvecSigne.val3 = 0)
         dbgAssertion( k2AvecSigne.val2 < 0x1000)
         //sinonK
         //	_Tmp =  corps.négationModulo( _FMoins(k1, k2 ) )
         //fin
         Trace("-------------------------------------------------------------")
         Trace("k1:    =" + k1.VersChaineHexa()) 
         Trace("k2:    =" + k2.VersChaineHexa()) 
         Trace("k1+k2*L=" +_Tmp.VersChaineHexa())
         Trace("K=      " + K.VersChaineHexa())
         
         
         // N = générateur du groupe des points  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         // P = ordre de la courbe               = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         
         // un nombre d'odre 3.
         // ie tel que :  beta^3 = 1 modulo N
         // NB : tout nombre d'ordre 3 est OK.
         
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         // R tel que map(P) = R*P
         // racine du polynome : X^2 + X + 1 = 0 ( modulo P )
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         dbgAssertion(_Lambda.estEgalA(_Racine))
         
         	// (x, y) => (βx, y) 
         	PROCÉDURE INTERNE _map( _p est Point256 ) : Point256
         		pointRésultat est Point256 
         		pointRésultat.x	=  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         		pointRésultat.y	= _p.y
         		RENVOYER pointRésultat
         	FIN
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         // gestion du cas ou les coefficients sont négatifs
         si signek1 = -1 ALORS
         	// P = -P
         	P = CrytoLib.courbeBtc.pointNégation(P)
         FIN
         SI signek2 = -1 ALORS
         	// P = -P
         	mapP = CrytoLib.courbeBtc.pointNégation(mapP)
         FIN
         bSigneOpose est un booléen = signek1<>signek2
         //ChronoDébut()
         // calcul optimisé
         //P1_optim		est Point256	=  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P,       k1   )
         //P2_optim		est Point256	=  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( mapP,    k2  )
         
         //KfoisP_optim	est Point256	= CrytoLib.courbeBtc.pointPlusPoint(P1_optim, P2_optim )  
         //KfoisP_optim	est Point256	= CrytoLib.courbeBtc._multiplicationScalaire2PointJacobi(P, k1, k2, bSigneOpose )  
         //
         //trace(chronofin())
         //Trace("KfoisP_optim=")
         //Trace(KfoisP_optim.x.VersChaineHexa())
         //Trace(KfoisP_optim.y.VersChaineHexa())
         //
         //// calcul standard de "KP"
         //ChronoDébut()
         //KfoisP_defaut  est Point256 =  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P, K )
         //Trace(ChronoFin())
         //Trace("KfoisP_defaut=")
         //Trace(KfoisP_defaut.x.VersChaineHexa())
         //Trace(KfoisP_defaut.y.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K4
    identifier : 0x2e1ad517009b85a6
    internal_properties : BQAAAAUAAAC7/Ldi7U9x/NA4D4xTYu8tnz3jPaCId6ahuR/eQZ0kkcisHxSmWUfJMRe6Ar9+bIvVg5GT5M8p+61JoUjh+jNtBU6So088pRavh/XEa+Ymu9oAvSlePJFzelYA3Ex+aMXHPIYbQ9P7xOuiVQLMc7rhg7lBhe6czPmRmcbf1UyiUnuEnsXcKsbXKSMZmpgGeH20CSWNrhIviShsPPbhus3QenfS+1PFUZC5OxLsGpMSCjwoamLmFixOywAgCJk2oOxCI/XNm6e0QiXB4G9v24kKsDhPD9KIfuRVmr0NQOtvLOmKNEwKBw0q53oeOw4ZinuKHi0mAXpbs6y9CzHmwEK02PD4kVXu+8xN55/+yzl4N/r8x9M7naU84paTb2w+Jg6JYxy0fM2RtDnAGcqiDAMyGGue2Gon1PFK36cjz0+euplRUa1ahFsiRWanXX7mPPjDar3+WShIW0TR8kAjZgeyP2lBZIfEHlGSmvb335uQNCqs5qCA9Z3eLSIdOPNRUlV5CVYzkPEPkahgYrFxD4XDzdZCm8Q0DH6/BJalRcoXt7lHFiNK8sE4gb4tLmn2rxboyX6vpqT4qdmY+vFkO2Sup1a6v2bZXu9g9T0daNcMlYntPnGm/4WadV3tvlm0pbG7qnwgU9R+txPS+x9rlzqKLBI+4cD5D2v6VwcSnoneoDwcXrGveWdbCN9QfRuWxTyQGLDMVgwvAnDkTCcKZpQjk2dLzF/8/MTBsro=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         
         // Test de multiplication par K (nombre "au hasard")
         //K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         K est Entier256
         // cas a pb
         K.val0=0xCD20AFA495B7BF2B	
         K.val1=0xC1605B209D915713	 
         K.val2=0x732947073A8716AF	
         K.val3=0xF5CDDA00DF9C6B90	
         
         //Point = 2*G , pour test
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         ChronoDébut()
         
         KfoisP_optimJ	est Point256_3D	= CrytoLib.courbeBtc.multiplicationScalairePoint_OptimiseJacobi(P,  K )  
         KfoisP_optim	est Point256	= CrytoLib.courbeBtc._JacobiVersPoint( KfoisP_optimJ )
         
         trace(chronofin())
         Trace("KfoisP_optim=")
         Trace(KfoisP_optim.x.VersChaineHexa())
         Trace(KfoisP_optim.y.VersChaineHexa())
         
         // calcul standard de "KP"
         ChronoDébut()
         PJ est Point256_3D
         PJ.VersJacobi(P)
         KfoisP_defaut  est Point256_3D =  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( PJ, K )
         Trace(ChronoFin())
         Trace("KfoisP_defaut=")
         Trace(KfoisP_defaut.x.VersChaineHexa())
         Trace(KfoisP_defaut.y.VersChaineHexa())
         Trace(KfoisP_defaut.z.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_VérifieSignature
    identifier : 0x2e1b496d009cf43f
    internal_properties : BQAAAAUAAACcFZbNID0Ld6pk6clbe/hrS6jzjJy7RiMV2lwDq9zGdTLqtDrUCxig0aUyezQcvJvsp6iTMiueSDIA7z4BHBnRRmqKS1dtglguKTli1uRiDTNFUHwTiSPSd+YI1BRqMDaduWH5jac08KGmQQ35ZUB8pLvEhFlvKgFTbEufVh6mmghIAEkYH2nJqv54SY6aVnanMu0/SdTxSBLFtSxH88CwZ5FyYugBk1Oj8hsEVNm+fQa8SqprURaRjbhbyZqopuRXp+KhOJyfc1nNMuUA20VW+YRaCw7pm7OumV7MnYb94d+bQofaYLbm21B/Ih9VEU6XJcGkuinGU9FWTJA4JlDefuabXMVvEhZZaLJD18Qgfd1Cp4RxkA8hl7wqMa1XIZ2YJ6Yw9UTli5SnEP31hxbHuRQ7OzU8rxqvAZ/Nsojz73AKmAUk6rXxemNH0fpn6IfVqFRHQ9yQD0EHSkCz1P9PNo+llDPHzOpj8w/Yu9B5r4Quiq4/CGi7yU3lthkp+qjmvsgZYQxkp4eRL6yEl1UKoZhEKmaJcuM5EgaVnXO+/4nz6o9EZSeSIFHb2MgYcmKsqG71vLb3IGDxLbnDRrTOh6JmUGSDcX60yG3HyofcrwVaLnEbTJgg1DX+gxz9zPgQnurmNeGUi0OyTgYVj5vxuJiDno1aAgpxH0i0TawVKbNxHSLX/sOYWTQMRHXaIXPfW60zszKT8GuVxw+ehWnTs3FMfEZ4QGAsJYkCsgdLdbGz65kKL4E3VI+b
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         
         // signature
         signature est SignatureEcdsa
         signature.R.affecteAvecChaineHexa("381d97bbc2cfbe448bf256bdb5ff9cd6fdbe27726ee4d603a4f92fa541fa7518")
         signature.S.affecteAvecChaineHexa("040e51ef10775569752ce8258dd5c382e1a39ae6530ba1044a58bed5f8ca9d55")
         // clé pub
         CléPublique est Point256 //= CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         CléPublique.x.affecteAvecChaineHexa("5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         CléPublique.y.affecteAvecChaineHexa("b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         // valeur signée
         N est Entier256("12345678")
         
         sERR est chaine
         Trace("Calcul...")
         ChronoDébut()
         bOK est un booléen =  VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST
    identifier : 0x2e294ec300e50462
    internal_properties : BQAAAAUAAADIMWLWJXyqszKv9BVQX6pm/QD5SUYBL9trvVOo0DsKKTcIbhWLJaDy49lfZgQVxtF0fIiEWyhq994CAjcLEqE8wgid9IOGampNp+v3OsftYnlJ7CjUE4fzzsVUz4bs2N4vRKQvt0jS02S1CBAEdnzI+AgU6VIzfoEB1xqjduEh4+tYeBNxlIDhICB6RQjKWREUreQQBxvv/YANV4dNKTF0psIwNYajlS6vWkJpByYZ12Wlr4N09JrVOO0bx1JDq+3fIlTMUo1SVOro+PACXMtK2oJbi9GCfRsTgzKsGlbazRzo9tLNQ8zaHxQSWxM7qWSYOr1TezY0DYH+z8kvxfH+IxNfJACmvKDhDLcBUalT14U32EWTLq3R1THZCEpRnIZKPGX6vaKyXU+gGqilzXM2RT24gz+QVj6+hkOmKDz+QBTpIU0qHkZ/n9LnfsqHG7Arw8vTIY65vcbWVrkvJNpIqrB2muMDR2rGWCE7M3ZohOY95agHut+34N6zhSMNzzfytZvDfeq9A9SoxXFegyjTAx+NYqT9mZXeVWxSN6N1G5pqK+lkY6SSB85lZySeAfcm9d9lgqdHfbQH9vEY48SScuJUe418P+sD9S3X28CGDeUNJOhz4sR6gKbR/Q1qw7VkbZHMs7M9rAvcs10DgAaaI3bdXSrF4Lkt+DXR0xaS5ze6I/XgsgkM0JHjl3mgX25wOB4RjSCVzWhZJbUKf3+ms47zVjes
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         //x	est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         //y	est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         
         x	est Entier256("0xc51b1777e1a45b4b3cc29d32cd89153ded2c45d6cadc019207f5aec8b451e9e9")
         y	est Entier256("0x58f798f6ec04fbcb768aae73f4f58ecd55cbf7326d79adf7cf5bf620ed9acffe")
         
         CrytoLib	est ECDSA_BTC
         //corps		est CorpsModulaire dynamique	= CrytoLib.corps
         Trace( x.VersChaineHexa( ))
         Trace( y.VersChaineHexa( ))
         
         P est Point256 = CrytoLib.xVersCléPublique( x , vrai)	
         trace("Résultat : ")
         trace( P.x.VersChaineHexa( ))
         trace( P.y.VersChaineHexa( ))
         P2 est Point256 = CrytoLib.xVersCléPublique( x , faux)	
         Trace("Résultat : ")
         Trace( P2.x.VersChaineHexa( ))
         Trace( P2.y.VersChaineHexa( ))
         
        type : 18
      -
        type : 161
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BQAAAAUAAABd4biPtdLQOwfUFiqrit8H4xfGqKyz9t6VLxCUnNZRQiLPVs82PZNE+UVdKRzjizyeuKyRur85gNMUfqplpmtNDnQWQla9zo+GH9+1EfUJ6w17Dn/egD/gv+Hhywk8c9unIdzEp7EHgaAqD28w7Agveg4u19PBcKGZtQ==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BQAAAAUAAABqPQh6HC8RxAVkp2SqPYLuZrfVhd+1KX4lx22hIT8uqEpE6yP7Sbc2rmVqdmL816EWzXOkEe9ijOtYwchZKAfpy3B1cNqhpJgsnbUs
 code_elements :
  internal_properties : BQAAAAUAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCEDURE MaFenêtre()
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 2
   -
     code : |1+
      
      
     type : 40
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     code : |1+
      
      
     type : 180
   -
     type : 230
     enabled : false
  procedures :
   -
     name : PGCD_Ex
     procedure_id : 1994461367820771349
     type_code : 14
     code : |1+
      
      PROCEDURE PGCD_Ex( nA entier, nB entier)
      
      dbgAssertion(nB > nA )
      
      r, u, v   sont des entiers
      r_,u_,v_ sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      u  = 1
      v  = 0
      u_ = 0
      v_ = 1
      
      tantque r_ <> 0
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp,vTemp sont des entiers
          rTemp = r;
          uTemp = u;
          vTemp = v;
          
          r =r_
          u =u_
          v =v_ 
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	u_Avant est entier = u_
       	v_Avant est entier = v_
      	u_ = uTemp - quotient * u_
      	v_ = vTemp - quotient * v_
      	//trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " + u_Avant )
      	trace( complete(r_+"",4," ") + " = " + Complète(uTemp+"",4," ") + " + " + quotient + " * " + u_Avant )
      fin
      
     type : 458752
   -
     name : PGCD_ExR
     procedure_id : 1994470541871085041
     type_code : 14
     code : |1+
      // version résursive
      PROCEDURE PGCD_ExR( nA entier, nB entier, u=1, u_ =0 )
      
      //dbgAssertion(nB > nA )
      
      r   sont des entiers
      r_  sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      
      
      si  r_ = 0 ALORS
      	renvoyer ( r, r_ ,  u, u_) 
      
      FIN
      
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp sont des entiers
          rTemp = r;
          uTemp = u;
          r	  = r_
          u     = u_
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	uPourTrace est entier = u_
      	u_ = uTemp - quotient * u_
      	trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " +uPourTrace )
      	// récursion
      	( r, r_ ,  u, u_) = PGCD_ExR( r, r_,u,u_)
      	
      renvoyer  ( r, r_ ,  u, u_)
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAAwjDLmDSZ0H1P68nJIeNfqR9EvRjU/K+sVcM1T6rhVNr+VTV1mZ/rmoweYbFDZUhBGcv8UsxlDxVCOnb2U/SQOvlGWzNby3/w/V+ppSymxv+Vh
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1b7cfed701529005
  internal_properties : BQAAAAUAAAAa2Zm8J9E/zh+/WIrVvz1fER/So3PB0gjQuxc1xKQVWY4ZDm5lfg==
custom_note :
 internal_properties : BQAAAAUAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
rad :
 internal_properties : BQAAAAUAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
