#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : TEst_ECDA
 major_version : 25
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : TEst_ECDA
 identifier : 0x2b7cfedd00d3a562
 internal_properties : BQAAAAUAAACxHeUIxbZNvvEi196KSYVfgKITg89gyzCvyEIeuuHEH0c1FyBDd7UCXGpUHONBGjWYzNq138gyr2XMYBQH/jCbSb8o08CtbXdmFdbYRb9d39KxuXAGlophEQPGa5Ee/xqqzY08bFXeq50NsCK4yMQMDhpoDFep2crWxtTV4d62rxxmFD3XWU+I5ksQWjS1cWtQawRqmx0aU2tlT/TdULG5ECWCIcf4v99Wcgn13Gtgw1mtluYC42LmfFSwdzud/z7zHGgfKKQbuc2dx0fMr/moPNRj1GmUXDEXaya98fq7OBdOEV9jQPcLkrCnrYmvHbMkJFod5Nh+19tMyiW5e5SYQ6M4nuYk/4cOvrduQk6gFQ97udkAWTQdc9/foDhyGa77HOiRG7QOdvmKYdVi4tIqSlFrzYBIruf0j85FzXUtQwF2RRAEPqQvd+gdoaEquvJQ+uih7XX8s1JKU0yX641bM9eZnuo8fRjoxHWoJPZnZNzNS1Xzc+4gvGEDuuli/sharV8pTQ8yRqyFaHcGJ13zoQeItBRFQ1vDT3j93/uBa7vPELknYBa6FZwt7V4dJ0De25XgVuMBGkaQ0eAiyO6IDL95BVqBaSyTfdJ0yGSDkiw5HPLBH8aosMc2PsYG+/Pz9Pje3oK+2MWAoTJ+bLkLjnMzPnBEpS02nC+pCi6cdQlxevZXx+exobtWrFyE9sohTsytDmQLSydH/jM3SnN1a/Qwg5aWgvfAZXRE3mBFDrSO+naaRlr0C677WwUZUkAGlKWYwq3MCN5UlaeYIoqgRDIBA0857UXLe9loERkGmjTGWSA8d/RSidr6D4shQKIgwfBhQ4SYsj2Qa3Q=
 controls :
  -
    name : priv_pub
    identifier : 0x2b7cfee80119d106
    internal_properties : BQAAAAUAAADeD20Mji88oAvMx4zZDrf92knbeB5Sz5zei57L1PwCKtuZRLLf2BUK+8euY6nvGlDpIQQNwT4fUOyC3lv1mtHndganxbNl35OAiY2LgQefxPIj8Dqtunya/nHO0ao3sN1L7MYofQemm+Qb3jccLrG4HmxbgvwlvIZn7Ee5ZRQZ3nWrGlJMYXPkPzdhv7OOK71SmIvUnG4ST1T2IqYZxEHprvRlMwCaW7cbIfNf5okb2KGipVObLD05uBTtUySabhkajP90nXk3K9xU2OTJRSADGrmWIRhpLtuxy3mdaOXK1R+Y/tHYRBq1SrcfIBw06AVXNf+mMGeEcoaS7FCtLqkpMbIsNFLt5pyZUHY1mKPA20/+3NiI17lKShfkd91l+kFXrmCG9OZzES495vtrD45f3bpvF2HIE/57tTWxro617TZ4AmnYDsGFvi9Hk4TrZCNRpFax1STYUU/VhGp1EnmVxP134ukrCCa/z5dSPV7rnS64GPzl0EATCQF3wn2nxAYEXAhFTQhYk2OlE+DAXQcoh27w+l6HZNsRCCzLNc/iA9kisQyZVhZ580wCseH918Xp49OAA0m7Bs1BYwAaDc9qoG6UVR3ssL18K908HFLGd1/LouTJ+YN5772BCLnCQVeByGb7/tatm0m+qqF/TL72VVHHzGMjK3Oeo2BF9Uy9Uo032NgsSQ9Rc5madBmy3xzZu9eezCqsn1KZVofiLnyU1txmfk99ZxbLLrNuSxDoh5mu3ONUkeFMb86IyFZ7jqLVfp6ygYt1sCDPVw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         //ClePrivee est Entier256("75be5c76cde3bcb877a523f618c839cb6ac58269880288734acee9473a180744")
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // 5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b
         xOK est Entier256("0x5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         //xOK est Entier256("0xFD0F6EBE95AAFBED3C431047BB3D9DEA4324B8D6CDBC16D35AE30AC22E9548")
         yOK est Entier256("0xb809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         
         
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
         // b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : FIn1
    identifier : 0x2b8390ec00c21e47
    internal_properties : BQAAAAUAAACP97Axbk02UnDsH+R8rEUyMmQdU26ZRGS9ndVqRcZp4VWE/snY0i3pyxS00J5duC393tQw5rqZcTq37jjyfhX4jFM6vbl0hidvXPf2qJ78VCoEY/j7cl+G6EQxwfPsMAIO1ZM1cWH66hFkag08bcRcbRUlwFJKOgvx9ks6EKQZAlNGZxYMqeeM0/ctEnebvLjd8D3vu0L42T9rEGp+LHqJfcx/l7yqnjv1f2Fy8odhkwgSVdj02UVA+4I7pySc5KHLEh5C3x6nUDIBKqb/RwTtOSPMXkaYC/W8HcOwQw3vq8zRYLSl1amAT5E3DL1V+JOwR3sDyr0xxHTrucTyDYgV2R3ie6ZpT289z8RXeGcKKF7AaO/Lwuxuo9bnN0iTqajjG4rQgZI7JDvzxgFN4fgiXELn9TvmEcsWP5/tvtLtkrtSYqMmNAd+pQ+Rsf6xIhgC3MgtTWwUZp5PfFh/WHfMt89bSt1/QBVMRcWmNbbHmZvQ6uJnBpZ8iC8rKjl9wo37yPJPm5QQ9N6zK/RwTQsfjhwo1GzTpI463OPWHY3Ij1s1Xnv05Xu7Vy8dRNDeucnzVPJzNivFy5VJkxMBmtQLTFxORh2+4ky2F5DH8rk2SE7qlJOBEHgPDdF5UM0b0aiORI8RPluJOALC4OvZmyaRK8qh/rlVaoQ5dekpwpih0KqhAIvpfj8K+Qi4HUZ9iH9R5JqSyNWLnOQ2aXadv4xEpXiE
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         ferme()
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_P_P
    identifier : 0x2b8a9bb300c5193a
    internal_properties : BQAAAAUAAABhoF4POIXoM/XANBelwCJMKOiIeR40kTDxjjoavHgihxeKlWM7jNkSKGpfA0f79w+BWPV+eTKl+qXdNy+njloSZNM1/Jcy036QAhu/12QLD/ku+Ay+bICgFL8nBsl3QkC9W1xT4sq98UBqD9ZFMCtb2Jxg3O6VW0WtHAet8pExzH+oy33OsL/UUtgcKqCdJ5Wc93AsyU2LwnZqNQdk3TbzsJeLeXxMA0OXucmYmCjg+FsLMxzZeIbl7w5bkpnS19yTr/Q3icnTNPctZ9R+MVS1sOFUV2ADgQDRaB3nnQUN7Fi32k2b1/RuQat2IAXeHO0CtovCD0xayoiGEmbtXcZXMqy7thq5Y6uwUMylp+W8XX/s5SZ4GMAFQQmkx9yibbx29IUuFCIRTTN4YzVtDr4sY5eOiRLGs8jcSLRnpK8jkIoTw4ffpLVbrwb8i4wUokQXc4EJVmrEZ1qey7bZsTG+kvTGpnT1iIzyoJgmWQs/ZgY5DWRuEtxlWvwELkHIVM1wN4VFFhoMwY721FT84gldr39Jmp+B3IfGr6Qsb6eNnlXpvNSgYGqnZLeBoaEgu6rVpQ6s3DkligbC0KmJgZocZU3TcSqK0L0P5BRwGAdAFscMQyaseXn3akZanuZkOmlEmnOF0CRl/17PQ61pUiJhQhjRhUPnQSenjj2OLedz4nQ1oBTwgPyoAGpQ0Vkd1pWa03tXcSFfDjEzPzWztoDKtYRxz6HIUOE=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire <- CrytoLib.corpsECC
         
          _1 est un entier256(1)
          
         X   est Fraction256(3) // 0
         Y   est Fraction256(4) // 0
         X.numérateur   = corps.X_to_monX( X.numérateur  )
         Y.numérateur   = corps.X_to_monX( Y.numérateur  )
         X.dénominateur = corps.X_to_monX( _1 )
         Y.dénominateur = corps.X_to_monX( _1 )
         
         moinsX est Fraction256 = corps.négationFractionModulo_mon( X )
         Z est Fraction256 = corps.multiplicationFractionModulo_mon( X, moinsX)
         
         trace(Z.numérateur.VersChaineHexa())
         trace(Z.dénominateur.VersChaineHexa())
         Z.numérateur   = corps.monX_to_X( Z.numérateur )
         Z.dénominateur = corps.monX_to_X( Z.dénominateur )
         trace("--")
         Trace(Z.numérateur.VersChaineHexa())
         Trace(Z.dénominateur.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_mon
    identifier : 0x2b8aa07700c7b785
    internal_properties : BQAAAAUAAABKDD3ZnPIl1dplERPm4gi7bsPg34ZeG6kbYJd1aO84/UZQqUzqnINZQLuNeJfraRlphD8tLpv1cfMPxklad10vjQOoXK7+3zm6E3YQf73vbBWQcKPnek5FFckqPPPJiYPgeBq+K4YYZJPLPVkK5cUWwtYObgPcRgWTxmj/+qepXj7TjFvQsx7wLYzrWcowHT18dfCsJf2VJrvXm0uQmkMLB/TJZtefacG29r99fj1FIJr0pmtfGW10Kugwy1tbsbZ0sMwXXKsLG+aNSizKlQstmULIJMknzruBHBQx7HG0OItOINUI2DFjqFzIhDoHgto+3Ilw/OvjBbT5CRbQPrnva5yQAxW8sy4o90NP4aPsumz5t6h4dtvi9b4CFZgJRP+IoZXJ/jIYagtDGXOlK1OTF8roQsRiXAGCcTI1ZBSSQ7J++5IBLHDee4/gA9JPD9XRCKOccGJ3QJqdYRypArzZOoEaP0Y9o61KO5ga15hgyTjcb6X2lEvqZIk6/F2jRdrOTv+A0L5zwkb7dJhSdzAkzVwPgV3Fc3SqSgsxQoFziGpbyXrX2z7Vi786LE6kcyJSk5Zpno2Bbh9s574GwyTu8D9olyf3RhtSasWjyeMGXiJ+Ytxhiu/TIk32NrDVa75IS4ms1qHwoxHvYD2M9ISTZfOFigm3oahLs5xD+vWXH6oBO97TrxxPo8GUzqs6EncyLCt7Tj/Aude4waDrrEyuyg45kUQETw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire <- CrytoLib.corpsECC
         
          //_1 est un entier256(1)
          
         X   est Fraction256(12) // 0
         Y   est Fraction256(2) // 0
         mon_X est Fraction256 = corps.X_to_monX( X  )
         mon_Y est Fraction256 = corps.X_to_monX( Y  )
         
         //Z est Fraction256 = corps.multiplicationFractionModulo_mon( X, Y)
         mon_demiX est Fraction256 = corps.divisionFractionModulo_mon( mon_X, mon_Y)
         //mon_demiX.affecteAvecChaineHexa("6")
         mon_demiX =  corps.X_to_monX( mon_demiX  )
         trace(mon_demiX.VersChaineTrace_DBG())
         demiX est Fraction256 = corps.monX_to_X( mon_demiX )
         Trace(demiX.VersChaineTrace_DBG())
         
         mon_36 est Fraction256 = corps.multiplicationFractionModulo_mon( mon_demiX, mon_demiX )
         Trace( corps.monX_to_X(mon_36). VersEntier256(corps).VersChaineHexa())
         
         mon_18 est Fraction256 = corps.additionFractionModulo_mon( mon_X, mon_demiX )
         Trace(mon_18.VersChaineTrace_DBG())
         Trace(mon_18.VersEntier256(corps).VersChaineHexa())
         
         mon_12 est Fraction256 = corps.soustractionFractionModulo_mon( mon_18, mon_demiX )
         Trace(mon_12.VersChaineTrace_DBG())
         Trace(mon_12.VersEntier256(corps).VersChaineHexa())
         mon_12 = corps.soustractionFractionModulo_mon( mon_12, mon_demiX )
         Trace(mon_12.VersChaineTrace_DBG())
         Trace(mon_12.VersEntier256(corps).VersChaineHexa())
         
         //demiX_horsmon est Fraction256 = corps.monX_to_X( demiX )
         //Trace(demiX_horsmon.VersChaineTrace_DBG())
         //trace(demiX_horsmon.VersEntier256(corps).VersChaineHexa())
         //trace(demiX.VersEntier256(corps).VersChaineHexa())
         //moinsDemiX est Fraction256 = corps.négationFractionModulo_mon( moinsDemiX )
         //Z est Fraction256 = corps.additionFractionModulo_mon( X, demiX) OK
         //monZ est Fraction256 = corps.multiplicationFractionModulo_mon( demiX, demiX)
         //Z est Fraction256 = corps.monX_to_X(monZ)
         //Trace(Z.VersChaineTrace_DBG())
         //Zi est Entier256 = Z.VersEntier256(corps)
         //Trace(Zi.VersChaineHexa())
         ////Trace(Z.VersEntier256().versChaineHexa())
         //
         ////trace(Z.numérateur.VersChaineHexa())
         ////trace(Z.dénominateur.VersChaineHexa())
         //
         //Z.numérateur   = corps.monX_to_X( Z.numérateur   )
         //Z.dénominateur = corps.monX_to_X( Z.dénominateur )
         //trace("--")
         //Trace(Z.VersChaineTrace_DBG())
         //Z2 est Entier256 = Z.VersEntier256(corps)
         //Trace(Z2.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_64
    identifier : 0x2b8e1e360145dde5
    internal_properties : BQAAAAUAAAATpz8gn3yU0+0eHI+xiqGC72bJuFcNFlJmq3p+PLlhBhYxt9OThIMpjg663BTOI1SUi5cuURf1QCscRl7g0nd6qLVZhyrr5WAP40OAl5aHJQ0a/5fBdDXXe5ZAm81l0OJk/4v6gyqDj+8t//HpPybJau/B4Gcx8Cbcr5UmByK+igdLXZiXmBOkBnNorP8w6VlEgpo+E/HNcqQBmUuIMiMxqpxEtzvNkjRhP3ecv+AGG3W6/G+hiWnKdP56b7L4qBJUX5wRneNiL0WTs+1mWnkGBw9ROxHG0y9QXK/FiO/lzk79r091OSZ1FX1WfXkw1C3xLNbnv2uaS641L1FHhK+c+V/nVK9Si8JtBJbOL9/zaZBG4MWIqBxecuasHoDcc9/UGDFjEaUF7oK7xzwfPkQN/ePm9t2bQ42NRVhIrt+/h9qRszwsf38GLAfGUMxyfA/niX/uZ6G87knBxzG5H5tXzBjUL2kQ0BV5q7K3sxfVb7KjSSc51/ieVeMOdZd8UHYe181u7ZMskO059A+aoh+EAbcvHwCYtF5H+OARQp5IqEZoMcpiJrXllPN4AzhX3tLepw/fUB1qCpC7Socps9CmqG7ww/VHaa8hu6PNTfGJ/lA4yImOnJsApbgAF+dBtWWV1ezyGjYc7Dx1TnSDpogwnvC/fhjqIEevit2m658h2HX+7M1t0tskds+g/fZKs0U6+A6KwHphWUlmxdT6uRpKbADVKvPDuE7r+sXS
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         PROCÉDURE interne _multiplication64x64_128( nombreA entier sans signe SUR 8 octet, nombreB Entier sans signe sur 8 octet  ) : Entier256
         
         	//@TEST
         	Résultat  est Entier256 
         	nA est un numérique   (38,0) = nombreA
         	nB est un numérique   (38,0) = nombreB
         	n64 est un numérique  (38,0) = 0x100000000
         	n64 = n64 * n64
         	nAB est un numérique  (38,0)  = nA
         	nAB = nAB *  nombreB
         	sRes est chaine =  NumériqueVersChaîne(nAB,"32X")
         	nMax64 est un entier sur 8 octets sans signe  = 0xFFFFFFFFFFFFFFFF
         	nMax64_num est un numérique (38,0) = nMax64
         	//buf est un buffer sur 16
         	Transfert(&Résultat.val0,&nAB,8)
         	Transfert(&Résultat.val1,&nAB+8,8)
         	//Résultat.val0 =  ETBinaire(nMax64, nAB ) //arithmetique._2_Puissance64) //, 	arithmetique._2_Puissance64 )
         	dbgAssertion( Résultat.val0 = HexaVersEntier(droite(sRes,16)) )
         	//si taille(sRes)>16 alors
         	dbgAssertion( Résultat.val1 = HexaVersEntier(gauche(sRes,Taille(sRes)- 16) ))
         	//fin
         
         	renvoyer Résultat //(Résultat.val0, Résultat.val1)
         fin
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est un entier sur 8 octets sans signe = 1 //0xFFFFFFFFFFFFFFFF   //0xE6B52D16CF375361
         V2 est un entier sur 8 octets sans signe = 0xFFFFFFFFFFFFFFFE // 0xFFFFFFFFFFFFFFFF 
         
         ResOK est Entier256(  "0xcfea0d3dc68974efebb6f377ccd60ac1" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = _multiplication64x64_128( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Génration_Table_Point_2_N_mon
    identifier : 0x2b8f620400c6b0a3
    internal_properties : BQAAAAUAAADCP+j7gPjeTtUyayOPF/cUUBh3tHaOpk9N4CGe5J0mtENprdgxsifl7LnTxyj0biSvwbz5mMQjGZRq+k6d+ta8wo5EP3SxadOn58Jyffhea9Cv800AcxPm3zxSa1iXov5qbGj6hW54Mf+HhqC3g3Wsmsw18xEZxGOV2vIv8ha2/NnGsE3TOtW7g3WqiH1yHq0ifSMBNKDHipzpb9jUCJ40VNlNyW72MKsmm9xX8OafNl/KKezfSG/fG6IVJg/Ac7FRjn6Yy9w/eFndN4Z5w1UPRYaDR8c8q5tgKeJeIXpW2+etwhgwtmabZbNRDHQSYMSAHyFoM6QBx1IdqlJ+U090xGIi/Sc5RvnU7r6U+Lhbl1/cm6r7LY/xrVZ6tWnN+sakVL8EjmA5KPB4v5FQvXtW2otAd2YSycF/amS3S2L45l3H+RGbyGf4ok680xnlVb728S0dHury4sVKLxLcDGQOewwqosQFDm0RQuTasEruhgUDqfiCjvIKcbx4cji703vvBVkxCrYaXKtsXgKh65CbwKFhsk1LIJwP49Dy72Sin4ECvwEzFSeFZgr+jho1ZPqlAiqwp86mYKCGyPrM0A1xg3Kk5LqCMV37trEKilTw7yF4crwrp4XvS8ltlRMFUP5C0Z2tKxUeS6XjazBc+0Ya0Ejv/6+82C2Tx1/lUO4ZKXOvW64jvQFZ3y/zablPa8Wo6MIgZ4/Ru2mARyr4GSnY6dOxl5k2ZumDpmQUU3bCAHCx/7gYQAXTbr6y96SDfib3Mw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         corps est CorpsModulaire dynamique <- CrytoLib.corpsECC
         ecc   est CourbeElliptique_secp256k1 dynamique <- CrytoLib.courbeBtc
         
         //GN est PointFraction256 //= CrytoLib.courbeBtc.pointGen
         //_1 est Entier256
         //_1.affecteAvecEntierPositif(1)
         //mon_résultat   est PointFraction256 // 0
         //mon_résultat.x.dénominateur = corps.X_to_monX( _1 )
         //mon_résultat.y.dénominateur = corps.X_to_monX( _1 )
         POUR i = 0 a 255
         	valeurKPow2I   est PointFraction256  =  ecc.TabPointPow2PreCalculé[i+1]
         	// vers mon 
         	mon_résultatvaleurKPow2I   est PointFraction256 
         	mon_résultatvaleurKPow2I.x   = corps.X_to_monX( valeurKPow2I.x )
         	mon_résultatvaleurKPow2I.y   = corps.X_to_monX( valeurKPow2I.y )
         
         	trace("  " + mon_résultatvaleurKPow2I.x.VersEntier256(corps).VersChaineHexa() + " " +	
         		  	     mon_résultatvaleurKPow2I.y.VersEntier256(corps).VersChaineHexa())		
         	Multitâche(-1)
         FIN
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_SigneNombre
    identifier : 0x2b9198d600a6d698
    internal_properties : BQAAAAUAAADlbCAViujJGP4iADxxasHwKS+bgDRkIE5rhholTbaEj2+Yuc2HIRto0MBaK7tIPk/1I81kUYHNwDEtv0YQHqgnLyjbtIgRuTRhBfl6ad+ttR7F2+c/lp6Rzol6stbIzO0rtXfcLeZPQBpGb6/Zt7jR7H1xCcuitPkeGecL0iHLoKJqLOwqiOQaTlJKuyrIV/iIikeXlp5pLKvsK9GswQ0ZmsoND7OGFCfYAarP9yahDYviRJ2QqWa3eZdJFdyGAgQQxN0+mfu0ogjIq4Psa1I994PZTaX9+uN5RY7DP+EbVg8VEIrCXPmoSnySp/DLQPKvcfT4gkFZyUMV9rTK2478gaj9SGYhH3cAr0bD5DFSzKFmrXm2kRQf0yqmWuS/LBZ83p2a2To20eM0nlQPlc+SU8M07w/6uKDQ0B2AQAzorsIf1xeoSmCp82ZrilgD5fbhSU/nUWDTxyKy0gn5bPwutLqOmu9vq076zEX3neC4DGCn3UhbdFcveCabvUXziztCVTu7RcR1q44axye0WfrhP+OzrFI/g2/my3K4emxyHxrZrHDj3DurYG9Wtuvfsib3NiRoxXMj2d6xANemdaLsLDQuQb841ZGXmXHLNYIudc8XpmYtyIwyWgipweGO+hDLxDonl2TIw74repdyLqgIW2L5dUtxPTCAY9BmrFfhGeqkDtapbvrG0GFYHFgFkiV+RC5wsgXVMV9dDPDYui1gSk1gMdJzxhvxM2YKdov6pMFcC21gfw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature= CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         retour
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         sERR est chaine
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_Mul_65
    identifier : 0x2b9a01bd00828070
    internal_properties : BQAAAAUAAABFMRBYpJHuU/jkwHRmFuQc4Fm6Owg807wJOAQD6DZu1SFBeznherG1r33RCJaK39UtfkME9fOVYlvryTdnlHovQiDJj5iv+1bdz7C20Weu1WOAteSgWFLQUT5qJZhu5tA9/4AP+95ocsMEDnRg+lnDs75GdQvO24ntmFmKM8tYF/rP9488lsXD6OsaY0svY+8yHrz6xwMOzmxdeAIDHPD2dBdOMU/t9FfPD4SdrlE8X6Z7t7L2lTqle1yX1qe50jopD6NbkXn70zgf6vjbsnn/MnZWaXeTSpbCuaHV728hzPziaINN6Ql9FUIAlt0FuDrvcCGeRo7C1UHaFg0Os26b38XDj2mwNWky53sKnkQfS6adbgbZoAiRnycoOwUW59nGlu1OgTsDmX1Npvxv3lBBZRR7vBM1th4moMSf0OFvDQoURAeXFOtnH2u63ekM8TewQ0rKOrTcNPIyhUbaPk6HPsZoupDupOgq5UWdJIcNu1dHSQiBl/spMUXsxECDg7ja6Fu9eS2T5KSxY2U80WCkJKmb5+FqFq2x7//rpDqkfXOEwuDo23hgZvqVaaEvVVQS/8hK3KwYjjzrukYy8lZokhUj0PpUPGHoMN8hh9utYxfGwNCpZa3SkHTceEEiWVEjA2s/80VNGR8FQRjCeirCEX4dUeWD9DXR2Qs+5aFx0WWu3Cxl5pbwltbXR1iEdrpsLYPSdLYVj/KQ7DIwcpy+nCqZdM62R5W5xW1Thgq9FjjM
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         //_VerifieAMultB(  0xE6B52D16CF375361,  0xE6B52D16CF375361, "0xcfea0d3dc68974efebb6f377ccd60ac1")	
         //_VerifieAMultB(  0xFFFFFFFFFFFFFFFF,  0xFFFFFFFFFFFFFFFF, "0xfffffffffffffffe0000000000000001")	  
         V1 est Entier256( "0xFFFFFFFFFFFFFFFFFFFFFFFFFF" )
         V2 est  Entier256 ( "0xFAEAAC7C6663B93D3D6A0D489E" )
         
         ResOK est Entier256(  "0xfaeaac7c6663b93d3d6a0d489d05155383999c46c2c295f2b762" )
         //ResOK est Entier256(  "0xfffffffffffffffe0000000000000001" )
         Res  est Entier256 = multiplication128x128_256( V1, V2 )
         trace(Res.VersChaineHexa())
         trace(ResOK.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEst_Div
    identifier : 0x2b9d499901f6ea31
    internal_properties : BQAAAAUAAADgJ9PuUSybxIgz6YzaT+/psQERkmtRkjP6Fx65iU93TNz4pFES4YdprceIeDx2NgCC5cSFOPGoCcJCqPxs7W07iXTwFGGlm99UjwhpjISA4lWx1R56VNQpqxEJnRLimQKfqVX/iiznr3paIV9Cx+VV1t7u1wh5TvBx93gnwbunqoiOO+mrpcW83A0E4FWI3N5odtPO1QuKgifgwUZZfAIU2XrQFaVTmkAs7s1swMAprIuTT/mDi34kaCtKi7vCp8PE+BNTGF/56LnfrY4VdpIhEVpBU1+bJ2doU90XDsXvSduQK8C9nw2I24BjWqXw8RNKzMsbJPO/Qs4R97frQp6TOEroGq+7edmrl5Ok52o4Mr4KO7U6710REhckQ3Dxm+avpzVSw7Eb8mbbNmyM98/Bmr55fq8ZlHdB7LpRrT1CYzUt4UTsb+5Dh7bX/xN6lm/+nclvQyM/9TdLh3D+QpiLuYzNxU1fp+Ez4W42+enmE9c6pst3TdHucUI2VpnYLcn6aQFoDgJMvDGoAChYSgDjOSj0KAROM2As350Evw93fr01I62V5g02OQaopBjEPttVKPR+Y4pw9fFw0uiTkzAXCGZ40A6Gx05UCi/UFykj5T6krrD8pJ7klblnA1wWEnrryJPYAJw5KerbZUNnIHI7+kg3Hz9D0QUHLlvoF9GvuNCKezEwIJ8t5e9V1DRi85SX0AzGAILO7zaYpIgWMw1VPhWSvrBH0WA=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         	PROCÉDURE INTERNE _VerifieAdivB( AFormaHexA est chaine, BFormaHexa est une chaîne, QuotientFormaHexa est chaine, ResteFormaHexa est chaine)
         	nombreA est Entier256(AFormaHexA)
         	nombreB est Entier256(BFormaHexa)
         	Q_Etalon est Entier256(QuotientFormaHexa)
         	R_Etalon est Entier256(ResteFormaHexa)
         	Q,R sont Entier256
         	(Q,R )  = divisionEuclidienne256( nombreA, nombreB )
         	SI PAS Q.estEgalA(Q_Etalon) ALORS
         		trace(Faux, Q.VersChaineHexa() + RC + Q_Etalon.VersChaineHexa() )
         	FIN
         	SI PAS R.estEgalA(R_Etalon) ALORS
         		Trace(Faux, R.VersChaineHexa() + RC + R_Etalon.VersChaineHexa() )
         	FIN
         	FIN  
         
         
         _VerifieAdivB("0x23456788fffdcba9877", "0xFFFFFFFFFFF", "0x23456789", "0" )  
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : PGFD
    identifier : 0x2b9d55b302462d21
    internal_properties : BQAAAAUAAADdqe40qNj1iZVv/ktXjxTvN70Q/JovzBqD4RCA3O3k9t4e/9mP6dV08IGLPTE4O7hqGWELif1e6DdMwZGxJeQr4eLPconI61DqarTXCfH/XMO9rdj0oz4eqbk1S1o8aAtshIUQWxeTlUL4y7k2UqRqM11aB4jSbNFtqlH+DGEFgOOhcJItHJ9sHJTuDm0/iinnPgKNeb6K8zFnUuA114ADAfOgX8mbi+DpusEiDPfza+A2Piq1nFsfP276cLGctib31aoOutvJqo+5V6yqC0f85TlPdBGTC/171KTWU86r2fTnLxsNIpZKDyora9M/koOEI6161xSc6KqcsNprFAeDtZCgClJRN5KIkDmjUn+OTTOABfPaIhQHX4mqcLG7nLujVTvxpbKg9qXv7pMX6QCo0PZjiYeOgfHI7roMvM3Xzr8la6P2fm01vuidhIQqG0Imyy/A/1zw9zLrzXu92r34XaqXJmlGVs92P+4fHt/fwnXubCwbtgKwdPAODeRihmoOT7+/slnjZtS4Brv/8BEm9/jUs3IjhAC5sS9Mo8jrGBoUdAWwnnORfd/r0MArmu10Eym4+Am3WRbIpG+GJfOkQpaopzqvWFzrZO+BuPmmOP42asnokwUa9FVBkLWSTaRqRBGxHrErCvRaKq/lHUQtb7K7dkHzBJ4DJcNVfzl+xCYegXZcR0ZTuuudNh9KtSoycXOVS0ZCvSlLckl40G0y98pW
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         nombreA est Entier256("0x23456788fffdcba9877")
         nombreB est Entier256("0xFFFFFFFFFFF")
         
         // Test PGDS
         _pgdg, u, v est Entier256
         (_pgdg,u,v) = PGCD_Etendu(nombreA, nombreB)
         
         trace(_pgdg.VersChaineHexa())
         trace(u.VersChaineHexa())
         trace(v.VersChaineHexa())
        type : 18
      -
        type : 161
        enabled : false
  -
    name : inverseModulo
    identifier : 0x2ba08bf4027a10b8
    internal_properties : BQAAAAUAAAC0xplJ4qnXunLpMCkZwQqL8z0V0bMJ6zTNRRVj33FzsuFWnrB/5eggzDSc+p1Uce+/RCvewu+QHbCBoaHsjRtXyOEcdtWpsRSzw6AuClXbhZmoQZjrW25Lny8zxiC28yl5Cv80v5WGIU/ThiTjybRUSUG2x0yHxWA0joVTmpnqzNOXlT14LmX92bJ/KEsElBt5W5CYEj1MTFEuFNDkfmRNr/MCF1orK/xeYkyy77B+zRw34HF/8eU20NTs63z3A5oxxypAuluy+HWKQGIm3lVxFChYh9aaF/YVZ+LaJr4GnfnLPy/LQDjpOIZRnWOgvazyO3e7auZtbhce1uz2k610h9XtNKJk+8rRRupqoJfCGIhrbB3Rt2LsdFC607C4RaSDQXaIm0UVQ7kCgnVim1EQXA6BBlpwavPUM8DegG3FiTwBvoxmrbziiRDavvRLNwT6CP15lpqVylI7nFlt/fJpDzDQaoJHfonw8hEzwzjxr3wlo7kx8/jWvRI1GFyXRBPl7iwOOKiViBVYrxhlO++tYH0vMsIAZGE8EfjVCCb44M7jNybgYDtbho2+MIt6EQvl1JRzT2eQonj4tSu8PLtKsF7KmSii19fjpEHg5RxnikJhioes+zs653i9UttzHloQvsu2Nrp2IQdqtz2aJbfzePdsg/kBRl0/KnVPU3shuST3o/ip3h3ksOH6zfNSQt6ue2Pk3Btm4NOSaJuxEkOS19pV9gXtYIZRm2Zx
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gCorps est CorpsModulaire( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         //P2 est Entier256("1" + Répète("0",28+28)) 
         //P2_Mod est Entier256 = gCorps.multiplicationModulo(P2,P2)
         //trace( P2_Mod.VersChaineHexa())
         
         
         //x est Entier256("2") 
         //x est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b915") 
         //x est Entier256("497c0fb9646881ce25a2fc68e89a129135e8715423e73fce0759ecca87d30009") 
         x est Entier256("ea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         
         inverseDex est Entier256
         y_2 est Entier256
         ChronoDébut()
         inverseDex = gCorps.inverseModulo(x)
         Trace( "Temps (ms) : " + ChronoFin())
         //y_2 = gCorps.puissanceModulo( x, gCorps.PMoins2 )
         trace(inverseDex.VersChaineHexa())
         y_2 = gCorps.multiplicationModulo(x, inverseDex)
         dbgAssertion(y_2.estEgalA1(), y_2.VersChaineHexa())
         //trace(y_2.VersChaineHexa())
         
         quotient est Entier256
         reste est Entier256
         ( quotient, reste ) = divisionEuclidienne256( x, gCorps.P )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_PGCD
    identifier : 0x2badc0020158377f
    internal_properties : BQAAAAUAAAAFXHQgBwUhfE9bcMrj7V8Ht0R0J5VuYkDMYAPhah+9u2jvkh/D49LRKOhgIfo+DoswozeatHjYf4ZBDasquhwPPqoTdQa3IqRpJtRwgVGZNa8i9Df0ojEPr9pwtrqCGfybsLsj+UildmCWVBIEjbquJINFiG6njbcNYBcGGC3xfKtlqmb0UuhDavwAYqRAFmPab0ZYRdtn4sbHIr1YQQdiwsSEfR1FutPDpp72tcQRJTvQyo++liF+lDNhqeigdJAZIKmHHQaPRMCUPa2MDf76SgSrByEgZ+FI/Dd8b/b7V3rK4+lBpN/HdIoTxr+vx10p6lOsV/UjmScMCelRQCcYksF/Y1eGciPLNgdyL+dsR8oRYgozbtjU1KObb0BMyNl7bIzETTgVXGoEPrVBjMFRApMt51XEa28p6gerBCnai+1J6h0YdH+QirjtDxQq1V8qkyL1lRp+jpGQAJ79qzh5CaTZgkWbHEvB1p+8QycKk/W5SGaD7MhogYhdNsWOccapQ/CNCV5WwJGksRZSWob+7E8eCFgfYDhPm+GqGrk0DAOQunc470mPcqoxoGyjU/7h5+pZTI49vcBMS1FHs4cgKEdalg5LFUsWlWspEI5dg3zPZkkvmqaf1FO0W1iA7VbrVmsW0T64kh/VQTuz8OE+v2V6mAOgbKnV8Y6gcc8q/9lWTBeJXsfaOKDK62MJ+XycDDv7PWRCdmUrY8A/pdygr0XzPSU4MCcN
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         
         //PGCD_Ex(23,120)
         PGCD_ExR(40,70)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TET
    identifier : 0x2c228a9a00fa64e4
    internal_properties : BQAAAAUAAACJ/RKIXC1cIsxu40b0dEGUEgaf6STh4kBlg/NUTv5Z57VPRrYgqkgF4/hYAN4ddN21EhzU3jJt5bqDwhAyptHAXH9Cm461IuOPcAPqY8KfyilV0eiE7WoYj0W3V+hisrcyZJX8u33bD0iUXfWY8bk4kQRCz4AaRPmtwtHGPBldAGvpMNJ9vM9sNFRAJq2PVim/YsJJueZGD+FbzugF/yTzgUdYu7GLx3RJvgXS3CfvmxCyhs7dPAczP3KeEFF8ik6X+doiSuv9fs9dm0yKm6schaXn2DEL3+FjwGCuQ1YPAaTbF/+9WlpGL/7Pm3u/RltMN03mrxTYrPrQjDpb3HujNaSo5hJ5Ow4QbOXran86vePuz72MbBJVRc9sSgsNMlUF65ULHzTmTPsN6C2xyxa64tQNExkw97dO5Lwmlk914IE7ZUXgQDN7/NaHdr7M+aS4WUkaofbWXaD5N/V/fMP6R5D5QMMoNK0cFTCRUBklBAe89tbtiJB+0p6Y74ZM/Fw4tTFhHDMBlAIe+I2J+g+oeX5uVdyFok79zdO435yfVM5IYGnsqk/tgcv/nMwPrvkIkJYZVPZiclvnTcSbLvglJUm99O/w5x0Q8whubaJvgQEdoyb9gv5F488D0hcO0a50ThX/vNELqpQ8DkE3CUCv8XzXzO8TLDaTH8e3WcXaLljg1WTy//6bvmcdQqPybdhwIx9b8e7izSFNHuPSfDl+o36C
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         Signature est SignatureEcdsa
         Signature.R.affecteAvecChaineHexa("13cfb50edf248662ca8d64195cf48b26d90f4ebc1998966d0d9ead4275c20dad")
         Signature.S.affecteAvecChaineHexa("6c2134191f22d1f5fea6848fd23524297fc88c0fb296cd7e955f01370fcda63f")
         
         
         CléPublique est Point256 // = CrytoLib.ECDSA_DériveCléPubliqueDepuisCléPrivée( CléPrivée )
         CléPublique.x.affecteAvecChaineHexa("61b0c48518491955c022d99b0c73b43d947990ae361eced90d5e0d22ce3ab4b7")
         CléPublique.y.affecteAvecChaineHexa("8aa93591f1a2818ffc6e7d575bdc1312055e188616dca470aaefd5bba9b9625e")
         
         N est un entier256
         N.affecteAvecChaineHexa("f49c9d1c8a96157ce04d5651ce201778aba934c3ff245f9c64727ecb2f6fe0ad")
         
         sERR est chaine
         bOK est un booléen =  ECDSA_Bitcoin.VerifieSignature( N, CléPublique, Signature, sERR )
         trace(bOK)
         trace(sERR)
        type : 18
      -
        type : 161
        enabled : false
  -
    name : priv_pub1
    identifier : 0x2dc68581035feaad
    internal_properties : BQAAAAUAAADhN2Jy/6JZ+Fecq57veQ7LQ8xvRuGgg/Mx5rqs+tdkaML1ScA3mX7uXTNjCyot1DLtaZ8uYAKvBJMnpvp8uVUHb7PK93U8AmkVHI0J8emzdpsFKDpitn0NAC+3BlnoUugjDqJ26YmoxPUmCD5OLPZUnQyWSAtCXhbT74Uvvxleye64WmUfHNngLgmoRK7EfSz+pGLkmRRHaiR535yVpihbculAyaiS+GWkt0Nzru+j6ODrWIF65/iwcgbpreVSB+9CAXnPgjm2uWXVbWXYUQ5G8OcXCkiYn3nI5z8X8E52ZQY4NyQttskw6J/JNhdLEiCrrZwy2kVE8I8U0agwLy+TL65kdlrG6NRa36wsob78Y8kRBPiC9nGpXAGCC8WcMXpNsqkeG5WBQKUUGyv2FsiSHQ2ulXtwWvgeJa4vSOrqcrQ5+cajgaVztZquj4XECkbsWltLscDx5Dl5mKXTojpLkQaUev/88RlTlS5K9WlXPLXKuA2H/C/nNaxEAojUCvkS9YLaLcwbHjSK/fUiQoXlNeu9UeafzEVV0O95ZZVReCngVfe0qNbIIJ9dhxco1gPYlmv7VAMmrXNH878JnhYgbS9Zhn/iNWLN6pKU4McBAJP6nHjcX0q713wtsRwa6jJpiXJ8YeTZUg5NZDrE/pq2ezH2AqNNVKKcB+NsQLezEJNhcVtQQ13vqQRCUlhTklmppmQTLo6b/woOmnowEQuFHGeLWdGqAddrT/Si9jGVAR7wEyKGH81I8u6RA+3Zv2kLHell+kptLEjrRWNoLQFAOnr0zD5l
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("0x914f06164094ab80f14de57c15a5dead827a473c005837a5c137167db965a203")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // TEST si OK
         xOK est Entier256("0xc51b1777e1a45b4b3cc29d32cd89153ded2c45d6cadc019207f5aec8b451e9e9")
         yOK est Entier256("0x58f798f6ec04fbcb768aae73f4f58ecd55cbf7326d79adf7cf5bf620ed9acffe")
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Test_mult_2
    identifier : 0x2dc8390b03833679
    internal_properties : BQAAAAUAAAA2Zt8kZ6tW8jdrPL+ASTLJl0dc9oElerTgJKoXcx3ULrzlewKP7os7witx6cTI355Yn7v5ZyC5l81m3V8W98IHjerjcsRhn1HYUMK5Vj3bAbeNTEf6uFwIfjAutdyOwdhRb0Q7gedPg50c4EnhAtrre838FlKpLLty2fH5lIubuNCEjGleTpPgjZyEca6EijEhhgyBfKzC0+FK+iSnJE0E4c2Or+QXmLF9c4ddODpQYiFV4PcqCSFWgnVeN6Ca2eI2cJoEZsFeHpKPkObqwobyZLw0a4yiTcSMDt4Ttrbw/gVDoAmaeQ6kmKXgESOQ9NjQ1lBa8xwJjFfFv9/fMftukM3pIKr8FLRz1s67kewZl823uYg6fLfKvQJWjyuagEOMrgzaqFO69qeRP5eoroVhTXWtlTLfULmKuWIzHffmzfyBWL/DWyhMJbcYPRmALdUR2QJD2I0zomiR1SKIObTDHALNYhh6RV1aw5iYVjl6M4JRSmwggRP4htUeAkL2i55KvfyrZvV/tgp/WEoLzDoO19sgdmMO2bBW+py0tyFE1TloaGPnlGS3yS9iPqUxRybe/VbfP9Q9ZChSndYVGnRvSNg9y0J1o1A1HkLmCr/0FMnJ114aI1yjXqX+wEgJJ1wi/ACuNu3qX5dZ6PVUgAMCbJhQx8WKW6OustupPAd8Jq+ujcaCXB6WI/0QpEfg2NvMfEG/szo47eh0zRcdT7NKoCakieD/RXHCVU8xpQ==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gCorps est CorpsMudulaire_sepc256k1 //( "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         x est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         //x est Entier256("80000000000000000A00000000000000000000000000B00000000000003") 
         //x est Entier256("483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faa001") 
         //y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         y est Entier256("0x43cf5d4541155780f44aa34089024a194415bd27e39f7acf86848972528faaae") 
         //soit y = x
         //y est Entier256("1222") 
         xy est entier256
         xy2 est entier256
         xy_TEST est entier256
         
         // TEST
         //sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\DebugDLL\LibInt256.dll"
         sDLL est chaine = "C:\Users\Paul Albert\Source\myRepo\LibInt256\x64\ReleaseDLL\LibInt256.dll"
         dbgAssertion(fFichierExiste(sDLL))
         ChargeDLL(sDLL)
         si ErreurDétectée ALORS
         	erreur()
         	retour
         FIN
         hModule est un entier système = API("kernel32","GetModuleHandleA","LibInt256.dll")
         pAddr est un entier système = API("kernel32","GetProcAddress",hModule,"multiplicationMudulo_sepc256k1")
         dbgAssertion(pAddr<>0)
         
         ChronoDébut()
         POUR i = 1 a 10 000
         	//API(sDLL,"multiplicationMudulo_sepc256k1", &x, &y, &xy)
         	API(pAddr, &x, &y, &xy)
         	//Trace(xy.VersChaineHexa())
         	//x = xy
         fin
         soit dureeAlgo3 = ChronoFin()
         Trace(xy.VersChaineHexa()+";"+dureeAlgo3..EnMillisecondes/10+"ms")
         //retour
         
         
         
         // nouvel algo
         ChronoDébut()
         pour i = 1 a 1000
         	 xy2 <- gCorps.multiplicationModulo(x, y)
         fin
         si pas xy2.estEgalA(xy) ALORS
         	trace("*****ERR*****")
         FIN
         soit dureeAlgo1 = ChronoFin()
         
         // ancien
         ChronoDébut()
         POUR i = 1 À 1000
         	xy_TEST <- gCorps.multiplicationModulo_OLD(x, y)
         fin
         soit dureeAlgo2 = ChronoFin()
         
         
         //trace(x.VersChaineHexa())
         //trace(y.VersChaineHexa())
         trace(xy2.VersChaineHexa()+";"+dureeAlgo1..EnMillisecondes+"ms")
         trace(xy_TEST.VersChaineHexa()+";"+dureeAlgo2..EnMillisecondes+"ms")
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Image1
    identifier : 0x2e10ace804c9b359
    internal_properties : BQAAAAUAAACHh+yHqitMRgKyC+o4VZk/aquBSssMrqDLGFuC4vS+N/ZwB0Pyag1JPBeZPZMtNlWcPPx07qSWphV4Z4sDBYrfh7x9ENhNuZALlizvM8bVGghRZAKZovNIfxU1xJSKZGHEAWYVmd/qSddIWLjsstK/c/YMBgW/ovj8/Z4NbVdhELSgnQ+jgvKjhIR39RQNMOkqnh0sp6amNqZlGbUrEXz65yhgyUMNThGbxhkPunJAxw+w38r9go+J/sjMIuZukKi1dFgaYk6zeCAjl7v26QguFtHP6+wBFnwIWxccA7Wc/U/7ABt54FXRpc2CUeHlsATZqHEmySwOIbp2ceVTp3quCB+X7roUEsSsM1NI+9pARPej9rNX5wpaRZy7TvIWNbQ9QOGVDzB4YAF5Ev9OsRxqIkried5z/UivUgoxLxTnY7Nuaew5H0sY0GYjOWXF1KZ3wKYfz7mwV1dgIA3RYTn//xS5VM+IU6M8UtCNCqah0Qdb3kcAi3N/SuZG4hUnhLbnB67Py0+J9WlVfvMZP58rMu49v/ma9PAJ2474lzJHLOKl7JN0V94pJau9pRa+Kovv9ZCZvDZwgoJ6fJH+uqApKki3mvGLdZZw+irXq7dIMeB+dS18zrpwBw9RGOxmNY76XOrxjtzchanpNvPIhgFqWRCocN8JJGIBE70GtbhbHoy1GxvKDoyUhUm4K2epFTIFaEpraRR9EKXK1mHGTz7ZJ1MVT4lRMMI/V+npS5rbbRv/W3I648EBbiidGRBwccY9eSB98IkbysJKJ/zczkmSK81Wc2vbty+nIATZ818nJ68nI4vnpd0HxKF9INPcGDCoe7NMlCZ70IHyrGWRPROZx0SMPzbWGZq0Ihzx2UNbcLL8Peib3Z/Frw==
    type : 8
    code_elements :
     type_code : 8
     p_codes : []
  -
    name : ECDSA_SigneNombre_ECDSA_VérifieSignature
    identifier : 0x2c02cf800181802d
    internal_properties : BQAAAAUAAABS08ZOTspzQqCF+34LO81nnQgAE0EG2kDb9WDBmmqIr9b/ehoirJYCAjZzcfQiYquVxdrxexX+yS0pMhA7qbvEb1fZlXlnGAGa4oeceqvSw72Ns6CCT+weQBf7xKZytkqLre95CC2QMXA1kNQoD5m91V+yxBlKA+rPxbIYCiHSBx3eProzymzQ8kuYhikaxOlt3qxiIXeQAObiWcfRo3iD5TSJUwbK6GY2KZKajZFxpZaAwLNEhlL90KKwqwUs9Hd8PCoJlsd8SAOHXAV4yqrozJVgA8dy7X5G5TVkCo8rQDYwIYOTh6sAu63pIFixKZE9CfvS8t5t332PtA5XFTy18L5lPNxj1s+qvUccac6oQnYumpeO3/ZqDFU7ZL+QGrvoo6voYx92gMyBLvw+gGB9xmo4acxB16ud+H6lQ7QV/aubkPevo/vvbx73Z2kRhTvCoXakjutUB9MHmeaer+0jK0bWVszLGpeBT6y4KZZdN/nkL+jij3ZgH8AANHm5hnUm5Qbl9Th/lpkAqBiSL5upq1phKZP66hrtnq68rSpWmIpyJX1VKYnToJ1/RfeQlF7uTxJSqqqFK2MyaOJr3u2VuFaNYWlGwCiHMAuoZcroC/yahStvamlyO21RUVhvpfcgZY+g9tO7S+aVIfr3g1lLH7Fdb7cw7YabGtBt7XiqXZc7QmicofCmvqlTXhspiPu/ZE+ZsSgNYW0E7XGmTwlyf6b3C/su/Sa9/Xw4F0NRxHvobkwMNwEOiNy+jUF4cLTocUpOMWbNstZt9AjB5g==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         //CléPrivée est Entier256("3")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature = CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         Trace("Clé publique : ")
         Trace(CléPublique.x.VersChaineHexa())
         Trace(CléPublique.y.VersChaineHexa())
         
         sERR est chaine
         ChronoDébut()
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR
    identifier : 0x2e11a4eb00e97d0e
    internal_properties : BQAAAAUAAACTlJAChc02WESvKwoPaBG1yRmDH7Dogc5pVy3whReoyVa41wgsv1Heyqpn9mWBvqtpIkd/+kid0YcnLJlaLrsoGXDGm2Lgj3dUMrmbdbD0SC9LWhl0NbLS5aj0WLuZAR00+RVtYGTf4C4PI73VZkxlGyjaRdvsPjFMrdIQVOs/9MY3x+sxBjjOwY1xnhJzehMktZSOWQMfDJ5f8//zMecffh99a3pYjv0CHAcwwLWsLkHxo0FsotwfSJsH+C8kWSXE6DB5WK7GfYQFgTp7YuKUi9Wg73qfqV6FDPiwqpngZPmJXstKyFZ9rM55TGxfglXWD7bG+5FQa7vM3mzFtS4OPnAgnoiyyodcI5KXOZpmid5UsNYJGBq7xqAri8ilU8OKlxBem277mZb5wANjN+aX4aRnUTtWtaj5D4lhno699RbYwNkobBPR+ivzaUIvmPdFcEhLT86OjdtpCMiL7OcXlkcxDPPRwuB9Gc96dQRVq4w2mJRFIq55g3/ntG/BKgh+Xgqj66QMRXGzXV5G2YO0H6BCUvYdLp/N3tSF6Po14RVtg2JP1Ww0hBHcU1XmP0kCr0naQSwdomEnjtwuGfvhfr9Te08YDMP0vMO2RZz90sE8iWq/Lp3I389xcKvC+AS8AsCVYMmpWpbh4L7aNu3P+1vlvPs2MpIl6vj7BzCxVQdHc6CeVCyiu84Bzqb1JE3rXW+rtTNYs4ExJ0LtlV8gKPvXsGJDXcXZmpI=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1-
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	//( "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141" )
         
         
         //x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         x		est Entier256("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e") 
         //x		est Entier256(3)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         //nSur3 est Entier256("0x55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0") 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // n/4 - 1
         //nPlus1Sur4   est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d9050") // (n+1)/4 
         //nSur4_Moins1 est Entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d904F") 
         //n_8   est Entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c828") // n/8
         //n_16  est Entier256("0x0fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414'") // n/16
         
         // calcul racine cubique de X 
         Trace(x.VersChaineHexa())
         racineCaree_x est un Entier256 = _RacineCaree_SHANK(x)
         Trace("y = racine(x) =" )
         trace(racineCaree_x.VersChaineHexa())
         //
         Trace("y^2 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCaree_x,racineCaree_x )
         trace(yy.VersChaineHexa())
         ////Trace("y^3 =" )
         //yyyy est un Entier256 =  corps.multiplicationModulo(yy, racineCubique_x )
         //Trace(yyyy.VersChaineHexa())
         
         //divisionEuclidienne256()
         //inverseModulo
         
         
         
         procédure interne _RacineCaree_SHANK( nombre entier256  ) : entier256
         	
         	// p = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         	trace(corps.P.VersChaineHexa())
         	// p-1 = 2^s * t
         	// p−1 = 2^6 * x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	// s = 6
         	// t = 0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905
         	t			est entier256("0x3fffffffffffffffffffffffffffffffaeabb739abd2280eeff497a3340d905")		// = (p-1) / 64
         	tplus1Sur2	est entier256("0x1fffffffffffffffffffffffffffffffd755db9cd5e9140777fa4bd19a06c83")	// = (t+1)/2
         	
         	// au "hasard". ne dois pas être un résidu quadratique
         	M			est entier256("0x40bf3e95c2d24abb0dc4a579b08c0d3f52ef113a8484f33e83de2d1fef487b48")	
         	
         	
         	B  est entier256 =  corps.puissanceModulo( nombre, t)
         	_X est entier256 =  corps.puissanceModulo( nombre, tplus1Sur2)
         	Y  est entier256 =  corps.puissanceModulo( M, t)
         	R  est entier    =  5 // s-1
         	
         	//@TEst
         	_32 est Entier256(32)
         	_yy est un entier256 = corps.puissanceModulo( Y, _32)
         	trace(_yy.VersChaineHexa())
         	
         	tantque R>=1
         		
         	  // calcul de B^(2^(R-1))
         	   _2PuissanceRMoins1 est entier sans signe sur 8 octets = Puissance(2, R-1)
         	   trace(_2PuissanceRMoins1)
         	   _2PuissanceRMoins1_256 est entier256(_2PuissanceRMoins1)
         	   B2R1 est entier256 =  corps.puissanceModulo( B, _2PuissanceRMoins1_256)	
         	   
         	   //@Test
         		_2PuissanceR	est entier256( _2PuissanceRMoins1*2 )
         //		B2R				est entier256	=  corps.puissanceModulo( B, _2PuissanceR)	
         		B2R				est entier256	=  corps.carremodulo( B2R1 )	
         		trace("R="+R+":"+_2PuissanceR.val0+":"+B2R.VersChaineHexa() )
         		Multitâche(-1)
         		dbgAssertion(B2R.estEgalA1())
         		
         	   
         	   // si c'est 1 
         	   si B2R1.estEgalA1() ALORS
            	
         	   		// Y = Y^2
         	   		Y =  corps.carréModulo(Y)
         	  sinon
         	  	    // B = B*Y^2
         	   		B = corps.multiplicationModulo( B,  corps.carréModulo(Y) )
         	   		// X= XY 
         	   		_X  = corps.multiplicationModulo( _X, Y )
         	   		// Y =Y^2
         	   		Y =  corps.carréModulo(Y)
         	   		
         	   fin
         	   R--
         	FIN
         	
         	renvoyer _X
         FIN
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP
    identifier : 0x2e12d85900ed5c65
    internal_properties : BQAAAAUAAACp1ekeYc8BwDiC+Ipp0l4v2EdFDh+u/VvmM0h/K/O+NwUFOiAiQXRN39l1JlZ/Pgnj+HatIGUqueyGrreTETh1J4P+ETFltnfCb3OzDQUxU6vmmNDOXQdcfy2yRi3tPgIjGaMUrcP33pY3J7ixPVjGy9QM/O0Nl9GpcbDZ5TUjTuvAFYRE5XxUNHRlqglkr5gkNXACAz297hD1HZfs5nNR9sis29uZ6ujNE/t4g9yW22m2DNthZZGeiJpmC25M2Cq485T1HefC4wFX/6GaXnFOS3tx1xEau6u8AMvxTOPlDhIp36PFJZ7ZmQm6EZ0EDDW1sA4z1/dqJ0rJW30TwP8MteuH0Bfeuw4hIPKaw6sT4ZRK8Bk4pKaYoBxmWMb2bdUq8jtlF1c/qMhhsUYFyDbDQwWAaIM9zWcrmxK6/BGJhRgTbd7CIYFowgXoCtrEpj3FO8nAVbPGiC83QYN3IY39ArLmOfeCogcXOcShWWEPJajV+/GnYYJ4e6mY/0VechQ84SeQoyXOMkPPHtGYtBE659nBiT6SxgCl6OXsXiCmtBiJCz7mG1VqYWCUpYhm2ER5DWuMLDYBY3fb7Zc+vDuVMPzeyiHfCBImcGrBJUsnrLWDJC9xGz8nj3XSy/H5Ws68tysjeYcapN0GXCQNto6azptp1mLACZ4WUUSvBuSmXErpbaz/QNECsjPFCtcV1+70Y0N/yKV3JyJgib7qmf3k3k3fZJNjSsAZqHNs
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         
         // nombre d'odre 3.
         // ie tel que  beta^3 = 1 mod 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //beta  	est Entier256("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         // ie tel que  beta^3 = 1 mod 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         
         // Racine carrée de 3:
         //racineDe3      est Entier256("0x3538be51af024152640d9ba6e4fa9c5ce6ed7102d28e789bcc8921c18a34cf78")
         //// Racine carrée de -3:
         racineDeMoins3 est Entier256("a6c75a9980b861c14a4c38051024c8b4245c45d44102ccf1be052cf836477ae5")
         //// racine de X^2 + X + 1 = 0 :
         //// (1 - racineDeMoins3) / 2:
         //// 0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf
         _moins1 est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
         _1 est Entier256(1)
         _2 est Entier256(2)
         //_1_MoinsRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3)
         _moins1_PlusRacineCaréeDe3 est Entier256 = corps.additionModulo(_moins1, racineDeMoins3 )
         //_moins1_PlusRacineCaréeDe3 est Entier256 = corps.soustractionModulo(_moins1, racineDeMoins3 )
         //trace( "-1-sqrt(-3)   = " + _1_MoinsRacineCaréeDe3.VersChaineHexa())
         _L est Entier256 = corps.divisionModulo( _moins1_PlusRacineCaréeDe3 ,  _2 )
         trace( "-1-sqrt(-3)/2 = " + _L.VersChaineHexa())
         //Trace( corps.multiplicationModulo( _L, _2).VersChaineHexa() )
         
         // racine de X^2 + X + 1 = 0 ( modulo xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 )
         //_Racine est Entier256("ac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283ce")
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_Racine est Entier256= _L //("0xac9c52b33fa3cf1f5ad9e3fd77ed9ba4a880b9fc8ec739c2e0cfc810b51283cf")
         x est Entier256 = corps.additionModulo( corps.carréModulo(_Racine), _Racine )
         x =  corps.additionModulo(x, _1)
         dbgAssertion(x.estEgalAZero())
         //trace("X^2 + X + 1     = " + x.VersChaineHexa())
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // _Racine^2 marche ausi ?
         // _Racine = CrytoLib.corpsECC.multiplicationModulo(_Racine,_Racine)
         
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         trace("Map(P) : " )
         trace(mapP.x.VersChaineHexa())
         trace(mapP.y.VersChaineHexa())
         //moinsX est Entier256 = CrytoLib.corpsECC.négationModulo( mapP.x )
         //Trace(moinsX.VersChaineHexa())
         KP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( P, _Racine )
         Trace(" K*P : k = "+ _Racine.VersChaineHexa()  )
         Trace(KP.x.VersChaineHexa())
         Trace(KP.y.VersChaineHexa())
         
         
         // (x, y) => (βx, y) 
         procédure interne _map( _p est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x =  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         	pointRésultat.y = _p.y
         	renvoyer pointRésultat
         FIN
         
         PROCÉDURE INTERNE _map2( _p est Point256 ) : Point256
         	RENVOYER _map(_map( _p))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_SQR_3
    identifier : 0x2e142a0400e15cc3
    internal_properties : BQAAAAUAAABN8WV6/SUjLhZU3j/aA1iZ5sZ8NhPzH3w1TYeuFInXlpGWQmjeOCLH80Pfo/QdTI5akLovfIGGvao3GsAbOzL6HpEZotHWgkFOdyBF2l/tQ2uh9tXDf+woLPPXbvA4my2n+DqcQ3FaXs6U1lJC3YQHXLldMcWDvzMfZdfqdX3Koht+V3LOo8rauvaDwLdyCpJ2D0rGudft8tpD2XlwGtHvUOomL2WX1jzf4Z++h9AEmX+0+lO/pyGOfgRyBb78oow+cSaBC3VGY9OFz2tC1m+0ycnTe8uIZ1NWnmPXjKMjzBCnuU8jZ14RB3MCvylwEss3OiB3LbU+v2yXrxfHTOFWS9GpdMEULyqvSlJQj//BB/LowpUuLuu/BUELwW1PiCpBudjGsvxQS6W+DtfUaZ3cihR1eUYyNs5YmCO3n34oblPuththSqYfNxrtEyGNbQbsgoKF3HR7z2jgoiDqzmzeNbmf3n4DH+KI4qX2/E4eNtuAqEJa9osDSJ5JPFg7HYErzLAl0i7DKXygG5IfrRT/ejQqHu3jC8fKDd7R2bYI2l43mYBAgV9UH45CBUY1lU+9nv55d9Ve4m8IH/h41KKsnnoeH08tmX/xi7+rLWEbVPYS+PO23r/LZ9ZpzLKWyrgmAo5Acp52RvLY6MmT3GzetXAzlspwmT7Ut1a6+lTK4M1YvO+Ew+0SksPg49Xo0KAghXXWyq3mYFU8/gslvoNRapWXMBMjFiy1NI8I
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsECC	//( "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
         
         
         //x		est Entier256("0xea92bdc008249e599c2570ab25deff4b35b971c0a059add76a64ce20724128d0") 
         // x= n-3
         x		est Entier256("2") 
         //x		est Entier256(3)
         //x		est Entier256(3)
         
         // y   = 70ad49ae7f8574ecab641a42b3a24f22d6374023944cc665a6bcaeb0f37bbf78
         // y^4 = 1
         
         //x		est Entier256("0x04") 
         //n=				   fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         //nSur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0")  // n/2 - 1
         //nPlus1Sur2 est Entier256("0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1")  // n/2 - 1
         nSur3 est Entier256("0x55555555555555555555555555555555555555555555555555555554fffffeba") 
         
         // calcul racine cubique de X 
         Trace(x.VersChaineHexa())
         racineCubique_x est un Entier256 = corps.puissanceModulo(x, nSur3)
         Trace("y = racine3(x) =" )
         trace(racineCubique_x.VersChaineHexa())
         //
         Trace("y^3 =" )
         yy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,racineCubique_x )
         yyy  est un Entier256 =  corps.multiplicationModulo(racineCubique_x,yy )
         trace(yyy.VersChaineHexa())
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : TEST_MAP2
    identifier : 0x2e155cf800e36084
    internal_properties : BQAAAAUAAAAvYDw+efh3mdmKLi9CA5SG1g50TppKNzzXvRXC2evkDZJ8G8xAa6VSFu5rYimlev+lJruDrsTh5cM7kAV+YqcMVWS6f69c2xRTBYvHd3M/J1RL39A7DyFGJmybWmOl2+pm6ZUvI1h1b4avtScUaFl8es1BT9FOdBtSD3Q6ft0hJki1CVkDkKq4p4fbsIws1ANaTXw0L+H7Hgz7mcEjx+HvgJO5dbCWis8gGP3+DLO+djcJo8fmBHzpvq8xDrsOq61O7Fg/fqwCG4pxu2jffBBgmd2ItSSxQSDPrPZ6CgPyVCcRUhlYRtLX6ho3hqz9eBk0R3488Z8UXbHAKGLpm2DW1GCQwP6IPgWeq/htxWTwKVDgTNwvk69MZ1kC8veIdlApSKfpTo38GveaB9q60kUQQCXu9IZtrqUKwNCY1XmAOtEJ/wQzazRur2xSqAFqp6DMoV9Ocm0vpsCWw+tmEz543RAgH+4I6w1eFlL9YDucTGMP/8coObeK+CzCX0LgVWUNA4X6mn/xMtpklGV9jJ6hMinRnfmcf3S299skfyTDA4d/raj1nyLqfkuWWcOYjcv0eePYm7rjlMyn9f7psi/bVifTNh5TRk9AmIH3Ojes/5FmBIu9Nm54rJaWoTJVdNIid6yqX7Bxqk5hMA5qhhXXmwMFVCtGMorlktBjX/hhtS8XW5CWfGRiA55BjnY1XBXTRWtLLecUcaMTJyCD4Yts9Kl71oiPifE1Ji4=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib est ECDSA_BTC
         corps	est CorpsModulaire dynamique = CrytoLib.corpsOrdre	
         
         
         _P est Entier256("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F")
         
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         //P =  CrytoLib.courbeBtc.pointDouble(P)
         
         // Test que 2 P = map(P) - map(map(P)) ?
         
         // on doit avoir _map(P) = _Racine * P
         mapP    est Point256 = _mapFrobenius(P)
         dbgAssertion(  CrytoLib.courbeBtc.pointEstSurLaCourbe(mapP))
         mapP_2  est Point256 = _mapFrobeniusCarré(P)
         moinsMapP_2  est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP_2)
         moinsMapP    est Point256 =   CrytoLib.courbeBtc.pointNégation(mapP)
         
         _2_MoinsP est entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f")
         _T_fois_mapP  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePoint( mapP_2 , _2_MoinsP )
         
         _P_  est Point256 =  CrytoLib.courbeBtc.pointMoinsPoint( mapP_2, _T_fois_mapP )
         
         // ---1
         trace("  Map(P) - Map(Map(P))   : " )
         trace(_P_.x.VersChaineHexa())
         trace(_P_.y.VersChaineHexa())
         ///---2
         //_2 est Entier256(2)
         _1 est Entier256(1)
         
         
         
         _1P  est Point256 =  CrytoLib.courbeBtc.MultiplicationScalairePointGenérateur( _1 )
         Trace(" P :"  )
         Trace(_1P.x.VersChaineHexa())
         Trace(_1P.y.VersChaineHexa())
         
         
         // (x, y) => (x^2, y^2) 
         procédure interne _mapFrobenius( _Pt est Point256 ) : Point256
         	pointRésultat est Point256 
         	pointRésultat.x = CrytoLib.corpsECC.puissanceModulo(  _Pt.x, _P )
         	pointRésultat.y = CrytoLib.corpsECC.puissanceModulo(  _Pt.y, _P )
         	renvoyer pointRésultat
         FIN
         
         // (x, y) => (x^4, y^4) 
         PROCÉDURE INTERNE _mapFrobeniusCarré( _Pt est Point256 ) : Point256
         	RENVOYER _mapFrobenius(_mapFrobenius(_Pt))
         fin
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K2
    identifier : 0x2e1826970129ec26
    internal_properties : BQAAAAUAAACSlZEOliBXmXm6PtdyA4yGNuac5tUkVj0EMmD9Ky/UZzaGTSS7XrMu/vBjilOt2gEppC1fpuw7SdtxMOmUloMqtX4M7x9M6/lLwc+XPG0ER0Vb8B34JkYUEwPCguqeALqKRsRk4q/Sy1kEeGDUIazphg5/uZhIzxTXVGkZv0t657/gS/mA7MtRTC4S84++rGBxCCm23kzxYOYd/+PtJAzs78MrFG/r+Ql055ZS3STPK8NeOt6rpldr3+/3Qn2LfyFHfZHDZgOacR3kuq962cd6f4x9TD7K+urKbdYVSTLKRiLkLR29fGkIGSX4NSPvO6yPyq2lfjyvKPi1DT26NJGdRxdniTNF8dzhkEGEupGiU3G1L5gr9Q0icV9G8nfinHrnlAEhHs861osS/SrKpHPSnvk4JF5HtKE2sJ5oFwpdeYaODGXy9XpVuCfpsJzxHinuQf1lSQZl3DT+epHCydJ4h27wcDz0ZlMocJooICfN7vaxp6LDpS0eOuazWqWdkJddhX7a6Dm/treOZr11uKcx+7PA73bRoAxgKW/osE5VT/tpmW7LdDumc9hh0MjKca1sNSGYOTU8sicYS7ydgOpiLRD4bkiRTlHCMEJJrJ/CCv6xB42DlgzGwlfEAZ9A2no6B1hvzjfqI+f+p8ndOZgUmphM0+oVE++u25sa5leAJk6w6heV2rexQpGCA2dWRfxM1ujanAsQ5R9XKySP5VeoCL0v6jxTXcLam5M=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         
         nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         // trouve x,t,r tels que
         // s*N - t*_Racine = r et r < nMax128Bit
         soit (s,t,r,i) = PGCD_Etendu_StopMax(N, _Lambda, nMax128Bit)
         
         // vérifie que  S*A + T*B = R 
         _SA		est Entier512	= multiplication256x256_512(s,N)
         _TB		est Entier512	= multiplication256x256_512(t,_Lambda)
         _Tmp	est Entier256 
         // r = SA + TB  : 
         bSPositif est un booléen = estpair(i)
         SI bSPositif ALORS
         	//  avec T négatif  =>
         	//  R = SA - TB 
         	_Tmp = soustraction( _SA.valPoidsFaible, _TB.valPoidsFaible  ) 
         SINON
         	//  avec S négatif  =>
         	//  R = - SA + TB 		
         	_Tmp = soustraction( _TB.valPoidsFaible , _SA.valPoidsFaible ) 
         FIN
         trace(_Tmp.VersChaineHexa())
         
         
         Trace("************Trouve :")
         trace("s:"+s.VersChaineHexa())
         trace(t.VersChaineHexa())
         trace(r.VersChaineHexa())
         
         // R-1:
         _0_256 est Entier256
         soit (s0,t0,r0,i0) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i-1)
         dbgAssertion((i0=i-1))
         // R+2
         soit (s2,t2,r2,i2) = PGCD_Etendu_StopMax(N, _Lambda, _0_256,i+1)
         dbgAssertion((i2=i+1))
         
         Trace("************ -1  :")
         Trace("s0:"+s0.VersChaineHexa())
         Trace("t0:"+t0.VersChaineHexa())
         Trace("r0:"+r0.VersChaineHexa())
         
         Trace("************ +1  :")
         Trace(s2.VersChaineHexa())
         Trace(t2.VersChaineHexa())
         Trace(r2.VersChaineHexa())
         
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         // vecteurs tels que  X + Y*_Lamda = 0 modulo N
         V1_X est Entier256  = r2
         V1_Y est Entier256  = t2
         V2_X est Entier256	= r
         V2_Y est Entier256	= t//corps.négationModulo(t)
         //_Tmp est entier256
         _Tmp = _F(V1_X, V1_Y )
         Trace(_Tmp.VersChaineHexa())
         _Tmp = _F(V2_X, V2_Y )
         Trace(_Tmp.VersChaineHexa())
         Trace("****** ")
         Trace("X1 (v1.x) = " +V1_X.VersChaineHexa())
         Trace("X2 (v2.x) = " +V2_X.VersChaineHexa())
         Trace("Y1 (v1.x) = " +V1_Y.VersChaineHexa())
         Trace("Y2 (v2.x) = " +V2_Y.VersChaineHexa())
         
         X1Y2 est un entier512 = multiplication256x256_512(V1_X,V2_Y)
         X2Y1 est un entier512 = multiplication256x256_512(V2_X,V1_Y)
         _Delta est Entier256 = soustraction( X2Y1.valPoidsFaible, X1Y2.valPoidsFaible )  
         Trace("_Delta = " + _Delta.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         //trace(X1Y2.valPoidsFaible.VersChaineHexa())
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         
         //  = K * Y1 / Delta
         //   =K * Y2 / Delta
         _B1 est Entier256("0x085428ac856e542bb711d2bb9e408611")
         
         K_Y2 est Entier512 = multiplication256x256_512(K,V2_Y)
         
         
         
         _DeltaLow est entier256 = _Delta
         K_Y2.multitpliePar2puissance128()
         _DeltaLow.diviseParUnePuissanceDe2(128)
         reste est Entier256
         trace(K_Y2.valPoidsFort.VersChaineHexa())
         trace(_DeltaLow.VersChaineHexa())
         
         (_B1,reste) = divisionEuclidienne256(K_Y2.valPoidsFort, _DeltaLow  )
         trace("_B1:" + _B1.VersChaineHexa())
          
         
         _B2 est Entier256("0x2b6a121d1ef84b440996421265b4e26d")
         K_Y1 est Entier512 = multiplication256x256_512(K,V1_Y)
         K_Y1.multitpliePar2puissance128()
         (_B2,reste) = divisionEuclidienne256(K_Y1.valPoidsFort, _DeltaLow  )
         Trace("_B2:" + _B2.VersChaineHexa())
         
         
         
         // v = b1*V1 + b*V2
         VX1 est Entier512 = multiplication256x256_512( _B1, V1_X )
         VX2 est Entier512 = multiplication256x256_512( _B2, V2_X )
         
         YY1	est Entier512	= multiplication256x256_512( _B1, V1_Y )
         VY2	est Entier512	= multiplication256x256_512( _B2, V2_Y )
         
         VX est Entier256 = soustraction( VX2.valPoidsFaible, VX1.valPoidsFaible )
         trace(VX.VersChaineHexa())
         K_VX est Entier256 = soustraction( K, VX)
         
         Trace("K-VX=" + K_VX.VersChaineHexa())
         
         VY est Entier256 = soustraction( VY2.valPoidsFaible, YY1.valPoidsFaible )
         Trace("VY=  " +VY.VersChaineHexa())
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K3
    identifier : 0x2e19a33400edabb1
    internal_properties : BQAAAAUAAACmGZ9Jc7UAM4RA5QMZ5N5kkGQc9Z/9MlXcKR1zBa4EvUGYAyEhZr2dr2Giu58GIYnRBRUOozt75JPxLJysai4XDAdfe2NStzJRAMPJkpB/3UQp5smAvog3SG1asiCbLGqQNogIiFyg6/kuWZdMKICq3Wuu9PfjMxjb0lLLX23CVW/SNy2Zqlu6TI5wA8zFrwEEN1+GhHIZDnWvKhvg4cd8B3SHVwrz4GClUhj703XHeel8OocA/FMedKSJ58uW8uagqFphtJG1iSMiUQO3GEh9xU+s/76wOISPe/sNIuiKCdEXA1FBps32fh+l02L3WBmcDIikbay4+DOFo4tm0V/XVVcwinpSyEdpqC3SGsN/0WxsTz37hn7gAkrX1MIazKb+VXm+VDsr1nmuKHzUp6ccMxfOSU4YQKY9/OijChVJYsBIvGpKuacHweDze0UtW7lL92cUx8l1XehU1uLQE5g/0XzSmZLiYwmZt60jor8ASSPeBG1fEelyV2ntxQhtMcZHDmhCKQ8XfkujA22FpW3T2SmBECbKH3lzbE7cBGYkwlWihd2VpuNoRCe0in3RPWHqvJd7wdl9BuZ+dYxumil4uIJsZwq+dD+OPLcvTgTEIwywXmDrdWolMra3raho5vXMKqciTnbPXT6fk9VBUkoNwpDr+1G5R4mFrN0uvZvFUuanAqL+ujpW8pwCHw8rLnv6u/3l56vxjP9ByRvhJZvCTTShD2ABl6Y=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         corps		est CorpsModulaire dynamique	= CrytoLib.corpsOrdre
         N est Entier256 = corps.P	
         // 					0x100000000000000000000000000000000 00000000000000000000000000000000
         _Lambda est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         //_0_256 est Entier256
         //nMax128Bit  est Entier256("0x100000000000000000000000000000000")
         
         CalculeCoefConstantEuclide( _Lambda )
         retour
         
         // renvoie x + L*y mod N
         procédure interne _F( x Entier256, y Entier256 ) : Entier256
         	res est Entier256 = corps.additionModulo( x, corps.multiplicationModulo( y, _Lambda ) )
         	renvoyer res
         fin
         
         
         
         // Test de multiplication par K (nombre "au hasard")
         K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         // cas a pb
         //K.val0	=0x8C9709EE2C00DB85
         //K.val1	=0xED340B2E31901BFD 
         //K.val2	=0x5DCE66E6049C6A08
         //K.val3	=0x7B5AAE134D8FDABF
         // cas a pb 2
         K.val0	=0xCD20AFA495B7BF2B	
         K.val1	=0xC1605B209D915713	 
         K.val2	=0x732947073A8716AF	
         K.val3	=0xF5CDDA00DF9C6B90	
         
         
         // renvoie V1,V2,signeV1,signeV2 tels que
         // V1 + V2*R = K ( modulo N)
         // avec V1 et V2 "petits" = sur ~128 bits 
         // signeV1 et signeV2 valent +1 ou -1
         procédure interne _calcVecteurOpimise( _k est Entier256 )  : (Entier256,Entier256, entier,entier)  
         
         	// constantes calculée par utilPourOptim.CalculeCoefConstantEuclide() :
         	_moinsDelta est Entier256("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141") // X2*Y1 -X1*Y2
         	V1_X        est Entier256("0x03086d221a7d46bcde86c90e49284eb15")
         	moinsV1_Y   est Entier256("0x0e4437ed6010e88286f547fa90abfe4c3")
         	V2_X        est Entier256("0x00e5e9bd2461792dd1aca54cdd1d8b2a6")
         	moinsV2_Y   est Entier256("0x58a1bcb25ae2b9cc084678edad30447a7")
         	
         	// B2,B2 : coefficients tels que "(K,0) - (B1*V1 + B2*V2)" soit sur ~128 bits
          	_B1      est Entier256 // ex : "0x276e6bcbe7ba30a0b216a78e91107e13"
         	_moinsB2 est Entier256 // ex : "0x0658d53831aae2574117afb315cc83da"
         	
         	moinsK_Y2 est Entier512 = multiplication256x256_512( _k, moinsV2_Y)	
         	moinsK_Y1 est Entier512 = multiplication256x256_512( _k, moinsV1_Y)
         		
         	trace("K1*Y2="+moinsK_Y2.VersChaineHexa())		
         	trace(moinsK_Y2.valPoidsFort.VersChaineHexa())		
         	trace("delta="+_moinsDelta.VersChaineHexa())		
         	// calcul de B1 =  K*Y1 / _Delta
         	//	         B2 = -K*Y2 / _DeltaZ
         	/// comme delta = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 ~= 2^256, 
         	//  on approxime la division par un décalage de 256 bits vers la droite.
         	_B1 	 = moinsK_Y2.valPoidsFort
         	_moinsB2 = moinsK_Y1.valPoidsFort
         	
         	//moinsK_Y2_haut est un entier512 = moinsK_Y2
         //	_DeltaLow.multiplieParUnePuissanceDe2(128)
              //moinsK_Y2_haut.multitpliePar2puissance128()
         //     Trace("moinsK_Y2_haut=" + moinsK_Y2_haut.VersChaineHexa())	
         	//moinsK_Y1.multitpliePar2puissance128()
         	// calcul de la division entière : donne un nombre de 128 bits si K est sur 256 bits
         //	reste est Entier256
         	//soit (     b1,reste) = divisionEuclidienne256(   moinsK_Y2_haut.valPoidsFort, _moinsDelta  )
         	//_B1.multiplieParUnePuissanceDe2(128)
         	//'0x1a08ee06c6ba89c9f5498001ad0306fdd4382c84d8d3008c7fd6305c0da8a294'
         	// idem B2
         	//(     _B2,reste) = divisionEuclidienne256(moinsK_Y1.valPoidsFort, _DeltaLow  )
         	//_B2.multiplieParUnePuissanceDe2(128)
         //	trace("b1: "+ b1.VersChaineHexa())
         	trace("_B1: "+ _B1.VersChaineHexa())
         	trace("_B2:-"+ _moinsB2.VersChaineHexa())
         	
         	// v = B1*V1 + B2*V2
         	// B1*V1
         	B1V1X  	    est Entier512	= multiplication256x256_512( _B1,      V1_X      )
         	moinsB1VY1	est Entier512	= multiplication256x256_512( _B1,      moinsV1_Y )
         	// B2*V2
         	moinsB2V2X	est Entier512	= multiplication256x256_512( _moinsB2, V2_X      )
         	B2V2Y	    est Entier512	= multiplication256x256_512( _moinsB2, moinsV2_Y )
         //	dbgAssertion(B1V1X.valPoidsFort.estEgalAZero())
         //	dbgAssertion(moinsB1VY1.valPoidsFort.estEgalAZero())
         //	dbgAssertion(moinsB2V2X.valPoidsFort.estEgalAZero())
         //	dbgAssertion(B2V2Y.valPoidsFort.estEgalAZero())
         	
         	// vx     = b1*v1.x + b2*v2.x
         	VX512	est Entier512	 = soustraction512(  B1V1X,   moinsB2V2X )
         	dbgAssertion(VX512.valPoidsFort.estEgalAZero())
         //	VX	est Entier256		  = corps.soustractionModulo(  B1V1X.valPoidsFaible,   moinsB2V2X.valPoidsFaible )
         	VX	est Entier256		  = VX512.valPoidsFaible
         	Trace(" B1V1X= "  +  B1V1X   .VersChaineHexa())
         	
         	Trace(" B2V2X=-"  +  moinsB2V2X   .VersChaineHexa())
         	Trace(" VX ="  + VX	.VersChaineHexa())
         	
         	// vy     = b1*v1.y + b2*v2.y
         	//B1VY1_256 est Entier256 = corps.négationModulo(moinsB1VY1.valPoidsFaible)
         	VY est Entier256         = corps.soustractionModulo(  B2V2Y.valPoidsFaible,  moinsB1VY1.valPoidsFaible   )
         	//moinsVY est Entier256    = addition(  moinsB1VY1.valPoidsFaible,  moinsB2V2X.valPoidsFaible ) 
         	Trace(" VY ="  +VY.VersChaineHexa())
         	//moinsVX est Entier256    = corps.négationModulo(VX)
         	moinsVY est Entier256    = corps.négationModulo(VY)
         		
         	// k - vx = K - (b2*v2.x - b1*v1.x)
         	KmoinsVX est Entier256 = corps.soustractionModulo( _k, VX)
         	//Trace("K-VX ="  + KmoinsVX.VersChaineHexa())
         	//Trace(" -VY ="  + moinsVY.VersChaineHexa())
         	
         	//_0_256_ est entier256
         	signeX est entier = 1
         	signeY est entier = 1
         	VX_Resultat	est Entier256 = KmoinsVX; // corps.additionModulo(     B1V1X.valPoidsFaible , B2V2X.valPoidsFaible ) 
         	VY_Resultat	est Entier256 = moinsVY; //corps.soustractionModulo( B1V1Y.valPoidsFaible , B2V2Y.valPoidsFaible ) 
         	// si VX_Test<0
         	si VX_Resultat.bit(255)=1 ALORS
         		// x' = -x
         		VX_Resultat = corps.négationModulo( VX_Resultat ) 
         		signeX  = -1
         	FIN
         		// si VX_Test<0
         	SI VY_Resultat.bit(255)=1 ALORS
         		// y' = -y
         		VY_Resultat	= corps.négationModulo( VY_Resultat ) 
         		signeY	= -1
         	FIN	
         	
         	// renvoie le vecteur (Lamda-(b1*v1+b2*v2))
         	renvoyer ( VX_Resultat, VY_Resultat, signeX, signeY )
         fin
         
         soit (k1,k2,signek1,signek2) = _calcVecteurOpimise(K)
         
         // on vérifie que le résultat a bien les propriétés attendues
         k1AvecSigne est entier256 = (signek1 = -1) ?  corps.négationModulo(k1) sinon k1
         k2AvecSigne est entier256 = (signek2 = -1) ?  corps.négationModulo(k2) sinon k2
         _Tmp est Entier256
         _Tmp = _F(k1AvecSigne, k2AvecSigne )
         dbgAssertion( _Tmp.estEgalA(K) ,"nombre pas OK")
         // k1 et k2 doivent êtres "petits"
         dbgAssertion( k1AvecSigne.val3 = 0)
         dbgAssertion( k1AvecSigne.val2 < 0x1000)
         dbgAssertion( k2AvecSigne.val3 = 0)
         dbgAssertion( k2AvecSigne.val2 < 0x1000)
         //sinonK
         //	_Tmp =  corps.négationModulo( _FMoins(k1, k2 ) )
         //fin
         Trace("-------------------------------------------------------------")
         Trace("k1:    =" + k1.VersChaineHexa()) 
         Trace("k2:    =" + k2.VersChaineHexa()) 
         Trace("k1+k2*L=" +_Tmp.VersChaineHexa())
         Trace("K=      " + K.VersChaineHexa())
         
         
         // N = générateur du groupe des points  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
         // P = ordre de la courbe               = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
         
         // un nombre d'odre 3.
         // ie tel que :  beta^3 = 1 modulo N
         // NB : tout nombre d'ordre 3 est OK.
         
         beta  	est Entier256("7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
         // R tel que map(P) = R*P
         // racine du polynome : X^2 + X + 1 = 0 ( modulo P )
         _Racine est Entier256("5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72")
         dbgAssertion(_Lambda.estEgalA(_Racine))
         
         	// (x, y) => (βx, y) 
         	PROCÉDURE INTERNE _map( _p est Point256 ) : Point256
         		pointRésultat est Point256 
         		pointRésultat.x	=  CrytoLib.corpsECC.multiplicationModulo( beta, _p.x )
         		pointRésultat.y	= _p.y
         		RENVOYER pointRésultat
         	FIN
         
         
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         // on doit avoir _map(P) = _Racine * P
         mapP  est Point256 = _map(P)
         // gestion du cas ou les coefficients sont négatifs
         si signek1 = -1 ALORS
         	// P = -P
         	P = CrytoLib.courbeBtc.pointNégation(P)
         FIN
         SI signek2 = -1 ALORS
         	// P = -P
         	mapP = CrytoLib.courbeBtc.pointNégation(mapP)
         FIN
         bSigneOpose est un booléen = signek1<>signek2
         //ChronoDébut()
         // calcul optimisé
         //P1_optim		est Point256	=  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P,       k1   )
         //P2_optim		est Point256	=  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( mapP,    k2  )
         
         //KfoisP_optim	est Point256	= CrytoLib.courbeBtc.pointPlusPoint(P1_optim, P2_optim )  
         //KfoisP_optim	est Point256	= CrytoLib.courbeBtc._multiplicationScalaire2PointJacobi(P, k1, k2, bSigneOpose )  
         //
         //trace(chronofin())
         //Trace("KfoisP_optim=")
         //Trace(KfoisP_optim.x.VersChaineHexa())
         //Trace(KfoisP_optim.y.VersChaineHexa())
         //
         //// calcul standard de "KP"
         //ChronoDébut()
         //KfoisP_defaut  est Point256 =  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P, K )
         //Trace(ChronoFin())
         //Trace("KfoisP_defaut=")
         //Trace(KfoisP_defaut.x.VersChaineHexa())
         //Trace(KfoisP_defaut.y.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : K1_K4
    identifier : 0x2e1ad517009b85a6
    internal_properties : BQAAAAUAAAD2ENSj9n6cf7GUJ4Kf2IEa51GppQR2fmdkzH0Bmi+lHJ/c5NZqPtJIroZ4ayRo9sQqYWIH0jLUd0CHLfPGD5J5hvnjvZogCFUCn+uGsAp5kU+yXY2T3JbsdIsX4+t84SEZLoid30yG1xcAtQ0BcEXfstyUuIpBH0kBmiUSja4pm2znjRTg8/7zG98lVgk+Vg+sk4ZR5mp1bX8k9exbcEaY/B5AIZPa8C4nkxwrxOw6q49bAaW5y4KAPQ24cgDX7/wOIvfk8JjtJH50Pac5oeDwIMNsOGXbTbI/z9ea4PXFjl1XBUe8ront/+Xp+FfCFVQV8hpre16zeQlUCnSWQyPm6R3hfHR9AZJIxbaN8aFccz72PGmOjsebhLJubP79QADh6D2tJp69pUegbINwnUsWkgBTkWrmWBY840zsC0YwbMmk3BKU16Uj1aQ22srrZBRdjzopCa3C+AhfWcsT1XUAFz5sdwd/9NqivGsAC4DWstYRhwegsL/X5fQiO2GC1oWjkK0gMK6FSNAm48rx/AWfI38/nDbVfEVhTE2GQ4mjZ1fCxUp6SUl920JC/y1DCXAoiGeAIAIsA18ztfmmVJ275ip25BkvZvBBu+Zz8e+F9RfJmTSLHaFZyCgkmLWrPTXFeIpVYy0jo55EXI2FynowZ6JlnNCy+Y7kt5Za5shgOscSYEGUcyncUFFubb8Gwpa2w7HADim+uHM62FtXfE+dBI/ieYByW9Ps5TCv
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CrytoLib	est ECDSA_BTC
         
         // Test de multiplication par K (nombre "au hasard")
         //K est Entier256("0x071e443c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef878")
         K est Entier256
         // cas a pb
         K.val0=0xCD20AFA495B7BF2B	
         K.val1=0xC1605B209D915713	 
         K.val2=0x732947073A8716AF	
         K.val3=0xF5CDDA00DF9C6B90	
         
         //Point = 2*G , pour test
         P est Point256 = CrytoLib.courbeBtc.pointGen
         P =  CrytoLib.courbeBtc.pointDouble(P)
         
         ChronoDébut()
         
         KfoisP_optim	est Point256	= CrytoLib.courbeBtc.multiplicationScalairePoint_Optimise(P,  K )  
         
         trace(chronofin())
         Trace("KfoisP_optim=")
         Trace(KfoisP_optim.x.VersChaineHexa())
         Trace(KfoisP_optim.y.VersChaineHexa())
         
         // calcul standard de "KP"
         ChronoDébut()
         KfoisP_defaut  est Point256 =  CrytoLib.courbeBtc.multiplicationScalairePointJacobi( P, K )
         Trace(ChronoFin())
         Trace("KfoisP_defaut=")
         Trace(KfoisP_defaut.x.VersChaineHexa())
         Trace(KfoisP_defaut.y.VersChaineHexa())
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_VérifieSignature
    identifier : 0x2e1b496d009cf43f
    internal_properties : BQAAAAUAAADBXQbOT5V+ckbrsiCOWXkbGca2NEyxrCEn7eTtJ/R53mzli6uYKdmoKRhksYJUx5scsAPAzn1tDG1dihJV0oZdQdEKDegYjL7sPBAJmtuoTgLbIhTATcQlUs+ISvMuX5cSMy67eBWuEPgXvgnh/6F84TODERj0qAs50OFaPkvWBaNugq1+/vU9TbNeu+CabUCdCnu5Mjm+uoqDpbe/AglYaUs4WEqRU3H9Fj9W0dR2LRAx29zQGlTCKDHtF79ncuOpys1R6wl0xJkm9VJn5y6JX/EADfUSuyc5JVB9SsTIjYlLgUlDy6gt7JqK4c1tElbSU2yqj97A4Qb/wa8fEzw0IysBl9MPDpICk+GWG+vPmSaXWLDwspAWCCuoEkHWRSVqbiVtH5fvyKjJEYRZZJzdPUdKEpchGdNHt8KGTi/prTAzhejQk5kA3BeqRPgm1O9Hkfd+6yU2eEcPmdeBN/cz2DSA8400/tM7TdRrjd2dd3qLQTlTxV5kb3XEq8kqKI72K5ko59Hw1KOHRv2sALkqly0bzTCgzBaHokdMb1TC7+/2Rzj4SNWVRtVOBVo1hHSgxZFcHGeDidgjiDJdnbpMW1kzfbyM62fLbXvGKMiiMQhS2Z7G1lI4nEo3pgrefE50z9e4Kj5F1n2U/euuJSO5LEt3QEq5TjQG6E8i1GTKx+UTCYjkpL4QGAFRGijgYrEnQnL6Me4Qon5hwDFQQsr0mrMJsrPhbpPhXWyB9PltiA+JYf1DlWkxBNZVfg==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         
         // signature
         signature est SignatureEcdsa
         signature.R.affecteAvecChaineHexa("381d97bbc2cfbe448bf256bdb5ff9cd6fdbe27726ee4d603a4f92fa541fa7518")
         signature.S.affecteAvecChaineHexa("040e51ef10775569752ce8258dd5c382e1a39ae6530ba1044a58bed5f8ca9d55")
         // clé pub
         CléPublique est Point256 //= CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         CléPublique.x.affecteAvecChaineHexa("5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         CléPublique.y.affecteAvecChaineHexa("b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         // valeur signée
         N est Entier256("12345678")
         
         sERR est chaine
         Trace("Calcul...")
         ChronoDébut()
         bOK est un booléen =  VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BQAAAAUAAABd4biPtdLQOwfUFiqrit8H4xfGqKyz9t6VLxCUnNZRQiLPVs82PZNE+UVdKRzjizyeuKyRur85gNMUfqplpmtNDnQWQla9zo+GH9+1EfUJ6w17Dn/egD/gv+Hhywk8c9unIdzEp7EHgaAqD28w7Agveg4u19PBcKGZtQ==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BQAAAAUAAABqPQh6HC8RxAVkp2SqPYLuZrfVhd+1KX4lx22hIT8uqEpE6yP7Sbc2rmVqdmL816EWzXOkEe9ijOtYwchZKAfpy3B1cNqhpJgsnbUs
 code_elements :
  internal_properties : BQAAAAUAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCEDURE MaFenêtre()
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 2
   -
     code : |1+
      
      
     type : 40
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     code : |1+
      
      
     type : 180
   -
     type : 230
     enabled : false
  procedures :
   -
     name : PGCD_Ex
     procedure_id : 1994461367820771349
     type_code : 14
     code : |1+
      
      PROCEDURE PGCD_Ex( nA entier, nB entier)
      
      dbgAssertion(nB > nA )
      
      r, u, v   sont des entiers
      r_,u_,v_ sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      u  = 1
      v  = 0
      u_ = 0
      v_ = 1
      
      tantque r_ <> 0
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp,vTemp sont des entiers
          rTemp = r;
          uTemp = u;
          vTemp = v;
          
          r =r_
          u =u_
          v =v_ 
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	u_Avant est entier = u_
       	v_Avant est entier = v_
      	u_ = uTemp - quotient * u_
      	v_ = vTemp - quotient * v_
      	//trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " + u_Avant )
      	trace( complete(r_+"",4," ") + " = " + Complète(uTemp+"",4," ") + " + " + quotient + " * " + u_Avant )
      fin
      
     type : 458752
   -
     name : PGCD_ExR
     procedure_id : 1994470541871085041
     type_code : 14
     code : |1+
      // version résursive
      PROCEDURE PGCD_ExR( nA entier, nB entier, u=1, u_ =0 )
      
      //dbgAssertion(nB > nA )
      
      r   sont des entiers
      r_  sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      
      
      si  r_ = 0 ALORS
      	renvoyer ( r, r_ ,  u, u_) 
      
      FIN
      
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp sont des entiers
          rTemp = r;
          uTemp = u;
          r	  = r_
          u     = u_
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	uPourTrace est entier = u_
      	u_ = uTemp - quotient * u_
      	trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " +uPourTrace )
      	// récursion
      	( r, r_ ,  u, u_) = PGCD_ExR( r, r_,u,u_)
      	
      renvoyer  ( r, r_ ,  u, u_)
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAAwjDLmDSZ0H1P68nJIeNfqR9EvRjU/K+sVcM1T6rhVNr+VTV1mZ/rmoweYbFDZUhBGcv8UsxlDxVCOnb2U/SQOvlGWzNby3/w/V+ppSymxv+Vh
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1b7cfed701529005
  internal_properties : BQAAAAUAAAAa2Zm8J9E/zh+/WIrVvz1fER/So3PB0gjQuxc1xKQVWY4ZDm5lfg==
custom_note :
 internal_properties : BQAAAAUAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
rad :
 internal_properties : BQAAAAUAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
