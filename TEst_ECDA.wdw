#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : Test_ECDA
 major_version : 25
 minor_version : 0
 type : 2
 description : ""
 subtype : 0
window :
 name : Test_ECDA
 identifier : 0x2b7cfedd00d3a562
 internal_properties : BQAAAAUAAAAhSEnC+OqxJ3InZrzPyZnGaOOzeSRKPxXZCvkFTlZ+r91uo+6x9zWAPiCpr0cvWadFegUgw9NVsgebCVGNAbuijrPNUyBmm8aqJ9Kkh2Q0PE+UJ0MQJm9HmRYpgvBQixsGduXgjZW9rwNqZ9ZAH9LS3ZwRrWf7GijupyAg1Ox0C5/4HTE0Wuz+338MSQNHOhfhY4dt65D6cvS5RNps6IwEo2XEEA7NWsQlp4ycYgxgkxxMzDl3xV78pmiOHv3HcAlQa1CU5CHyYozSIbG9gPdTV29pjYE/rjxs3XP17GJ7MaKnSJzN1MPNR+pAzuSG4uvWkk8BrN9s4SFQ/gLNmc9Uz8DGhXWINPMSHK41v1Mp5Zbz9OPvrLuguuw1jNyWPJ3N2LnN2Dta3wxikvfm1v+Ogo/JfXqXkBKCmqc05wVhKzRWvo8kFKnMK3ICa3yHowXBdO+phg9QRCLt6kwhQ8U3MBvR+4hV1X+9UDFbNumWGhWAhA/5+tc/bhk6dLiR7xSBgVYQa6T3UDWmeVHFtu68EzOmTG2G9F9A98XIILnKuoKC5hIvLNqmAqEAjY+7z+G3dQHcM0NbNv6Jd6YyR5Ev76xgjfZZCy7wLGCGw0S6I1FoPkDZ+8l89f8nNEre7phjG2dyseQTgwIpuM3Z/qbCWIRCJhdRcb/HQq73CDHXNKo9oxMJCS8FP+FSAKGD8Rnsjr/6DTLv0qRr7vXYefG2vf6Ta61q0Yfd9yIgFh5+oN2WC/OmW6GgqusqZqo8kk5gr475/ivZ8GdWEmrVdjYVMER6wvh5qXooQ6O7GdofzfgpSkpflx4qVA3JfWb+ciiXKkABKqbLivLn68CwvEA6f/jiqReyNhJmXem5BEMZcfOeMtcWvQ==
 controls :
  -
    name : priv_pub
    identifier : 0x2b7cfee80119d106
    internal_properties : BQAAAAUAAADaC2k52t8asczvxbn82ncdijWwsg3W4dfQnoScDdyO53ARfLrfTNpcjlmY508kyJgo8BLxZzqYIh6SRgamOBXdQaWjFjHzPLyczrtwc3MhRpoNEL9zFgBOV/oMP1dPxYqZuDKxGw7gBir0Ggmfmi/2YBbasAvBgyUoH3+drg3uJlIDFM68wNj3Pa0zyOWWOzP4RIcwI4ZcAzh5YsbZZEGpjnQl8yC6+3fbAfO/JmmbWMFiZRO7jJ25ODTtcyR6rpn6jP+0vZlXa9z0WMRJZWDDOnlWoXiJThsxq7n9aEUKlX8YflG4pHp1yhffABxU6AX3df/mUIfkMsby7LCtTmkpUXJs9HJNhtwZcLYVmAPAG+8+XNho95kKSndk113FegF3bmDGFHbjAf5NVmsbfx7PTYpfBzFYw67LRaUhXv7F3aZIshkonjF1zj+3AzRbtFMBtAZhZXRIQZ9ldBqlwomF9E3n0jn7+BZPX4fCLU67TR7IyKw1oPDDmZHnci0XlDZ07Pi13RiIQ3O1A5CwTVfY9/4gKi5XVEuhmJx7Zb8yswmyIfyp5oZpAxyy4dHtJ/VZlBBvrBRrDMlH2Sq6j6VbKU0LJ5ae4EsGG7pjOoc+4Ru6NjdLZY6oQRdPQlMmEjQ4Juy624ibEIoPuX9Ae0jUs7y//BtLwSJTUG8ojvk2qlkExwR/ACBZSfSCboP6hqBzZ9dKke+F6JPzKcYBkBocqmB1CXHDkQABBKTSMwiXPfdDcRMWnwT1M444WKYfD6YhYQrfXkAg3BzLUw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         gbModeBench = vrai
         CrytoLib est ECDSA_BTC
         //ClePrivee est Entier256("75be5c76cde3bcb877a523f618c839cb6ac58269880288734acee9473a180744")
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         //CléPrivée est Entier256("2")
         
         Trace("Calcul...")
         ChronoDébut()
         ClePublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée(ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         Trace(ClePublique.x.VersChaineHexa())
         Trace(ClePublique.y.VersChaineHexa())
         
         // 5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b
         xOK est Entier256("0x5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         //xOK est Entier256("0xFD0F6EBE95AAFBED3C431047BB3D9DEA4324B8D6CDBC16D35AE30AC22E9548")
         yOK est Entier256("0xb809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         
         
         dbgAssertion(ClePublique.x.estEgalA( xOK) )
         dbgAssertion(ClePublique.y.estEgalA( yOK) )
         // b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : FIn1
    identifier : 0x2b8390ec00c21e47
    internal_properties : BQAAAAUAAADNw0XUin/4K1tFJe6hw/Q3CJerSSQ8Fa1MirHufmEKSTe0jTP2dymkoiS3n1BWL5NVbEDyEYW1SNKhaG4HHjlFUGsWj/+qvWbrO0v/VDL6/JcxoFhtaHlzWxSx1EAVjfmKU1PWu8hoAzqEsr89cPUCNL7psYhXu4mjqg3In0XKPC9LQKT18ne5cg6lhHPbbDYBhudZ2GEonUkqNTi5y64ssk9LkYEJIrofGqw+XbJCCBqLtTvidbIjkfPVQbnl2HvuRJoDvtr8OrBFzz5kAk4e8tkFM4iEomudmXhcVqYTvS+OeQECnDOu4EzRe20bJJFFnPywUtS2VKuIFmw5Pwl8lkBqqIqAmk8tcVjSM04+OZHAMdpHHabc0/3yJsgAJQGrAZPDyYmfHNmMS7i3KhBtlgoW0EtRGS8cutyS6vcHY43mwXr63RO2E/gw8Po4eCeqBhdmuStuzIbMJ6Mz+eVxTbdWVzVg1NUCnmLJx3+TEBlEhVsVl4Z4NqJ80zN0FpQh+I8eMXNAmPhCRL2gyNcYdibvhVbubvyyWTr5y/oIhPFdDYTEkM3ZTxA0o9oXcUSVMD2G+K6t908AZEzzw27Ennh9Xf9d6mANLhs2DDuR1iJebHPxz1nIVms8SS2ncNrFinOoIAWtcVBLj9h81J4uYVjEwxmlk8maRwepOH1ZfD81DSAa1yg9cty0+L7Gd+a31PXvZ6xRnbpPKGujulkup7Kglw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         ferme()
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_SigneNombre
    identifier : 0x2b9198d600a6d698
    internal_properties : BQAAAAUAAABQJwa7ko54cZp24ZXL7U0ZrLtoFHHIyzU2e6wLsNpjE3l+C7wPtm2l/YfbQz6EEICT7J3Rp1oEraesLjv++TKMhYQ4jSamhwnYz8dTeXVHxnGYIC5MZxJJ9MEqw0KeiQ2ajVFpBm/XChiXLJ7e/k6HGpVKnQZCebE+xr2RC7KyvZijSGfwuld/i+h2DTfMph4lMhkGmZCS4C6Noz9cDaO7hGx748Lo/K4gDBBzj6RJr633BOrFK853aNvVOxQqO5HyJF0v9Od4XITYTlxVszRwLJ7UkCEtnI5UffcAgRNjKAU5rmY2sbQ5ZrW+3iSFNB22MUMp8dqxvmS5CkyxBBKCuGgIGQSLv62GG2mLtCzmajAz7T076+Sx1MD75wA/BYyvI/DYeYgtxrWVeBGdjQQmCLZjD51GecMWP6njfHK92Ink3DmcojFIS4VvT1zhcmgK4CRvj96CdPCZNl69jItgK/sBdqGBTjP6W8ka4UaXjOVqDIC18kII1Jud/IMBViddmjDhhZbe8twf4Ti8bbtHVhwewHDL5N4utE7BOmq1/XHCwUbP2GA+2riMA8+PsU6GXJH+GSvd5xJZDYe73JrEtlhcX7Mu/81OsFahpZlN0ymws9/4ylaxxQROX8TnnpWJyGMMAZzTcHsh2f02L7mhZJKN7I+qOdYBzSmzkTgFHOwofm/xhTuJ5KanLqg96J9RfznFsN4h+Vlr0YBvduU2SluMXKtYICHsM90w1paQGdF/sw==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature= CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         retour
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         sERR est chaine
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Image1
    identifier : 0x2e10ace804c9b359
    internal_properties : BQAAAAUAAAAy4rCKqq7Moq3jjqIQ8/L4PXQD0EE6WWfIOwWMWrPJkN/gCc3Cs0JBZQ7oDrArrEZoaSZOGV663JNmRmV19567XqhFvBbJY3iqxgr0BJBpSRoSJZ47v9PRiJnhNL7XmBhBLwax42Iq96eNMb8iujev9jvx5r2Xl8hTGNlCQSwEu5Bo36wSO2Tl1CPe1DgjLAFuR22+xSgCpMvWruaAVZxmLqGc3otBmlFRP3lAapQVLNV55q3mXCDHKjAQPIMBLN6TaGU/4lnLN2nc4TKHCley+fnhBhkIdPT97Bpu+FIeZtzqqaiqH9CdI2PCGJljgG/Q6k0WGBVu9Ez9OaY/p8U60u0L3SJTW18rQb3Z9b2bXKktkQsyIwqRnEbLaVilp5JilQ9+tsxVnVhEw93x9tnMbRBD1jDaleR4ZayZc+CaqrBLSLWaM+Mvu0SSZrVNTA7BPan9S8xUmLcWPR2/CWfSlGi6LWXHBg0AB+/mYpLDI/cJf1yX/wiZPrHBU+1Zoiihoc2WusoJZZkycuzHAL/cG79fj3i2jxMBsaWnJWjbzetmu39PcQPyJ8GK1elp/8MR10FbqUzbdcB+F81Dsb2l8OwKanxNJNVgJP/XxMrdFWTUSM8NSgUEzp4HEUAOQtr4sCqmyU6Z4sf/1VGTL4D4sYilfISso7Ri0KX5FRCYhwBbOqVZJaNXM1yRHkixIgAnJjmIrroGxReS+SpxpZvQpxQ+fBBrTd0xc4pPmk/7/OgaeEF1hNfbaHqOsdc/CZm1X75AoJ7fSMON8cQ0Nt95EcfRy67D1e9wtfGhYSiOxu3Rr0wcTFg6PPs+7LxLLyHFCqsFvQ56JxmfBD0YYQeARBvnOTygLBvuiXVe0pdtyWIZJRkPD2j++lY=
    type : 8
    code_elements :
     type_code : 8
     p_codes : []
  -
    name : ECDSA_SigneNombre_ECDSA_VérifieSignature
    identifier : 0x2c02cf800181802d
    internal_properties : BQAAAAUAAABXcqlR4IRa8Z5UFt2czH7xQ9eGEbah808duB0nfQkNoCUNABcmgTyQHtFN1AgMqJzVQYAdLZt2OcBkRk2VqsAcuC5An19IMNJyFrT1BmlGcUmOAy3x5GunW7fO461c1rHpXGYYHy9OyL0/Ncp7/T2RjHHGz4xSuh9SsGtCjdLqNLzqbFF6CCLxNSp7RZvReh7K3iv+cwKUikEMveAE5k766vmm4lHpzvDDbVhrL2jTP6Ui5zJ/oVXrzDYFjGqHJO4Ld1mKnKf2d9DpgHVoZyD15hNhbtx+illRpykZVXcXr4nze5DuHNFnX6Z4CNUyPfKxrnYwmZnXzonBUZaADd2WfCowb23L+AWuZ7apwe4MPJRTnm89lwElsy2yfbR4PjAwR4IP9nYVXQn69p/wbRFQfFaXweLGzkx+pfLMq03wBhNZS3lzUCxCVrHj0JuAPgYu4+3s6gSNwp7eBxPGtPrS+3RZJrZW8eikhuABa+FMDDsMYnqquqV1HHmghyHSh8hIXWtZ54GO84DT1jcEHPJmexjkrXdLt2UwpUTT4VOHs7hSOAv//OqGE4w/Ru0NOaXomEy3gCWiiQN2CYQK6mHzGiPY2v1O/eV3KN1ujWSPsippwKpYy8bBXgZTMtjgECzqrQDj4Vev7Nwj1CyKeYG/NFA5OGvpdhPnYSl0jx9jwMoS3+XCTEJAVcZDBvDJVtpywffeaITN3X8SNsePk6ockqeVyRUa30QTNhRlt3LgdVGjLS2Z5wt4UElyPHod+z1+P4NqlPUXWgJ5q/A=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         CrytoLib est ECDSA_BTC
         ClePrivee est Entier256("8727b3b7be9139498f2f48f7b88f92203b1ce5ea527fd7dd754F650e2216b935")
         N est Entier256("12345678")
         //CléPrivée est Entier256("3")
         
         Trace("Calcul...")
         ChronoDébut()
         signature est SignatureEcdsa
         signature = CrytoLib.SigneNombre( N, ClePrivee)
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Signature : ")
         Trace(signature.R.VersChaineHexa())
         Trace(signature.S.VersChaineHexa())
         
         CléPublique est Point256 = CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         Trace("Clé publique : ")
         Trace(CléPublique.x.VersChaineHexa())
         Trace(CléPublique.y.VersChaineHexa())
         
         sERR est chaine
         ChronoDébut()
         bOK est un booléen =  CrytoLib.VerifieSignature( N, CléPublique, signature, sERR )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : ECDSA_VérifieSignature
    identifier : 0x2e1b496d009cf43f
    internal_properties : BQAAAAUAAAA94cQ75M2WcjZbsmCmUWFrEdYWNGi92I3TIVAJM6DF6ihpf7/MHb28PfRItZaYKy+AzK/cOmlpyAkBJo6RXhJpvaXesfys0GIwmNQtro/c4taXfqAMaVARvhPkVn+6S4Me51LvDJliBJyDEj3FlWPu37mRfx7NpLxwZCv/QJVCHnRcyuxqgVkhmeMyL2zuFQhJjtvFCvV+ftY3SQt7PkGQnW/IxErtc1VhUntijfhWRYRVgwDQ/pwOLC0Ru0sb6sOtjqUtczVUGJUayZaTM2ZRU4VQwb0Wi0NdATxBPliwpQ2HKZX7fxjRkPZG3dkZ+o5+71yOX4LA9fIjhRvrd8TMl7c504MLtpb+pwUq7x+H8fo76JQAnih6bPf85o3ib9O4KGeXJUkh+hZPW4bnRr5D85mMXF3Ta6VttXQYHMFT0zbllzKe1TtCEjWcvpYoxtUN+4GAyUc4as1NK6lfecFxdgay7VuuaF0xazY1MwfnBcj1m7uRR9jenXvuhYccMlRMzTOKxTNqfpltoKcSWusYdR+dly7iFsBloJkubcZUdYXoOTL2Sl8fXMuY/zinDop2b4dqJkkevsRv+su3hYbQ4jTIhf0/jxsnUUuCIPCW5QyOHdrauu5kSLbTkn5aiFrQU7O8FgqZWvHIsS+qyZct8Oe7jN5taiCyFGteaMBmo7GXBYyAACLkLEVFXrTkVuWLfrYGRZLsjmot7B2kDvbg1id1xo8NIjdNEYiN2PV5jHOtZeGXQX3WfkrZ8g==
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         
         // signature
         signature est SignatureEcdsa
         signature.R.affecteAvecChaineHexa("381d97bbc2cfbe448bf256bdb5ff9cd6fdbe27726ee4d603a4f92fa541fa7518")
         signature.S.affecteAvecChaineHexa("040e51ef10775569752ce8258dd5c382e1a39ae6530ba1044a58bed5f8ca9d55")
         // clé pub
         CléPublique est Point256 //= CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         CléPublique.x.affecteAvecChaineHexa("5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         CléPublique.y.affecteAvecChaineHexa("b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         // valeur signée
         N est Entier256("12345678")
         
         sERR est chaine
         Trace("Calcul...")
         ChronoDébut()
         bOK est un booléen =  VerifieSignature( n, CléPublique, signature )
         Trace( "Temps (ms) : " + ChronoFin())
         trace("Vérif signature :" )
         si bOK ALORS
         	trace("OK")
         	retour
         FIN
         Trace("***************** FAILED ****************")
         Trace(bOK)
         Trace(sERR)
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Bench_ECDSA_VérifieSignature
    identifier : 0x2e41069e011dea6e
    internal_properties : BQAAAAUAAAA2uyO87L/L3F7csOiq1nK2DXQbaoBON+dIz4ggK7Hs3x8n6Bqu8wVTzl9uw4A5/TyniQ7bjb/R8njHZOT155BKwRHGZbrrMXe5+/xA8yl+zz7Znfk+t+9CI4B2WdculHB+25geKDuNIvOqUlXIlGb45c8oDFU6DUWw2mZLqNojHhnd8+bosENZqFqy54JKXqwhlQ9lHnqA9tyji9vAdEOEnXFkNhkEJUzAVTh1UCShNPs2Ycd5A4Oh/AasAY0f0Ku5URCbMbtuiT5dquuNZ0uWXK6FO7apwQjLeqAH6bUMwCZLA2gVM6Vbi07WrcQ9Ldg1hOE/catwnL/6efns0mdzqgTS33FWUBhefadZrgDPKKPInX+w8dJeO/J1fHogjsDgiejsfE5aYWLh/svMBZ/ukXVZP4aefFD9O30PdTyKgCZ/ajEzFEpvqCVtqV+j85w/c4TZLr77WwHv2vDk4PwqhE4xqqD9aajhlVHc8iRyRlR3BO6iAv/rJQkzBGwj5+uAX2aDfq6DHc1je14jXaoN90+ctiXPTaW7OGJdFonhzBGqymWnRXQ2OAWBFhVeg1ECRYTPJwa6gkrTTXHeqHH5qxckYsVn+uDsWWzt5WkrIsmU1ygjKWXTYpy5CVA0DeVSrsrnc8GSJAugHHzMopilz9G3IOhnoRF6KP8+UStPpBPmKw8OfuFfXOtFbLJS/s6OyYafHG4/e0qs8TnLcmR5Y5bB2DC7wOHGVv4hUE3hTd5cdyHJ0/xCHBFoN2dicMBYTjvM
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         
         
         
         // signature
         signature est SignatureEcdsa
         signature.R.affecteAvecChaineHexa("381d97bbc2cfbe448bf256bdb5ff9cd6fdbe27726ee4d603a4f92fa541fa7518")
         signature.S.affecteAvecChaineHexa("040e51ef10775569752ce8258dd5c382e1a39ae6530ba1044a58bed5f8ca9d55")
         // clé pub
         CléPublique est Point256 //= CrytoLib.DériveCléPubliqueDepuisCléPrivée( ClePrivee )
         CléPublique.x.affecteAvecChaineHexa("5b0ec43c0ea2bb19964c367e44bfba69b3ec528a3c15a4122bb90ff42bcef87b")
         CléPublique.y.affecteAvecChaineHexa("b809f2a2d4c6423c2f946ff6499dffec78385fd75f97245910c358a4a55cfdb6")
         
         // valeur signée
         N est Entier256("12345678")
         // 1 test a blanc
         bOK est un booléen =  VerifieSignature( N, CléPublique, signature )
         SI pas bOK ALORS
         	Trace("***************** FAILED ****************")
         	RETOUR
         FIN
         	
         //sERR est chaine
         Trace("Calcul...")
         ChronoDébut()
         pour i = 1 a 1000
         	bOK  =  VerifieSignature( N, CléPublique, signature )
         fin
         nTempMs est un entier = ChronoFin()
         Trace( "Temps pour 1000 (ms) : " + nTempMs )
         Trace( "Temps/appel     (ms) : " + (nTempMs /1000.0) )
         
         
         
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Compile_formule_Double_Jacobi
    identifier : 0x2e464ed4009f76b4
    internal_properties : BQAAAAUAAAAmNaYHzt9vFi3ezOcKyR3F0u/FwYaIOoZ6YFlMBP3SAlFEP8cga9WA0IvdI8gDpUDp2AnXzRWOWUsqHMcxVDFgn32Ghq0X9sZW5AlGWPeHsAJG0JhjpOg8mes2+LHRq3RmDqilczX4obvruAy8h2nhcno7nOpBu+P5JP96daedf/In/os2+toPe7ql/dwQCccdGGez4PbL9YR3wzySzCj/+Q+26KS9XdXhLF8EJR1xqVzD0sFGD5MYu6zAwaEqQ4cmWjoaidqbWRbIKHtGorqkem8tnW+3ggvTTPTJ55dKeMvxe/ZfEsH3eSfgyqgXVk9C1solaZlleWhClrYmjEviYy4gq+SJPoaA7sApyBGaNtKaHwWAqWix/U5rNnTY6TSf2SeR+WbXcdJESlBnTWRA4kLG1PEaTahF5CWoiphXrh+sAyxSjGcPyJQl5FB5OuQGlktyx9p+cTuk4COphmFyletadeNXILTtXitlfQQhUvv6j/eRCJyHITD5sz8tUtUD1tEm8xhcA3cSi6cICwVbmoZL3QAPGBHH3/rIk1lM3ggOmhMtpHR3qcdSZq/570g4dwS5d3vek3t9UHfma6USrTXqfL0oECmFwW27rc6vB8WUx2oDUtsiTRxA4UyZBO/zHAiEpTpVSrJwEwaOXQ6VHDMCKPoW6pdipES4m7LcLJEBbBe/FhZ/zM55ZnBV0PmsrTpdNYjofTnER8gIAwVoUfjL3zcmnjSES5PXvAC1DqBw+FoflBFZ99V0OZ0=
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CPL est un compilateurDeFormule
         courbe est CourbeElliptique_secp256k1
         corps est un CorpsModulaire_pointSepc256k1 dynamique <-courbe.corps_point_secp256k1
         
         
         //addrB est un entier système = &_B
         
         //CPL.déclareParamètre("X" )
         //CPL.déclareParamètre("Y" )
         //CPL.déclareParamètre("Z" )
         CPL.déclareOpérateurBinaire("*", corps.addrprocMult256x256Modulo  )
         CPL.déclareOpérateurBinaire(".", corps.addrprocMult256x64Modulo,  compilateurDeFormule.UI8  ) // 64bits x 258 bits
         CPL.déclareOpérateurBinaire("-", corps.addrprocSoustractionModulo )
         _pf est un entier système
         //The "dbl-1998-cmo-2" doubling formulas
         sCodePoint_Doubling_Jacobi est chaine = [
         doubleP( P Point3D )
         	XX	  = P.X*P.X
         	YY	  = P.Y*P.Y
         	ZZ    = P.Z*P.Z
         	XYY   = P.X*YY
         	S	  = 4.XYY
         	2S	  = 2.S
         	M	  = 3.XX 
         	MM    = M*M
         	P.X   = MM-2S       // resultat X
         	S_X   = S-P.X
         	YYYY  = YY*YY
         	8YYYY = 8.YYYY
         	MS_X  = M*S_X
         	YZ	  = P.Y*P.Z	 
         	P.Y   = MS_X-8YYYY // resultat Y
         	P.Z	  = 2.YZ	   // resultat Z
         ]
         
         _pf = CPL.compileFormule(sCodePoint_Doubling_Jacobi)
         si _pf =0 ALORS
         	trace("*** ERREUR ***")
         	trace(ErreurInfo())
         	retour
         FIN
         trace(_pf)
         _X	est Entier256(311)
         _Y	est Entier256(747)
         _Z	est Entier256(1)
         P est Point256_3D
         P.x = _X
         P.Y = _Y
         P.z = _Z
         P2 est Point256_3D = courbe.pointDouble_Jacobi(P)
         Trace("X:"+P2.x.VersChaineHexa() )
         Trace("Y:"+P2.y.VersChaineHexa() )
         Trace("Z:"+P2.z.VersChaineHexa() )
         trace("GO : ---------------------------------")
         //_Resultat	est Entier256
         bufVecteur est un buffer sur 96
         Transfert( &bufVecteur,    &P.x, 32)
         Transfert( &bufVecteur+32, &P.y, 32)
         Transfert( &bufVecteur+64, &P.z, 32)
         
         API( _pf, &bufVecteur) // (3*3)-3 => 6
         
         Transfert( &P.x, &bufVecteur,    32)
         Transfert( &P.y, &bufVecteur+32, 32)
         Transfert( &P.z, &bufVecteur+64, 32)
         
         trace("X:"+P.X.VersChaineHexa() )
         trace("Y:"+P.Y.VersChaineHexa() )
         trace("Z:"+P.Z.VersChaineHexa() )
         
        type : 18
      -
        type : 161
        enabled : false
  -
    name : Compile_formule_addition_Jacobi
    identifier : 0x2e478d210126d408
    internal_properties : BQAAAAUAAAA9riKpUw7iy429K6fdGsWpYs2MBxVzQmLVaqQ6nAat+Gb2P1V3LKRGg1qt+GEetmVSLH3WnohYdaEmA1G+ZNXvINi9+HbI6C4owEhD31u+t5pFltMzG6VOuOSIoOEbVLoev3CYAuBJSU4PfL9saLBlx7bTZwO2n+f2EJNuAhMxBcjpy08kHHFE2UAY8gZBcm2wTfWpEu7YvuIBE9mC+rFiN69Demxu0RJBxe5N0FQ5jHtGiff5Y2up9MZ0AUXXYItRaaDD+cPeSe7VaqMtF2P+fM79qwZJaSBjynjnMV0cgO6D04AtO6Vrq/Y2VWTNZcBFpNlPMRt41DcqQfl0+jeDYrzCp1megDj+FYdxjqDnoMPo1Y8w8aqWE/Lt3GLYvnBokfRw+EpeXQ41Wk8AKZOCDUGFs/JqMDzpX6nD2dCelEI7VqUvkL7bdKn5LSOnh9DL3zBdCuovB43DtgRIlMBu8DotHhzJPbT9ab1Qtij2OiBzQHLu/vOn0S2PyMDHW1/sy8In2rqXealnZ7JnUZ5xU1uoukHrYbFXjqjK09QAnOlbTx4eToENE/iqK6x3br5vaptH5KWy3tEqeLNXMbyWTUHSw9ULJ0/UoO0Cpm5KXdPPASBizpzulWWxLDzwuEZ/C+s4iJSsgPrbzdT6DFBUuht7mPjXwP/oIRjBAOAIjv/qI1WSYrtx4iUFspKyDMiKfSJhHP7FOcSSAccD8trz9+q5PuRPaguMoKoTPLEbK6as8+ft8xmZF9QjFBxlRQdpUzDH
    type : 4
    code_elements :
     type_code : 4
     p_codes :
      -
        code : |1+
         CPL est un compilateurDeFormule
         courbe est CourbeElliptique_secp256k1
         corps est un CorpsModulaire_pointSepc256k1 dynamique <-courbe.corps_point_secp256k1
         
         
         //addrB est un entier système = &_B
         
         //CPL.déclareParamètre("X1" )
         //CPL.déclareParamètre("Y1" )
         //CPL.déclareParamètre("Z1" )
         //CPL.déclareParamètre("X2" )
         //CPL.déclareParamètre("Y2" )
         //CPL.déclareParamètre("Z2" )
         CPL.déclareOpérateurBinaire("*", corps.addrprocMult256x256Modulo  )
         CPL.déclareOpérateurBinaire(".", corps.addrprocMult256x64Modulo,  compilateurDeFormule.UI8  ) // 64bits x 258 bits
         CPL.déclareOpérateurBinaire("-", corps.addrprocSoustractionModulo )
         //CPL.déclareOpérateurBinaire("+", corps.addrprocSoustractionModulo )
         _pf est un entier système
         //The "dbl-1998-cmo-2" doubling formulas
         sCodePoint_Doubling_Jacobi est chaine = [
         F(X1,Y1,Z1, X2,Y2,Z2)<§cs:2§>
         	Z1Z1  = Z1*Z1<§cs:2§>
         	Z2Z2  = Z2*Z2<§cs:2§>
         	U1    = X1*Z2Z2<§cs:2§>
         	U2    = X2*Z1Z1<§cs:2§>
         //S1 = Y1*Z2*Z2Z2	<§cs:2§>
         	Y1Z2  = Y1*Z2<§cs:2§>
         	S1	  = Y1Z2*Z2Z2<§cs:2§>
         //S2 = Y2*Z1*Z1Z1	<§cs:2§>
         	Y2Z1  = Y2*Z1<§cs:2§>
         	S2	  = Y2Z1*Z1Z1<§cs:2§>
         	H	  = U2-U1<§cs:2§>
         	HH    = H*H<§cs:2§>
         	HHH   = HH*H<§cs:2§>
         	r	  = S2-S1<§cs:2§>
         	V	  = U1*HH<§cs:2§>
         // X' = r^2-HHH-2*V<§cs:2§>
         	rr    = r*r<§cs:2§>
         	2V    = 2.V<§cs:2§>
         	temp  = rr-HHH<§cs:2§>
         	X1    = temp-2V<§cs:2§>
         //	Y' = r*(V-X')-S1*HHH<§cs:2§>
         	V_X   = V-X1<§cs:2§>
         	rV_X  = r*V_X<§cs:2§>
         	S1HHH = S1*HHH<§cs:2§>
         	Y1    = rV_X-S1HHH<§cs:2§>
         //  Z' = Z1*Z2*H<§cs:2§>
         	Z1Z2  = Z1*Z2<§cs:2§>
         	Z1    = Z1Z2*H<§cs:2§>
         ]
         
         _pf = CPL.compileFormule(sCodePoint_Doubling_Jacobi)
         si _pf =0 ALORS
         	trace("*** ERREUR ***")
         	trace(ErreurInfo())
         	retour
         FIN
         trace(_pf)
         
         P1 est Point256_3D
         P2 est Point256_3D
         P3 est Point256_3D
         P1.x.affecteAvecEntierPositif(23)
         P1.y.affecteAvecEntierPositif(7)
         P1.z.affecteAvecEntierPositif(14)
         
         P2.x.affecteAvecEntierPositif(5585)
         P2.y.affecteAvecEntierPositif(222)
         P2.z.affecteAvecEntierPositif(59)
         P3 = courbe.pointPlusPoint_Jacobi(P1,P2)
         Trace("X:"+P3.x.VersChaineHexa() )
         Trace("Y:"+P3.y.VersChaineHexa() )
         Trace("Z:"+P3.z.VersChaineHexa() )
         /// TEST 
         trace("GO : ---------------------------------")
         //_Resultat	est Entier256
         API( _pf, &P1.x, &P1.y, &P1.z,  &P2.x, &P2.y, &P2.z  ) // (3*3)-3 => 6
         Trace("X:"+P1.x.VersChaineHexa() )
         Trace("Y:"+P1.y.VersChaineHexa() )
         Trace("Z:"+P1.z.VersChaineHexa() )
         
         
        type : 18
      -
        type : 161
        enabled : false
 menu :
  name : _Menu
  identifier : 0x292573e513b5f221
  internal_properties : BQAAAAUAAABd4biPtdLQOwfUFiqrit8H4xfGqKyz9t6VLxCUnNZRQiLPVs82PZNE+UVdKRzjizyeuKyRur85gNMUfqplpmtNDnQWQla9zo+GH9+1EfUJ6w17Dn/egD/gv+Hhywk8c9unIdzEp7EHgaAqD28w7Agveg4u19PBcKGZtQ==
  options : []
 languages :
  - fr-FR
 popup_menus : []
 message_bar :
  internal_properties : BQAAAAUAAABqPQh6HC8RxAVkp2SqPYLuZrfVhd+1KX4lx22hIT8uqEpE6yP7Sbc2rmVqdmL816EWzXOkEe9ijOtYwchZKAfpy3B1cNqhpJgsnbUs
 code_elements :
  internal_properties : BQAAAAUAAABWIHrh1Yb2YcVvIfiiRDSu3aXMOSCmrRDPwCP2jtbUBEGFOv+qg2ayVXoCZujUnWzZv/mop+WO+JtZ1Q==
  type_code : 1
  p_codes :
   -
     code : |1+
      PROCEDURE MaFenêtre()
   -
     code : |1+
      
      
     type : 34
   -
     code : |1+
      
      
     type : 2
   -
     code : |1+
      
      
     type : 40
   -
     code : |1+
      
      
     type : 234
   -
     code : |1+
      
      
     type : 165
   -
     code : |1+
      
      
     type : 177
   -
     code : |1+
      
      
     type : 180
   -
     type : 230
     enabled : false
  procedures :
   -
     name : PGCD_Ex
     procedure_id : 1994461367820771349
     type_code : 14
     code : |1+
      
      PROCEDURE PGCD_Ex( nA entier, nB entier)
      
      dbgAssertion(nB > nA )
      
      r, u, v   sont des entiers
      r_,u_,v_ sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      u  = 1
      v  = 0
      u_ = 0
      v_ = 1
      
      tantque r_ <> 0
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp,vTemp sont des entiers
          rTemp = r;
          uTemp = u;
          vTemp = v;
          
          r =r_
          u =u_
          v =v_ 
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	u_Avant est entier = u_
       	v_Avant est entier = v_
      	u_ = uTemp - quotient * u_
      	v_ = vTemp - quotient * v_
      	//trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " + u_Avant )
      	trace( complete(r_+"",4," ") + " = " + Complète(uTemp+"",4," ") + " + " + quotient + " * " + u_Avant )
      fin
      
     type : 458752
   -
     name : PGCD_ExR
     procedure_id : 1994470541871085041
     type_code : 14
     code : |1+
      // version résursive
      PROCEDURE PGCD_ExR( nA entier, nB entier, u=1, u_ =0 )
      
      //dbgAssertion(nB > nA )
      
      r   sont des entiers
      r_  sont des entiers
      //reste est un entier
      quotient est entier 
      
      // init
      r  = nA 
      r_ = nB
      
      
      si  r_ = 0 ALORS
      	renvoyer ( r, r_ ,  u, u_) 
      
      FIN
      
          quotient =  r / r_
          
          // sauver les valeur précédentes
          rTemp,uTemp sont des entiers
          rTemp = r;
          uTemp = u;
          r	  = r_
          u     = u_
          
          // calcul du reste
      	r_ 	 =  rTemp- r_*quotient
      	dbgAssertion(r_>=0)
       	uPourTrace est entier = u_
      	u_ = uTemp - quotient * u_
      	trace( complete(u_+"",4," ") + " = " + Complète(uTemp+"",4," ") + "- " + quotient + " * " +uPourTrace )
      	// récursion
      	( r, r_ ,  u, u_) = PGCD_ExR( r, r_,u,u_)
      	
      renvoyer  ( r, r_ ,  u, u_)
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAAwjDLmDSZ0H1P68nJIeNfqR9EvRjU/K+sVcM1T6rhVNr+VTV1mZ/rmoweYbFDZUhBGcv8UsxlDxVCOnb2U/SQOvlGWzNby3/w/V+ppSymxv+Vh
  original_name : Modele1
resources :
 string_res :
  identifier : 0x1b7cfed701529005
  internal_properties : BQAAAAUAAAAa2Zm8J9E/zh+/WIrVvz1fER/So3PB0gjQuxc1xKQVWY4ZDm5lfg==
custom_note :
 internal_properties : BQAAAAUAAAC68/W0/adbG0nFCRhrE42B5HRnbDzVHaz86sSQyxlBk7I=
rad :
 internal_properties : BQAAAAUAAABoAN7PLpwJW3EiA7WVZdCA5EwrCA1rvutcDHooMWKe
